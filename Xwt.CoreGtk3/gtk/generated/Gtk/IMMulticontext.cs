// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class IMMulticontext : Gtk.IMContext {

		public IMMulticontext (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_im_multicontext_new();

		public IMMulticontext () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (IMMulticontext)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_im_multicontext_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkIMMulticontextClass {
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.IMContext)).GetClassSize ();
		static Dictionary<GLib.GType, GtkIMMulticontextClass> class_structs;

		static GtkIMMulticontextClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkIMMulticontextClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkIMMulticontextClass class_struct = (GtkIMMulticontextClass) Marshal.PtrToStructure (class_ptr, typeof (GtkIMMulticontextClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkIMMulticontextClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_im_multicontext_append_menuitems(IntPtr raw, IntPtr menushell);

		public void AppendMenuitems(Gtk.MenuShell menushell) {
			gtk_im_multicontext_append_menuitems(Handle, menushell == null ? IntPtr.Zero : menushell.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_im_multicontext_get_context_id(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_im_multicontext_set_context_id(IntPtr raw, IntPtr context_id);

		public string ContextId { 
			get {
				IntPtr raw_ret = gtk_im_multicontext_get_context_id(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_im_multicontext_set_context_id(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_im_multicontext_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_im_multicontext_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
