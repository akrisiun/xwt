// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Socket : Gtk.Container {

		public Socket (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_socket_new();

		public Socket () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Socket)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_socket_new();
		}

		[GLib.Signal("plug-removed")]
		public event Gtk.PlugRemovedHandler PlugRemoved {
			add {
				this.AddSignalHandler ("plug-removed", value, typeof (Gtk.PlugRemovedArgs));
			}
			remove {
				this.RemoveSignalHandler ("plug-removed", value);
			}
		}

		[GLib.Signal("plug-added")]
		public event System.EventHandler PlugAdded {
			add {
				this.AddSignalHandler ("plug-added", value);
			}
			remove {
				this.RemoveSignalHandler ("plug-added", value);
			}
		}

		static PlugAddedNativeDelegate PlugAdded_cb_delegate;
		static PlugAddedNativeDelegate PlugAddedVMCallback {
			get {
				if (PlugAdded_cb_delegate == null)
					PlugAdded_cb_delegate = new PlugAddedNativeDelegate (PlugAdded_cb);
				return PlugAdded_cb_delegate;
			}
		}

		static void OverridePlugAdded (GLib.GType gtype)
		{
			OverridePlugAdded (gtype, PlugAddedVMCallback);
		}

		static void OverridePlugAdded (GLib.GType gtype, PlugAddedNativeDelegate callback)
		{
			GtkSocketClass class_iface = GetClassStruct (gtype, false);
			class_iface.PlugAdded = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PlugAddedNativeDelegate (IntPtr inst);

		static void PlugAdded_cb (IntPtr inst)
		{
			try {
				Socket __obj = GLib.Object.GetObject (inst, false) as Socket;
				__obj.OnPlugAdded ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Socket), ConnectionMethod="OverridePlugAdded")]
		protected virtual void OnPlugAdded ()
		{
			InternalPlugAdded ();
		}

		private void InternalPlugAdded ()
		{
			PlugAddedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).PlugAdded;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static PlugRemovedNativeDelegate PlugRemoved_cb_delegate;
		static PlugRemovedNativeDelegate PlugRemovedVMCallback {
			get {
				if (PlugRemoved_cb_delegate == null)
					PlugRemoved_cb_delegate = new PlugRemovedNativeDelegate (PlugRemoved_cb);
				return PlugRemoved_cb_delegate;
			}
		}

		static void OverridePlugRemoved (GLib.GType gtype)
		{
			OverridePlugRemoved (gtype, PlugRemovedVMCallback);
		}

		static void OverridePlugRemoved (GLib.GType gtype, PlugRemovedNativeDelegate callback)
		{
			GtkSocketClass class_iface = GetClassStruct (gtype, false);
			class_iface.PlugRemoved = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool PlugRemovedNativeDelegate (IntPtr inst);

		static bool PlugRemoved_cb (IntPtr inst)
		{
			try {
				Socket __obj = GLib.Object.GetObject (inst, false) as Socket;
				bool __result;
				__result = __obj.OnPlugRemoved ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Socket), ConnectionMethod="OverridePlugRemoved")]
		protected virtual bool OnPlugRemoved ()
		{
			return InternalPlugRemoved ();
		}

		private bool InternalPlugRemoved ()
		{
			PlugRemovedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).PlugRemoved;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSocketClass {
			public PlugAddedNativeDelegate PlugAdded;
			public PlugRemovedNativeDelegate PlugRemoved;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Container)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSocketClass> class_structs;

		static GtkSocketClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSocketClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSocketClass class_struct = (GtkSocketClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSocketClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSocketClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_socket_add_id(IntPtr raw, UIntPtr window);

		public void AddId(ulong window) {
			gtk_socket_add_id(Handle, new UIntPtr (window));
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gtk_socket_get_id(IntPtr raw);

		public ulong Id { 
			get {
				UIntPtr raw_ret = gtk_socket_get_id(Handle);
				ulong ret = (ulong) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_socket_get_plug_window(IntPtr raw);

		public Gdk.Window PlugWindow { 
			get {
				IntPtr raw_ret = gtk_socket_get_plug_window(Handle);
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_socket_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_socket_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
