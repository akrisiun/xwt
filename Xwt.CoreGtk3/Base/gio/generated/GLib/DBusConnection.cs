// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DBusConnection : GLib.Object, GLib.IInitable, GLib.IAsyncInitable {

		public DBusConnection (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_connection_new(IntPtr stream, IntPtr guid, int flags, IntPtr observer, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public DBusConnection (GLib.IOStream stream, string guid, GLib.DBusConnectionFlags flags, GLib.DBusAuthObserver observer, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusConnection)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_guid = GLib.Marshaller.StringToPtrGStrdup (guid);
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			Raw = g_dbus_connection_new(stream == null ? IntPtr.Zero : stream.Handle, native_guid, (int) flags, observer == null ? IntPtr.Zero : observer.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			GLib.Marshaller.Free (native_guid);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_connection_new_finish(IntPtr res, out IntPtr error);

		public unsafe DBusConnection (GLib.IAsyncResult res) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusConnection)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr error = IntPtr.Zero;
			Raw = g_dbus_connection_new_finish(res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_connection_new_for_address(IntPtr address, int flags, IntPtr observer, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public DBusConnection (string address, GLib.DBusConnectionFlags flags, GLib.DBusAuthObserver observer, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusConnection)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_address = GLib.Marshaller.StringToPtrGStrdup (address);
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			Raw = g_dbus_connection_new_for_address(native_address, (int) flags, observer == null ? IntPtr.Zero : observer.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			GLib.Marshaller.Free (native_address);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_connection_new_for_address_finish(IntPtr res, out IntPtr error);

		public static unsafe DBusConnection NewForAddressFinish(GLib.IAsyncResult res)
		{
			IntPtr error = IntPtr.Zero;
			DBusConnection result = new DBusConnection (g_dbus_connection_new_for_address_finish(res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), out error));
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return result;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_connection_new_for_address_sync(IntPtr address, int flags, IntPtr observer, IntPtr cancellable, out IntPtr error);

		public unsafe DBusConnection (string address, GLib.DBusConnectionFlags flags, GLib.DBusAuthObserver observer, GLib.Cancellable cancellable) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusConnection)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_address = GLib.Marshaller.StringToPtrGStrdup (address);
			IntPtr error = IntPtr.Zero;
			Raw = g_dbus_connection_new_for_address_sync(native_address, (int) flags, observer == null ? IntPtr.Zero : observer.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.Marshaller.Free (native_address);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_connection_new_sync(IntPtr stream, IntPtr guid, int flags, IntPtr observer, IntPtr cancellable, out IntPtr error);

		public unsafe DBusConnection (GLib.IOStream stream, string guid, GLib.DBusConnectionFlags flags, GLib.DBusAuthObserver observer, GLib.Cancellable cancellable) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusConnection)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_guid = GLib.Marshaller.StringToPtrGStrdup (guid);
			IntPtr error = IntPtr.Zero;
			Raw = g_dbus_connection_new_sync(stream == null ? IntPtr.Zero : stream.Handle, native_guid, (int) flags, observer == null ? IntPtr.Zero : observer.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.Marshaller.Free (native_guid);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_connection_get_stream(IntPtr raw);

		[GLib.Property ("stream")]
		public GLib.IOStream Stream {
			get  {
				IntPtr raw_ret = g_dbus_connection_get_stream(Handle);
				GLib.IOStream ret = GLib.Object.GetObject(raw_ret) as GLib.IOStream;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_connection_get_guid(IntPtr raw);

		[GLib.Property ("guid")]
		public string Guid {
			get  {
				IntPtr raw_ret = g_dbus_connection_get_guid(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_connection_get_unique_name(IntPtr raw);

		[GLib.Property ("unique-name")]
		public string UniqueName {
			get  {
				IntPtr raw_ret = g_dbus_connection_get_unique_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_connection_is_closed(IntPtr raw);

		[GLib.Property ("closed")]
		public bool IsClosed {
			get  {
				bool raw_ret = g_dbus_connection_is_closed(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_connection_get_exit_on_close(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_connection_set_exit_on_close(IntPtr raw, bool exit_on_close);

		[GLib.Property ("exit-on-close")]
		public bool ExitOnClose {
			get  {
				bool raw_ret = g_dbus_connection_get_exit_on_close(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				g_dbus_connection_set_exit_on_close(Handle, value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_dbus_connection_get_capabilities(IntPtr raw);

		[GLib.Property ("capabilities")]
		public GLib.DBusCapabilityFlags Capabilities {
			get  {
				int raw_ret = g_dbus_connection_get_capabilities(Handle);
				GLib.DBusCapabilityFlags ret = (GLib.DBusCapabilityFlags) raw_ret;
				return ret;
			}
		}

		[GLib.Signal("closed")]
		public event GLib.ClosedHandler Closed {
			add {
				this.AddSignalHandler ("closed", value, typeof (GLib.ClosedArgs));
			}
			remove {
				this.RemoveSignalHandler ("closed", value);
			}
		}

		static ClosedNativeDelegate Closed_cb_delegate;
		static ClosedNativeDelegate ClosedVMCallback {
			get {
				if (Closed_cb_delegate == null)
					Closed_cb_delegate = new ClosedNativeDelegate (Closed_cb);
				return Closed_cb_delegate;
			}
		}

		static void OverrideClosed (GLib.GType gtype)
		{
			OverrideClosed (gtype, ClosedVMCallback);
		}

		static void OverrideClosed (GLib.GType gtype, ClosedNativeDelegate callback)
		{
			GDBusConnectionClass class_iface = GetClassStruct (gtype, false);
			class_iface.Closed = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClosedNativeDelegate (IntPtr inst, bool remote_peer_vanished, IntPtr error);

		static void Closed_cb (IntPtr inst, bool remote_peer_vanished, IntPtr error)
		{
			try {
				DBusConnection __obj = GLib.Object.GetObject (inst, false) as DBusConnection;
				__obj.OnClosed (remote_peer_vanished, error);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.DBusConnection), ConnectionMethod="OverrideClosed")]
		protected virtual void OnClosed (bool remote_peer_vanished, IntPtr error)
		{
			InternalClosed (remote_peer_vanished, error);
		}

		private void InternalClosed (bool remote_peer_vanished, IntPtr error)
		{
			ClosedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Closed;
			if (unmanaged == null) return;

			unmanaged (this.Handle, remote_peer_vanished, error);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GDBusConnectionClass {
			public ClosedNativeDelegate Closed;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GDBusConnectionClass> class_structs;

		static GDBusConnectionClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GDBusConnectionClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GDBusConnectionClass class_struct = (GDBusConnectionClass) Marshal.PtrToStructure (class_ptr, typeof (GDBusConnectionClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GDBusConnectionClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint g_dbus_connection_add_filter(IntPtr raw, GLibSharp.DBusMessageFilterFunctionNative filter_function, IntPtr user_data, GLib.DestroyNotify user_data_free_func);

		public uint AddFilter(GLib.DBusMessageFilterFunction filter_function) {
			GLibSharp.DBusMessageFilterFunctionWrapper filter_function_wrapper = new GLibSharp.DBusMessageFilterFunctionWrapper (filter_function);
			IntPtr user_data;
			GLib.DestroyNotify user_data_free_func;
			if (filter_function == null) {
				user_data = IntPtr.Zero;
				user_data_free_func = null;
			} else {
				user_data = (IntPtr) GCHandle.Alloc (filter_function_wrapper);
				user_data_free_func = GLib.DestroyHelper.NotifyHandler;
			}
			uint raw_ret = g_dbus_connection_add_filter(Handle, filter_function_wrapper.NativeDelegate, user_data, user_data_free_func);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_connection_call(IntPtr raw, IntPtr bus_name, IntPtr object_path, IntPtr interface_name, IntPtr method_name, IntPtr parameters, IntPtr reply_type, int flags, int timeout_msec, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void Call(string bus_name, string object_path, string interface_name, string method_name, GLib.Variant parameters, GLib.VariantType reply_type, GLib.DBusCallFlags flags, int timeout_msec, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			IntPtr native_bus_name = GLib.Marshaller.StringToPtrGStrdup (bus_name);
			IntPtr native_object_path = GLib.Marshaller.StringToPtrGStrdup (object_path);
			IntPtr native_interface_name = GLib.Marshaller.StringToPtrGStrdup (interface_name);
			IntPtr native_method_name = GLib.Marshaller.StringToPtrGStrdup (method_name);
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_dbus_connection_call(Handle, native_bus_name, native_object_path, native_interface_name, native_method_name, parameters == null ? IntPtr.Zero : parameters.Handle, reply_type == null ? IntPtr.Zero : reply_type.Handle, (int) flags, timeout_msec, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			GLib.Marshaller.Free (native_bus_name);
			GLib.Marshaller.Free (native_object_path);
			GLib.Marshaller.Free (native_interface_name);
			GLib.Marshaller.Free (native_method_name);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_connection_call_finish(IntPtr raw, IntPtr res, out IntPtr error);

		public unsafe GLib.Variant CallFinish(GLib.IAsyncResult res) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_dbus_connection_call_finish(Handle, res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), out error);
			GLib.Variant ret = new GLib.Variant(raw_ret);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_connection_call_sync(IntPtr raw, IntPtr bus_name, IntPtr object_path, IntPtr interface_name, IntPtr method_name, IntPtr parameters, IntPtr reply_type, int flags, int timeout_msec, IntPtr cancellable, out IntPtr error);

		public unsafe GLib.Variant CallSync(string bus_name, string object_path, string interface_name, string method_name, GLib.Variant parameters, GLib.VariantType reply_type, GLib.DBusCallFlags flags, int timeout_msec, GLib.Cancellable cancellable) {
			IntPtr native_bus_name = GLib.Marshaller.StringToPtrGStrdup (bus_name);
			IntPtr native_object_path = GLib.Marshaller.StringToPtrGStrdup (object_path);
			IntPtr native_interface_name = GLib.Marshaller.StringToPtrGStrdup (interface_name);
			IntPtr native_method_name = GLib.Marshaller.StringToPtrGStrdup (method_name);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_dbus_connection_call_sync(Handle, native_bus_name, native_object_path, native_interface_name, native_method_name, parameters == null ? IntPtr.Zero : parameters.Handle, reply_type == null ? IntPtr.Zero : reply_type.Handle, (int) flags, timeout_msec, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.Variant ret = new GLib.Variant(raw_ret);
			GLib.Marshaller.Free (native_bus_name);
			GLib.Marshaller.Free (native_object_path);
			GLib.Marshaller.Free (native_interface_name);
			GLib.Marshaller.Free (native_method_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_connection_close(IntPtr raw, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void Close(GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_dbus_connection_close(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_dbus_connection_close_finish(IntPtr raw, IntPtr res, out IntPtr error);

		public unsafe bool CloseFinish(GLib.IAsyncResult res) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_dbus_connection_close_finish(Handle, res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_dbus_connection_close_sync(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public unsafe bool CloseSync(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_dbus_connection_close_sync(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_dbus_connection_emit_signal(IntPtr raw, IntPtr destination_bus_name, IntPtr object_path, IntPtr interface_name, IntPtr signal_name, IntPtr parameters, out IntPtr error);

		public unsafe bool EmitSignal(string destination_bus_name, string object_path, string interface_name, string signal_name, GLib.Variant parameters) {
			IntPtr native_destination_bus_name = GLib.Marshaller.StringToPtrGStrdup (destination_bus_name);
			IntPtr native_object_path = GLib.Marshaller.StringToPtrGStrdup (object_path);
			IntPtr native_interface_name = GLib.Marshaller.StringToPtrGStrdup (interface_name);
			IntPtr native_signal_name = GLib.Marshaller.StringToPtrGStrdup (signal_name);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_dbus_connection_emit_signal(Handle, native_destination_bus_name, native_object_path, native_interface_name, native_signal_name, parameters == null ? IntPtr.Zero : parameters.Handle, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_destination_bus_name);
			GLib.Marshaller.Free (native_object_path);
			GLib.Marshaller.Free (native_interface_name);
			GLib.Marshaller.Free (native_signal_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_connection_flush(IntPtr raw, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void Flush(GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_dbus_connection_flush(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_dbus_connection_flush_finish(IntPtr raw, IntPtr res, out IntPtr error);

		public unsafe bool FlushFinish(GLib.IAsyncResult res) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_dbus_connection_flush_finish(Handle, res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_dbus_connection_flush_sync(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public unsafe bool FlushSync(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_dbus_connection_flush_sync(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_connection_get_peer_credentials(IntPtr raw);

		public GLib.Credentials PeerCredentials { 
			get {
				IntPtr raw_ret = g_dbus_connection_get_peer_credentials(Handle);
				GLib.Credentials ret = GLib.Object.GetObject(raw_ret) as GLib.Credentials;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_connection_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_dbus_connection_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe uint g_dbus_connection_register_object(IntPtr raw, IntPtr object_path, IntPtr interface_info, IntPtr vtable, IntPtr user_data, GLib.DestroyNotify user_data_free_func, out IntPtr error);

		public unsafe uint RegisterObject(string object_path, GLib.DBusInterfaceInfo interface_info, GLib.DBusInterfaceVTable vtable, IntPtr user_data, GLib.DestroyNotify user_data_free_func) {
			IntPtr native_object_path = GLib.Marshaller.StringToPtrGStrdup (object_path);
			IntPtr native_vtable = GLib.Marshaller.StructureToPtrAlloc (vtable);
			IntPtr error = IntPtr.Zero;
			uint raw_ret = g_dbus_connection_register_object(Handle, native_object_path, interface_info == null ? IntPtr.Zero : interface_info.Handle, native_vtable, user_data, user_data_free_func, out error);
			uint ret = raw_ret;
			GLib.Marshaller.Free (native_object_path);
			vtable = GLib.DBusInterfaceVTable.New (native_vtable);
			Marshal.FreeHGlobal (native_vtable);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe uint g_dbus_connection_register_subtree(IntPtr raw, IntPtr object_path, IntPtr vtable, int flags, IntPtr user_data, GLib.DestroyNotify user_data_free_func, out IntPtr error);

		public unsafe uint RegisterSubtree(string object_path, GLib.DBusSubtreeVTable vtable, GLib.DBusSubtreeFlags flags, IntPtr user_data, GLib.DestroyNotify user_data_free_func) {
			IntPtr native_object_path = GLib.Marshaller.StringToPtrGStrdup (object_path);
			IntPtr native_vtable = GLib.Marshaller.StructureToPtrAlloc (vtable);
			IntPtr error = IntPtr.Zero;
			uint raw_ret = g_dbus_connection_register_subtree(Handle, native_object_path, native_vtable, (int) flags, user_data, user_data_free_func, out error);
			uint ret = raw_ret;
			GLib.Marshaller.Free (native_object_path);
			vtable = GLib.DBusSubtreeVTable.New (native_vtable);
			Marshal.FreeHGlobal (native_vtable);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_connection_remove_filter(IntPtr raw, uint filter_id);

		public void RemoveFilter(uint filter_id) {
			g_dbus_connection_remove_filter(Handle, filter_id);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_dbus_connection_send_message(IntPtr raw, IntPtr message, int flags, out uint out_serial, out IntPtr error);

		public unsafe bool SendMessage(GLib.DBusMessage message, GLib.DBusSendMessageFlags flags, out uint out_serial) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_dbus_connection_send_message(Handle, message == null ? IntPtr.Zero : message.Handle, (int) flags, out out_serial, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_connection_send_message_with_reply(IntPtr raw, IntPtr message, int flags, int timeout_msec, out uint out_serial, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public uint SendMessageWithReply(GLib.DBusMessage message, GLib.DBusSendMessageFlags flags, int timeout_msec, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			uint out_serial;
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_dbus_connection_send_message_with_reply(Handle, message == null ? IntPtr.Zero : message.Handle, (int) flags, timeout_msec, out out_serial, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			return out_serial;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_connection_send_message_with_reply_finish(IntPtr raw, IntPtr res, out IntPtr error);

		public unsafe GLib.DBusMessage SendMessageWithReplyFinish(GLib.IAsyncResult res) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_dbus_connection_send_message_with_reply_finish(Handle, res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), out error);
			GLib.DBusMessage ret = GLib.Object.GetObject(raw_ret) as GLib.DBusMessage;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_connection_send_message_with_reply_sync(IntPtr raw, IntPtr message, int flags, int timeout_msec, out uint out_serial, IntPtr cancellable, out IntPtr error);

		public unsafe GLib.DBusMessage SendMessageWithReplySync(GLib.DBusMessage message, GLib.DBusSendMessageFlags flags, int timeout_msec, out uint out_serial, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_dbus_connection_send_message_with_reply_sync(Handle, message == null ? IntPtr.Zero : message.Handle, (int) flags, timeout_msec, out out_serial, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.DBusMessage ret = GLib.Object.GetObject(raw_ret) as GLib.DBusMessage;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint g_dbus_connection_signal_subscribe(IntPtr raw, IntPtr sender, IntPtr interface_name, IntPtr member, IntPtr object_path, IntPtr arg0, int flags, GLibSharp.DBusSignalCallbackNative cb, IntPtr user_data, GLib.DestroyNotify user_data_free_func);

		public uint SignalSubscribe(string sender, string interface_name, string member, string object_path, string arg0, GLib.DBusSignalFlags flags, GLib.DBusSignalCallback cb) {
			IntPtr native_sender = GLib.Marshaller.StringToPtrGStrdup (sender);
			IntPtr native_interface_name = GLib.Marshaller.StringToPtrGStrdup (interface_name);
			IntPtr native_member = GLib.Marshaller.StringToPtrGStrdup (member);
			IntPtr native_object_path = GLib.Marshaller.StringToPtrGStrdup (object_path);
			IntPtr native_arg0 = GLib.Marshaller.StringToPtrGStrdup (arg0);
			GLibSharp.DBusSignalCallbackWrapper cb_wrapper = new GLibSharp.DBusSignalCallbackWrapper (cb);
			IntPtr user_data;
			GLib.DestroyNotify user_data_free_func;
			if (cb == null) {
				user_data = IntPtr.Zero;
				user_data_free_func = null;
			} else {
				user_data = (IntPtr) GCHandle.Alloc (cb_wrapper);
				user_data_free_func = GLib.DestroyHelper.NotifyHandler;
			}
			uint raw_ret = g_dbus_connection_signal_subscribe(Handle, native_sender, native_interface_name, native_member, native_object_path, native_arg0, (int) flags, cb_wrapper.NativeDelegate, user_data, user_data_free_func);
			uint ret = raw_ret;
			GLib.Marshaller.Free (native_sender);
			GLib.Marshaller.Free (native_interface_name);
			GLib.Marshaller.Free (native_member);
			GLib.Marshaller.Free (native_object_path);
			GLib.Marshaller.Free (native_arg0);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_connection_signal_unsubscribe(IntPtr raw, uint subscription_id);

		public void SignalUnsubscribe(uint subscription_id) {
			g_dbus_connection_signal_unsubscribe(Handle, subscription_id);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_connection_start_message_processing(IntPtr raw);

		public void StartMessageProcessing() {
			g_dbus_connection_start_message_processing(Handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_connection_unregister_object(IntPtr raw, uint registration_id);

		public bool UnregisterObject(uint registration_id) {
			bool raw_ret = g_dbus_connection_unregister_object(Handle, registration_id);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_connection_unregister_subtree(IntPtr raw, uint registration_id);

		public bool UnregisterSubtree(uint registration_id) {
			bool raw_ret = g_dbus_connection_unregister_subtree(Handle, registration_id);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_initable_init(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public bool Init(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_initable_init(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_async_initable_init_async(IntPtr raw, int io_priority, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void InitAsync(int io_priority, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_async_initable_init_async(Handle, io_priority, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_async_initable_init_finish(IntPtr raw, IntPtr res, out IntPtr error);

		public bool InitFinish(GLib.IAsyncResult res) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_async_initable_init_finish(Handle, res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
