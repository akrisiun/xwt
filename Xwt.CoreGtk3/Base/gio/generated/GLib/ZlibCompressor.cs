// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ZlibCompressor : GLib.Object, GLib.IConverter {

		public ZlibCompressor (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_zlib_compressor_new(int format, int level);

		public ZlibCompressor (GLib.ZlibCompressorFormat format, int level) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ZlibCompressor)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("format");
				vals.Add (new GLib.Value (format));
				names.Add ("level");
				vals.Add (new GLib.Value (level));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = g_zlib_compressor_new((int) format, level);
		}

		[GLib.Property ("format")]
		public GLib.ZlibCompressorFormat Format {
			get {
				GLib.Value val = GetProperty ("format");
				GLib.ZlibCompressorFormat ret = (GLib.ZlibCompressorFormat) (Enum) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("level")]
		public int Level {
			get {
				GLib.Value val = GetProperty ("level");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_zlib_compressor_get_file_info(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_zlib_compressor_set_file_info(IntPtr raw, IntPtr file_info);

		[GLib.Property ("file-info")]
		public GLib.FileInfo FileInfo {
			get  {
				IntPtr raw_ret = g_zlib_compressor_get_file_info(Handle);
				GLib.FileInfo ret = GLib.Object.GetObject(raw_ret) as GLib.FileInfo;
				return ret;
			}
			set  {
				g_zlib_compressor_set_file_info(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GZlibCompressorClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GZlibCompressorClass> class_structs;

		static GZlibCompressorClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GZlibCompressorClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GZlibCompressorClass class_struct = (GZlibCompressorClass) Marshal.PtrToStructure (class_ptr, typeof (GZlibCompressorClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GZlibCompressorClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_zlib_compressor_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_zlib_compressor_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_converter_convert(IntPtr raw, IntPtr inbuf, UIntPtr inbuf_size, IntPtr outbuf, UIntPtr outbuf_size, int flags, out UIntPtr bytes_read, out UIntPtr bytes_written, out IntPtr error);

		public GLib.ConverterResult Convert(IntPtr inbuf, ulong inbuf_size, IntPtr outbuf, ulong outbuf_size, GLib.ConverterFlags flags, out ulong bytes_read, out ulong bytes_written) {
			UIntPtr native_bytes_read;
			UIntPtr native_bytes_written;
			IntPtr error = IntPtr.Zero;
			int raw_ret = g_converter_convert(Handle, inbuf, new UIntPtr (inbuf_size), outbuf, new UIntPtr (outbuf_size), (int) flags, out native_bytes_read, out native_bytes_written, out error);
			GLib.ConverterResult ret = (GLib.ConverterResult) raw_ret;
			bytes_read = (ulong) native_bytes_read;
			bytes_written = (ulong) native_bytes_written;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_converter_reset(IntPtr raw);

		public void Reset() {
			g_converter_reset(Handle);
		}

#endregion
	}
}
