// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class PixbufLoader : GLib.Object {

		public PixbufLoader (IntPtr raw) : base(raw) {}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_loader_new();

		public PixbufLoader () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PixbufLoader)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gdk_pixbuf_loader_new();
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gdk_pixbuf_loader_new_with_mime_type(IntPtr mime_type, out IntPtr error);

		public unsafe PixbufLoader (string mime_type) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PixbufLoader)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
			IntPtr error = IntPtr.Zero;
			Raw = gdk_pixbuf_loader_new_with_mime_type(native_mime_type, out error);
			GLib.Marshaller.Free (native_mime_type);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gdk_pixbuf_loader_new_with_type(IntPtr image_type, out IntPtr error);

		public static unsafe PixbufLoader NewWithType(string image_type)
		{
			IntPtr native_image_type = GLib.Marshaller.StringToPtrGStrdup (image_type);
			IntPtr error = IntPtr.Zero;
			PixbufLoader result = new PixbufLoader (gdk_pixbuf_loader_new_with_type(native_image_type, out error));
			GLib.Marshaller.Free (native_image_type);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return result;
		}

		[GLib.Signal("area-updated")]
		public event Gdk.AreaUpdatedHandler AreaUpdated {
			add {
				this.AddSignalHandler ("area-updated", value, typeof (Gdk.AreaUpdatedArgs));
			}
			remove {
				this.RemoveSignalHandler ("area-updated", value);
			}
		}

		[GLib.Signal("size-prepared")]
		public event Gdk.SizePreparedHandler SizePrepared {
			add {
				this.AddSignalHandler ("size-prepared", value, typeof (Gdk.SizePreparedArgs));
			}
			remove {
				this.RemoveSignalHandler ("size-prepared", value);
			}
		}

		[GLib.Signal("area-prepared")]
		public event System.EventHandler AreaPrepared {
			add {
				this.AddSignalHandler ("area-prepared", value);
			}
			remove {
				this.RemoveSignalHandler ("area-prepared", value);
			}
		}

		[GLib.Signal("closed")]
		public event System.EventHandler Closed {
			add {
				this.AddSignalHandler ("closed", value);
			}
			remove {
				this.RemoveSignalHandler ("closed", value);
			}
		}

		static SizePreparedNativeDelegate SizePrepared_cb_delegate;
		static SizePreparedNativeDelegate SizePreparedVMCallback {
			get {
				if (SizePrepared_cb_delegate == null)
					SizePrepared_cb_delegate = new SizePreparedNativeDelegate (SizePrepared_cb);
				return SizePrepared_cb_delegate;
			}
		}

		static void OverrideSizePrepared (GLib.GType gtype)
		{
			OverrideSizePrepared (gtype, SizePreparedVMCallback);
		}

		static void OverrideSizePrepared (GLib.GType gtype, SizePreparedNativeDelegate callback)
		{
			GdkPixbufLoaderClass class_iface = GetClassStruct (gtype, false);
			class_iface.SizePrepared = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SizePreparedNativeDelegate (IntPtr inst, int width, int height);

		static void SizePrepared_cb (IntPtr inst, int width, int height)
		{
			try {
				PixbufLoader __obj = GLib.Object.GetObject (inst, false) as PixbufLoader;
				__obj.OnSizePrepared (width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.PixbufLoader), ConnectionMethod="OverrideSizePrepared")]
		protected virtual void OnSizePrepared (int width, int height)
		{
			InternalSizePrepared (width, height);
		}

		private void InternalSizePrepared (int width, int height)
		{
			SizePreparedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SizePrepared;
			if (unmanaged == null) return;

			unmanaged (this.Handle, width, height);
		}

		static AreaPreparedNativeDelegate AreaPrepared_cb_delegate;
		static AreaPreparedNativeDelegate AreaPreparedVMCallback {
			get {
				if (AreaPrepared_cb_delegate == null)
					AreaPrepared_cb_delegate = new AreaPreparedNativeDelegate (AreaPrepared_cb);
				return AreaPrepared_cb_delegate;
			}
		}

		static void OverrideAreaPrepared (GLib.GType gtype)
		{
			OverrideAreaPrepared (gtype, AreaPreparedVMCallback);
		}

		static void OverrideAreaPrepared (GLib.GType gtype, AreaPreparedNativeDelegate callback)
		{
			GdkPixbufLoaderClass class_iface = GetClassStruct (gtype, false);
			class_iface.AreaPrepared = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AreaPreparedNativeDelegate (IntPtr inst);

		static void AreaPrepared_cb (IntPtr inst)
		{
			try {
				PixbufLoader __obj = GLib.Object.GetObject (inst, false) as PixbufLoader;
				__obj.OnAreaPrepared ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.PixbufLoader), ConnectionMethod="OverrideAreaPrepared")]
		protected virtual void OnAreaPrepared ()
		{
			InternalAreaPrepared ();
		}

		private void InternalAreaPrepared ()
		{
			AreaPreparedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).AreaPrepared;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static AreaUpdatedNativeDelegate AreaUpdated_cb_delegate;
		static AreaUpdatedNativeDelegate AreaUpdatedVMCallback {
			get {
				if (AreaUpdated_cb_delegate == null)
					AreaUpdated_cb_delegate = new AreaUpdatedNativeDelegate (AreaUpdated_cb);
				return AreaUpdated_cb_delegate;
			}
		}

		static void OverrideAreaUpdated (GLib.GType gtype)
		{
			OverrideAreaUpdated (gtype, AreaUpdatedVMCallback);
		}

		static void OverrideAreaUpdated (GLib.GType gtype, AreaUpdatedNativeDelegate callback)
		{
			GdkPixbufLoaderClass class_iface = GetClassStruct (gtype, false);
			class_iface.AreaUpdated = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AreaUpdatedNativeDelegate (IntPtr inst, int x, int y, int width, int height);

		static void AreaUpdated_cb (IntPtr inst, int x, int y, int width, int height)
		{
			try {
				PixbufLoader __obj = GLib.Object.GetObject (inst, false) as PixbufLoader;
				__obj.OnAreaUpdated (x, y, width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.PixbufLoader), ConnectionMethod="OverrideAreaUpdated")]
		protected virtual void OnAreaUpdated (int x, int y, int width, int height)
		{
			InternalAreaUpdated (x, y, width, height);
		}

		private void InternalAreaUpdated (int x, int y, int width, int height)
		{
			AreaUpdatedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).AreaUpdated;
			if (unmanaged == null) return;

			unmanaged (this.Handle, x, y, width, height);
		}

		static ClosedNativeDelegate Closed_cb_delegate;
		static ClosedNativeDelegate ClosedVMCallback {
			get {
				if (Closed_cb_delegate == null)
					Closed_cb_delegate = new ClosedNativeDelegate (Closed_cb);
				return Closed_cb_delegate;
			}
		}

		static void OverrideClosed (GLib.GType gtype)
		{
			OverrideClosed (gtype, ClosedVMCallback);
		}

		static void OverrideClosed (GLib.GType gtype, ClosedNativeDelegate callback)
		{
			GdkPixbufLoaderClass class_iface = GetClassStruct (gtype, false);
			class_iface.Closed = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClosedNativeDelegate (IntPtr inst);

		static void Closed_cb (IntPtr inst)
		{
			try {
				PixbufLoader __obj = GLib.Object.GetObject (inst, false) as PixbufLoader;
				__obj.OnClosed ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.PixbufLoader), ConnectionMethod="OverrideClosed")]
		protected virtual void OnClosed ()
		{
			InternalClosed ();
		}

		private void InternalClosed ()
		{
			ClosedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Closed;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GdkPixbufLoaderClass {
			public SizePreparedNativeDelegate SizePrepared;
			public AreaPreparedNativeDelegate AreaPrepared;
			public AreaUpdatedNativeDelegate AreaUpdated;
			public ClosedNativeDelegate Closed;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GdkPixbufLoaderClass> class_structs;

		static GdkPixbufLoaderClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GdkPixbufLoaderClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GdkPixbufLoaderClass class_struct = (GdkPixbufLoaderClass) Marshal.PtrToStructure (class_ptr, typeof (GdkPixbufLoaderClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GdkPixbufLoaderClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gdk_pixbuf_loader_close(IntPtr raw, out IntPtr error);

		public unsafe bool Close() {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gdk_pixbuf_loader_close(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_loader_get_animation(IntPtr raw);

		public Gdk.PixbufAnimation Animation { 
			get {
				IntPtr raw_ret = gdk_pixbuf_loader_get_animation(Handle);
				Gdk.PixbufAnimation ret = GLib.Object.GetObject(raw_ret) as Gdk.PixbufAnimation;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_loader_get_format(IntPtr raw);

		public Gdk.PixbufFormat Format { 
			get {
				IntPtr raw_ret = gdk_pixbuf_loader_get_format(Handle);
				Gdk.PixbufFormat ret = raw_ret == IntPtr.Zero ? null : (Gdk.PixbufFormat) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.PixbufFormat), false);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_loader_get_pixbuf(IntPtr raw);

		public Gdk.Pixbuf Pixbuf { 
			get {
				IntPtr raw_ret = gdk_pixbuf_loader_get_pixbuf(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_loader_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdk_pixbuf_loader_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pixbuf_loader_set_size(IntPtr raw, int width, int height);

		public void SetSize(int width, int height) {
			gdk_pixbuf_loader_set_size(Handle, width, height);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gdk_pixbuf_loader_write(IntPtr raw, byte[] buf, UIntPtr count, out IntPtr error);

		public unsafe bool Write(byte[] buf, ulong count) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gdk_pixbuf_loader_write(Handle, buf, new UIntPtr (count), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
