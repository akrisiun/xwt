// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DBus {

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_address_get_for_bus_sync(int bus_type, IntPtr cancellable, out IntPtr error);

		public static unsafe string GetAddressForBusSync(GLib.BusType bus_type, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_dbus_address_get_for_bus_sync((int) bus_type, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_address_get_stream(IntPtr address, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public static void GetStream(string address, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			IntPtr native_address = GLib.Marshaller.StringToPtrGStrdup (address);
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_dbus_address_get_stream(native_address, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			GLib.Marshaller.Free (native_address);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_address_get_stream_finish(IntPtr res, IntPtr out_guid, out IntPtr error);

		public static unsafe GLib.IOStream GetStreamFinish(GLib.IAsyncResult res, string out_guid) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_dbus_address_get_stream_finish(res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), GLib.Marshaller.StringToPtrGStrdup(out_guid), out error);
			GLib.IOStream ret = GLib.Object.GetObject(raw_ret) as GLib.IOStream;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_address_get_stream_sync(IntPtr address, IntPtr out_guid, IntPtr cancellable, out IntPtr error);

		public static unsafe GLib.IOStream GetStreamSync(string address, string out_guid, GLib.Cancellable cancellable) {
			IntPtr native_address = GLib.Marshaller.StringToPtrGStrdup (address);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_dbus_address_get_stream_sync(native_address, GLib.Marshaller.StringToPtrGStrdup(out_guid), cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.IOStream ret = GLib.Object.GetObject(raw_ret) as GLib.IOStream;
			GLib.Marshaller.Free (native_address);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_error_encode_gerror(IntPtr error);

		public static string ErrorEncodeGerror(IntPtr error) {
			IntPtr raw_ret = g_dbus_error_encode_gerror(error);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_error_get_remote_error(IntPtr error);

		public static string ErrorGetRemoteError(IntPtr error) {
			IntPtr raw_ret = g_dbus_error_get_remote_error(error);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_error_is_remote_error(IntPtr error);

		public static bool ErrorIsRemoteError(IntPtr error) {
			bool raw_ret = g_dbus_error_is_remote_error(error);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_error_new_for_dbus_error(IntPtr dbus_error_name, IntPtr dbus_error_message);

		public static IntPtr ErrorNewForDbusError(string dbus_error_name, string dbus_error_message) {
			IntPtr native_dbus_error_name = GLib.Marshaller.StringToPtrGStrdup (dbus_error_name);
			IntPtr native_dbus_error_message = GLib.Marshaller.StringToPtrGStrdup (dbus_error_message);
			IntPtr raw_ret = g_dbus_error_new_for_dbus_error(native_dbus_error_name, native_dbus_error_message);
			IntPtr ret = raw_ret;
			GLib.Marshaller.Free (native_dbus_error_name);
			GLib.Marshaller.Free (native_dbus_error_message);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_dbus_error_quark();

		public static int ErrorQuark() {
			int raw_ret = g_dbus_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_error_register_error(int error_domain, int error_code, IntPtr dbus_error_name);

		public static bool ErrorRegisterError(int error_domain, int error_code, string dbus_error_name) {
			IntPtr native_dbus_error_name = GLib.Marshaller.StringToPtrGStrdup (dbus_error_name);
			bool raw_ret = g_dbus_error_register_error(error_domain, error_code, native_dbus_error_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_dbus_error_name);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_error_register_error_domain(IntPtr error_domain_quark_name, out UIntPtr quark_volatile, IntPtr entries, uint num_entries);

		public static ulong ErrorRegisterErrorDomain(string error_domain_quark_name, GLib.DBusErrorEntry entries, uint num_entries) {
			ulong quark_volatile;
			IntPtr native_error_domain_quark_name = GLib.Marshaller.StringToPtrGStrdup (error_domain_quark_name);
			UIntPtr native_quark_volatile;
			IntPtr native_entries = GLib.Marshaller.StructureToPtrAlloc (entries);
			g_dbus_error_register_error_domain(native_error_domain_quark_name, out native_quark_volatile, native_entries, num_entries);
			GLib.Marshaller.Free (native_error_domain_quark_name);
			quark_volatile = (ulong) native_quark_volatile;
			entries = GLib.DBusErrorEntry.New (native_entries);
			Marshal.FreeHGlobal (native_entries);
			return quark_volatile;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_error_strip_remote_error(IntPtr error);

		public static bool ErrorStripRemoteError(IntPtr error) {
			bool raw_ret = g_dbus_error_strip_remote_error(error);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_error_unregister_error(int error_domain, int error_code, IntPtr dbus_error_name);

		public static bool ErrorUnregisterError(int error_domain, int error_code, string dbus_error_name) {
			IntPtr native_dbus_error_name = GLib.Marshaller.StringToPtrGStrdup (dbus_error_name);
			bool raw_ret = g_dbus_error_unregister_error(error_domain, error_code, native_dbus_error_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_dbus_error_name);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_generate_guid();

		public static string GenerateGuid() {
			IntPtr raw_ret = g_dbus_generate_guid();
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_is_address(IntPtr str1ng);

		public static bool IsAddress(string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			bool raw_ret = g_dbus_is_address(native_str1ng);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str1ng);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_is_guid(IntPtr str1ng);

		public static bool IsGuid(string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			bool raw_ret = g_dbus_is_guid(native_str1ng);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str1ng);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_is_interface_name(IntPtr str1ng);

		public static bool IsInterfaceName(string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			bool raw_ret = g_dbus_is_interface_name(native_str1ng);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str1ng);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_is_member_name(IntPtr str1ng);

		public static bool IsMemberName(string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			bool raw_ret = g_dbus_is_member_name(native_str1ng);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str1ng);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_is_name(IntPtr str1ng);

		public static bool IsName(string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			bool raw_ret = g_dbus_is_name(native_str1ng);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str1ng);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_dbus_is_supported_address(IntPtr str1ng, out IntPtr error);

		public static unsafe bool IsSupportedAddress(string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_dbus_is_supported_address(native_str1ng, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str1ng);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_is_unique_name(IntPtr str1ng);

		public static bool IsUniqueName(string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			bool raw_ret = g_dbus_is_unique_name(native_str1ng);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str1ng);
			return ret;
		}

#endregion
	}
}
