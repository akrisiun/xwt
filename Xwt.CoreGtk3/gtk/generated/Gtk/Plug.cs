// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Plug : Gtk.Window {

		public Plug (IntPtr raw) : base(raw) {}

		protected Plug() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_plug_get_embedded(IntPtr raw);

		[GLib.Property ("embedded")]
		public bool IsEmbedded {
			get  {
				bool raw_ret = gtk_plug_get_embedded(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_plug_get_socket_window(IntPtr raw);

		[GLib.Property ("socket-window")]
		public Gdk.Window SocketWindow {
			get  {
				IntPtr raw_ret = gtk_plug_get_socket_window(Handle);
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[GLib.Signal("embedded")]
		public event System.EventHandler Embedded {
			add {
				this.AddSignalHandler ("embedded", value);
			}
			remove {
				this.RemoveSignalHandler ("embedded", value);
			}
		}

		static EmbeddedNativeDelegate Embedded_cb_delegate;
		static EmbeddedNativeDelegate EmbeddedVMCallback {
			get {
				if (Embedded_cb_delegate == null)
					Embedded_cb_delegate = new EmbeddedNativeDelegate (Embedded_cb);
				return Embedded_cb_delegate;
			}
		}

		static void OverrideEmbedded (GLib.GType gtype)
		{
			OverrideEmbedded (gtype, EmbeddedVMCallback);
		}

		static void OverrideEmbedded (GLib.GType gtype, EmbeddedNativeDelegate callback)
		{
			GtkPlugClass class_iface = GetClassStruct (gtype, false);
			class_iface.Embedded = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void EmbeddedNativeDelegate (IntPtr inst);

		static void Embedded_cb (IntPtr inst)
		{
			try {
				Plug __obj = GLib.Object.GetObject (inst, false) as Plug;
				__obj.OnEmbedded ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Plug), ConnectionMethod="OverrideEmbedded")]
		protected virtual void OnEmbedded ()
		{
			InternalEmbedded ();
		}

		private void InternalEmbedded ()
		{
			EmbeddedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Embedded;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkPlugClass {
			public EmbeddedNativeDelegate Embedded;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Window)).GetClassSize ();
		static Dictionary<GLib.GType, GtkPlugClass> class_structs;

		static GtkPlugClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkPlugClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkPlugClass class_struct = (GtkPlugClass) Marshal.PtrToStructure (class_ptr, typeof (GtkPlugClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkPlugClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_plug_construct(IntPtr raw, UIntPtr socket_id);

		public void Construct(ulong socket_id) {
			gtk_plug_construct(Handle, new UIntPtr (socket_id));
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_plug_construct_for_display(IntPtr raw, IntPtr display, UIntPtr socket_id);

		public void ConstructForDisplay(Gdk.Display display, ulong socket_id) {
			gtk_plug_construct_for_display(Handle, display == null ? IntPtr.Zero : display.Handle, new UIntPtr (socket_id));
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gtk_plug_get_id(IntPtr raw);

		public ulong Id { 
			get {
				UIntPtr raw_ret = gtk_plug_get_id(Handle);
				ulong ret = (ulong) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_plug_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_plug_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
