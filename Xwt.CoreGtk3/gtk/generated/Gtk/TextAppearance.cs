// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TextAppearance : IEquatable<TextAppearance> {

		public Gdk.Color BgColor;
		public Gdk.Color FgColor;
		public int Rise;
		private uint _bitfield0;

		[DllImport ("gtksharpglue-3")]
		extern static int gtksharp_gtk_textappearance_get_underline (IntPtr raw);
		[DllImport ("gtksharpglue-3")]
		extern static void gtksharp_gtk_textappearance_set_underline (IntPtr raw, int value);
		public Pango.Underline Underline {
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				Pango.Underline result = (Pango.Underline) gtksharp_gtk_textappearance_get_underline (this_as_native);
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return result;
			}
			set {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				gtksharp_gtk_textappearance_set_underline (this_as_native, (int) value);
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static bool gtksharp_gtk_textappearance_get_strikethrough (IntPtr raw);
		[DllImport ("gtksharpglue-3")]
		extern static void gtksharp_gtk_textappearance_set_strikethrough (IntPtr raw, bool value);
		public bool Strikethrough {
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				bool result = gtksharp_gtk_textappearance_get_strikethrough (this_as_native);
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return result;
			}
			set {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				gtksharp_gtk_textappearance_set_strikethrough (this_as_native, value);
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			}
		}

		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		private uint[] Padding;

		public static Gtk.TextAppearance Zero = new Gtk.TextAppearance ();

		public static Gtk.TextAppearance New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gtk.TextAppearance.Zero;
			return (Gtk.TextAppearance) Marshal.PtrToStructure (raw, typeof (Gtk.TextAppearance));
		}

		static void ReadNative (IntPtr native, ref Gtk.TextAppearance target)
		{
			target = New (native);
		}

		public bool Equals (TextAppearance other)
		{
			return true && BgColor.Equals (other.BgColor) && FgColor.Equals (other.FgColor) && Rise.Equals (other.Rise) && _bitfield0.Equals (other._bitfield0);
		}

		public override bool Equals (object other)
		{
			return other is TextAppearance && Equals ((TextAppearance) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ BgColor.GetHashCode () ^ FgColor.GetHashCode () ^ Rise.GetHashCode () ^ _bitfield0.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
