// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class AccelLabel : Gtk.Label {

		public AccelLabel (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_label_new(IntPtr str1ng);

		public AccelLabel (string str1ng) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (AccelLabel)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("label");
				vals.Add (new GLib.Value (str1ng));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			Raw = gtk_accel_label_new(native_str1ng);
			GLib.Marshaller.Free (native_str1ng);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_label_set_accel_closure(IntPtr raw, IntPtr accel_closure);

		[GLib.Property ("accel-closure")]
		public IntPtr AccelClosure {
			get {
				GLib.Value val = GetProperty ("accel-closure");
				IntPtr ret = (IntPtr) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gtk_accel_label_set_accel_closure(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_label_get_accel_widget(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_label_set_accel_widget(IntPtr raw, IntPtr accel_widget);

		[GLib.Property ("accel-widget")]
		public Gtk.Widget AccelWidget {
			get  {
				IntPtr raw_ret = gtk_accel_label_get_accel_widget(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set  {
				gtk_accel_label_set_accel_widget(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkAccelLabelClass {
			public string SignalQuote1;
			public string SignalQuote2;
			public string ModNameShift;
			public string ModNameControl;
			public string ModNameAlt;
			public string ModSeparator;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Label)).GetClassSize ();
		static Dictionary<GLib.GType, GtkAccelLabelClass> class_structs;

		static GtkAccelLabelClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkAccelLabelClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkAccelLabelClass class_struct = (GtkAccelLabelClass) Marshal.PtrToStructure (class_ptr, typeof (GtkAccelLabelClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkAccelLabelClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_accel_label_get_accel_width(IntPtr raw);

		public uint AccelWidth { 
			get {
				uint raw_ret = gtk_accel_label_get_accel_width(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_label_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_accel_label_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_accel_label_refetch(IntPtr raw);

		public bool Refetch() {
			bool raw_ret = gtk_accel_label_refetch(Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
