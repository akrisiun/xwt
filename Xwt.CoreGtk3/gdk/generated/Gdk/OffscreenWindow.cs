// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class OffscreenWindow : GLib.Opaque {

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_offscreen_window_get_embedder(IntPtr window);

		public static Gdk.Window GetEmbedder(Gdk.Window window) {
			IntPtr raw_ret = gdk_offscreen_window_get_embedder(window == null ? IntPtr.Zero : window.Handle);
			Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_offscreen_window_get_surface(IntPtr window);

		public static Cairo.Surface GetSurface(Gdk.Window window) {
			IntPtr raw_ret = gdk_offscreen_window_get_surface(window == null ? IntPtr.Zero : window.Handle);
			Cairo.Surface ret = Cairo.Surface.Lookup (raw_ret, true);
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_offscreen_window_set_embedder(IntPtr window, IntPtr embedder);

		public static void SetEmbedder(Gdk.Window window, Gdk.Window embedder) {
			gdk_offscreen_window_set_embedder(window == null ? IntPtr.Zero : window.Handle, embedder == null ? IntPtr.Zero : embedder.Handle);
		}

		public OffscreenWindow(IntPtr raw) : base(raw) {}

#endregion
	}
}
