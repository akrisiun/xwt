// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DBusProxy : GLib.Object, GLib.IInitable, GLib.IAsyncInitable {

		public DBusProxy (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_proxy_new(IntPtr connection, int flags, IntPtr info, IntPtr name, IntPtr object_path, IntPtr interface_name, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public DBusProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, GLib.DBusInterfaceInfo info, string name, string object_path, string interface_name, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusProxy)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_object_path = GLib.Marshaller.StringToPtrGStrdup (object_path);
			IntPtr native_interface_name = GLib.Marshaller.StringToPtrGStrdup (interface_name);
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			Raw = g_dbus_proxy_new(connection == null ? IntPtr.Zero : connection.Handle, (int) flags, info == null ? IntPtr.Zero : info.Handle, native_name, native_object_path, native_interface_name, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_object_path);
			GLib.Marshaller.Free (native_interface_name);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_proxy_new_finish(IntPtr res, out IntPtr error);

		public unsafe DBusProxy (GLib.IAsyncResult res) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusProxy)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr error = IntPtr.Zero;
			Raw = g_dbus_proxy_new_finish(res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_proxy_new_for_bus(int bus_type, int flags, IntPtr info, IntPtr name, IntPtr object_path, IntPtr interface_name, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public DBusProxy (GLib.BusType bus_type, GLib.DBusProxyFlags flags, GLib.DBusInterfaceInfo info, string name, string object_path, string interface_name, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusProxy)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_object_path = GLib.Marshaller.StringToPtrGStrdup (object_path);
			IntPtr native_interface_name = GLib.Marshaller.StringToPtrGStrdup (interface_name);
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			Raw = g_dbus_proxy_new_for_bus((int) bus_type, (int) flags, info == null ? IntPtr.Zero : info.Handle, native_name, native_object_path, native_interface_name, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_object_path);
			GLib.Marshaller.Free (native_interface_name);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_proxy_new_for_bus_finish(IntPtr res, out IntPtr error);

		public static unsafe DBusProxy NewForBusFinish(GLib.IAsyncResult res)
		{
			IntPtr error = IntPtr.Zero;
			DBusProxy result = new DBusProxy (g_dbus_proxy_new_for_bus_finish(res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), out error));
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return result;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_proxy_new_for_bus_sync(int bus_type, int flags, IntPtr info, IntPtr name, IntPtr object_path, IntPtr interface_name, IntPtr cancellable, out IntPtr error);

		public unsafe DBusProxy (GLib.BusType bus_type, GLib.DBusProxyFlags flags, GLib.DBusInterfaceInfo info, string name, string object_path, string interface_name, GLib.Cancellable cancellable) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusProxy)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_object_path = GLib.Marshaller.StringToPtrGStrdup (object_path);
			IntPtr native_interface_name = GLib.Marshaller.StringToPtrGStrdup (interface_name);
			IntPtr error = IntPtr.Zero;
			Raw = g_dbus_proxy_new_for_bus_sync((int) bus_type, (int) flags, info == null ? IntPtr.Zero : info.Handle, native_name, native_object_path, native_interface_name, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_object_path);
			GLib.Marshaller.Free (native_interface_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_proxy_new_sync(IntPtr connection, int flags, IntPtr info, IntPtr name, IntPtr object_path, IntPtr interface_name, IntPtr cancellable, out IntPtr error);

		public unsafe DBusProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, GLib.DBusInterfaceInfo info, string name, string object_path, string interface_name, GLib.Cancellable cancellable) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusProxy)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_object_path = GLib.Marshaller.StringToPtrGStrdup (object_path);
			IntPtr native_interface_name = GLib.Marshaller.StringToPtrGStrdup (interface_name);
			IntPtr error = IntPtr.Zero;
			Raw = g_dbus_proxy_new_sync(connection == null ? IntPtr.Zero : connection.Handle, (int) flags, info == null ? IntPtr.Zero : info.Handle, native_name, native_object_path, native_interface_name, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_object_path);
			GLib.Marshaller.Free (native_interface_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[GLib.Property ("g-interface-info")]
		public GLib.DBusInterfaceInfo GInterfaceInfo {
			get {
				GLib.Value val = GetProperty ("g-interface-info");
				GLib.DBusInterfaceInfo ret = (GLib.DBusInterfaceInfo) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value, "GDBusInterfaceInfo");
				SetProperty("g-interface-info", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("g-connection")]
		public GLib.DBusConnection GConnection {
			get {
				GLib.Value val = GetProperty ("g-connection");
				GLib.DBusConnection ret = (GLib.DBusConnection) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("g-flags")]
		public GLib.DBusProxyFlags GFlags {
			get {
				GLib.Value val = GetProperty ("g-flags");
				GLib.DBusProxyFlags ret = (GLib.DBusProxyFlags) (Enum) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("g-name")]
		public string GName {
			get {
				GLib.Value val = GetProperty ("g-name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("g-name-owner")]
		public string GNameOwner {
			get {
				GLib.Value val = GetProperty ("g-name-owner");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("g-object-path")]
		public string GObjectPath {
			get {
				GLib.Value val = GetProperty ("g-object-path");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("g-interface-name")]
		public string GInterfaceName {
			get {
				GLib.Value val = GetProperty ("g-interface-name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("g-default-timeout")]
		public int GDefaultTimeout {
			get {
				GLib.Value val = GetProperty ("g-default-timeout");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("g-default-timeout", val);
				val.Dispose ();
			}
		}

		[GLib.Signal("g-properties-changed")]
		public event GLib.GPropertiesChangedHandler GPropertiesChanged {
			add {
				this.AddSignalHandler ("g-properties-changed", value, typeof (GLib.GPropertiesChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("g-properties-changed", value);
			}
		}

		[GLib.Signal("g-signal")]
		public event GLib.GSignalHandler GSignal {
			add {
				this.AddSignalHandler ("g-signal", value, typeof (GLib.GSignalArgs));
			}
			remove {
				this.RemoveSignalHandler ("g-signal", value);
			}
		}

		static GPropertiesChangedNativeDelegate GPropertiesChanged_cb_delegate;
		static GPropertiesChangedNativeDelegate GPropertiesChangedVMCallback {
			get {
				if (GPropertiesChanged_cb_delegate == null)
					GPropertiesChanged_cb_delegate = new GPropertiesChangedNativeDelegate (GPropertiesChanged_cb);
				return GPropertiesChanged_cb_delegate;
			}
		}

		static void OverrideGPropertiesChanged (GLib.GType gtype)
		{
			OverrideGPropertiesChanged (gtype, GPropertiesChangedVMCallback);
		}

		static void OverrideGPropertiesChanged (GLib.GType gtype, GPropertiesChangedNativeDelegate callback)
		{
			GDBusProxyClass class_iface = GetClassStruct (gtype, false);
			class_iface.GPropertiesChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GPropertiesChangedNativeDelegate (IntPtr inst, IntPtr changed_properties, IntPtr invalidated_properties);

		static void GPropertiesChanged_cb (IntPtr inst, IntPtr changed_properties, IntPtr invalidated_properties)
		{
			try {
				DBusProxy __obj = GLib.Object.GetObject (inst, false) as DBusProxy;
				__obj.OnGPropertiesChanged (new GLib.Variant(changed_properties), GLib.Marshaller.Utf8PtrToString (invalidated_properties));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.DBusProxy), ConnectionMethod="OverrideGPropertiesChanged")]
		protected virtual void OnGPropertiesChanged (GLib.Variant changed_properties, string invalidated_properties)
		{
			InternalGPropertiesChanged (changed_properties, invalidated_properties);
		}

		private void InternalGPropertiesChanged (GLib.Variant changed_properties, string invalidated_properties)
		{
			GPropertiesChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GPropertiesChanged;
			if (unmanaged == null) return;

			IntPtr native_invalidated_properties = GLib.Marshaller.StringToPtrGStrdup (invalidated_properties);
			unmanaged (this.Handle, changed_properties == null ? IntPtr.Zero : changed_properties.Handle, native_invalidated_properties);
			GLib.Marshaller.Free (native_invalidated_properties);
		}

		static GSignalNativeDelegate GSignal_cb_delegate;
		static GSignalNativeDelegate GSignalVMCallback {
			get {
				if (GSignal_cb_delegate == null)
					GSignal_cb_delegate = new GSignalNativeDelegate (GSignal_cb);
				return GSignal_cb_delegate;
			}
		}

		static void OverrideGSignal (GLib.GType gtype)
		{
			OverrideGSignal (gtype, GSignalVMCallback);
		}

		static void OverrideGSignal (GLib.GType gtype, GSignalNativeDelegate callback)
		{
			GDBusProxyClass class_iface = GetClassStruct (gtype, false);
			class_iface.GSignal = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GSignalNativeDelegate (IntPtr inst, IntPtr sender_name, IntPtr signal_name, IntPtr parameters);

		static void GSignal_cb (IntPtr inst, IntPtr sender_name, IntPtr signal_name, IntPtr parameters)
		{
			try {
				DBusProxy __obj = GLib.Object.GetObject (inst, false) as DBusProxy;
				__obj.OnGSignal (GLib.Marshaller.Utf8PtrToString (sender_name), GLib.Marshaller.Utf8PtrToString (signal_name), new GLib.Variant(parameters));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.DBusProxy), ConnectionMethod="OverrideGSignal")]
		protected virtual void OnGSignal (string sender_name, string signal_name, GLib.Variant parameters)
		{
			InternalGSignal (sender_name, signal_name, parameters);
		}

		private void InternalGSignal (string sender_name, string signal_name, GLib.Variant parameters)
		{
			GSignalNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GSignal;
			if (unmanaged == null) return;

			IntPtr native_sender_name = GLib.Marshaller.StringToPtrGStrdup (sender_name);
			IntPtr native_signal_name = GLib.Marshaller.StringToPtrGStrdup (signal_name);
			unmanaged (this.Handle, native_sender_name, native_signal_name, parameters == null ? IntPtr.Zero : parameters.Handle);
			GLib.Marshaller.Free (native_sender_name);
			GLib.Marshaller.Free (native_signal_name);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GDBusProxyClass {
			public GPropertiesChangedNativeDelegate GPropertiesChanged;
			public GSignalNativeDelegate GSignal;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=32)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GDBusProxyClass> class_structs;

		static GDBusProxyClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GDBusProxyClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GDBusProxyClass class_struct = (GDBusProxyClass) Marshal.PtrToStructure (class_ptr, typeof (GDBusProxyClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GDBusProxyClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_proxy_call(IntPtr raw, IntPtr method_name, IntPtr parameters, int flags, int timeout_msec, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void Call(string method_name, GLib.Variant parameters, GLib.DBusCallFlags flags, int timeout_msec, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			IntPtr native_method_name = GLib.Marshaller.StringToPtrGStrdup (method_name);
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_dbus_proxy_call(Handle, native_method_name, parameters == null ? IntPtr.Zero : parameters.Handle, (int) flags, timeout_msec, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			GLib.Marshaller.Free (native_method_name);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_proxy_call_finish(IntPtr raw, IntPtr res, out IntPtr error);

		public unsafe GLib.Variant CallFinish(GLib.IAsyncResult res) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_dbus_proxy_call_finish(Handle, res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), out error);
			GLib.Variant ret = new GLib.Variant(raw_ret);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_proxy_call_sync(IntPtr raw, IntPtr method_name, IntPtr parameters, int flags, int timeout_msec, IntPtr cancellable, out IntPtr error);

		public unsafe GLib.Variant CallSync(string method_name, GLib.Variant parameters, GLib.DBusCallFlags flags, int timeout_msec, GLib.Cancellable cancellable) {
			IntPtr native_method_name = GLib.Marshaller.StringToPtrGStrdup (method_name);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_dbus_proxy_call_sync(Handle, native_method_name, parameters == null ? IntPtr.Zero : parameters.Handle, (int) flags, timeout_msec, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.Variant ret = new GLib.Variant(raw_ret);
			GLib.Marshaller.Free (native_method_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_proxy_get_cached_property(IntPtr raw, IntPtr property_name);

		public GLib.Variant GetCachedProperty(string property_name) {
			IntPtr native_property_name = GLib.Marshaller.StringToPtrGStrdup (property_name);
			IntPtr raw_ret = g_dbus_proxy_get_cached_property(Handle, native_property_name);
			GLib.Variant ret = new GLib.Variant(raw_ret);
			GLib.Marshaller.Free (native_property_name);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_proxy_get_cached_property_names(IntPtr raw);

		public string CachedPropertyNames { 
			get {
				IntPtr raw_ret = g_dbus_proxy_get_cached_property_names(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_proxy_get_connection(IntPtr raw);

		public GLib.DBusConnection Connection { 
			get {
				IntPtr raw_ret = g_dbus_proxy_get_connection(Handle);
				GLib.DBusConnection ret = GLib.Object.GetObject(raw_ret) as GLib.DBusConnection;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_dbus_proxy_get_default_timeout(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_proxy_set_default_timeout(IntPtr raw, int timeout_msec);

		public int DefaultTimeout { 
			get {
				int raw_ret = g_dbus_proxy_get_default_timeout(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				g_dbus_proxy_set_default_timeout(Handle, value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_dbus_proxy_get_flags(IntPtr raw);

		public GLib.DBusProxyFlags Flags { 
			get {
				int raw_ret = g_dbus_proxy_get_flags(Handle);
				GLib.DBusProxyFlags ret = (GLib.DBusProxyFlags) raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_proxy_get_interface_info(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_proxy_set_interface_info(IntPtr raw, IntPtr info);

		public GLib.DBusInterfaceInfo InterfaceInfo { 
			get {
				IntPtr raw_ret = g_dbus_proxy_get_interface_info(Handle);
				GLib.DBusInterfaceInfo ret = raw_ret == IntPtr.Zero ? null : (GLib.DBusInterfaceInfo) GLib.Opaque.GetOpaque (raw_ret, typeof (GLib.DBusInterfaceInfo), false);
				return ret;
			}
			set {
				g_dbus_proxy_set_interface_info(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_proxy_get_interface_name(IntPtr raw);

		public string InterfaceName { 
			get {
				IntPtr raw_ret = g_dbus_proxy_get_interface_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_proxy_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = g_dbus_proxy_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_proxy_get_name_owner(IntPtr raw);

		public string NameOwner { 
			get {
				IntPtr raw_ret = g_dbus_proxy_get_name_owner(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_proxy_get_object_path(IntPtr raw);

		public string ObjectPath { 
			get {
				IntPtr raw_ret = g_dbus_proxy_get_object_path(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_proxy_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_dbus_proxy_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_proxy_set_cached_property(IntPtr raw, IntPtr property_name, IntPtr value);

		public void SetCachedProperty(string property_name, GLib.Variant value) {
			IntPtr native_property_name = GLib.Marshaller.StringToPtrGStrdup (property_name);
			g_dbus_proxy_set_cached_property(Handle, native_property_name, value == null ? IntPtr.Zero : value.Handle);
			GLib.Marshaller.Free (native_property_name);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_initable_init(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public bool Init(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_initable_init(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_async_initable_init_async(IntPtr raw, int io_priority, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void InitAsync(int io_priority, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_async_initable_init_async(Handle, io_priority, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_async_initable_init_finish(IntPtr raw, IntPtr res, out IntPtr error);

		public bool InitFinish(GLib.IAsyncResult res) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_async_initable_init_finish(Handle, res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
