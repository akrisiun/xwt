// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class IconSource : GLib.Opaque {

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_source_copy(IntPtr raw);

		public Gtk.IconSource Copy() {
			IntPtr raw_ret = gtk_icon_source_copy(Handle);
			Gtk.IconSource ret = raw_ret == IntPtr.Zero ? null : (Gtk.IconSource) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.IconSource), true);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_source_get_direction(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_source_set_direction(IntPtr raw, int direction);

		public Gtk.TextDirection Direction { 
			get {
				int raw_ret = gtk_icon_source_get_direction(Handle);
				Gtk.TextDirection ret = (Gtk.TextDirection) raw_ret;
				return ret;
			}
			set {
				gtk_icon_source_set_direction(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_source_get_direction_wildcarded(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_source_set_direction_wildcarded(IntPtr raw, bool setting);

		public bool DirectionWildcarded { 
			get {
				bool raw_ret = gtk_icon_source_get_direction_wildcarded(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_icon_source_set_direction_wildcarded(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_source_get_filename(IntPtr raw);

		[DllImport("libgtk-3-0.dll")]
		static extern IntPtr gtk_icon_source_get_filename_utf8(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_source_set_filename(IntPtr raw, IntPtr filename);

		[DllImport("libgtk-3-0.dll")]
		static extern void gtk_icon_source_set_filename_utf8(IntPtr raw, IntPtr filename);

		public string Filename { 
			get {
				IntPtr raw_ret;
				if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
				    Environment.OSVersion.Platform == PlatformID.Win32S ||
				    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
				    Environment.OSVersion.Platform == PlatformID.WinCE)
					raw_ret = gtk_icon_source_get_filename_utf8(Handle);
				else
					raw_ret = gtk_icon_source_get_filename(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
				    Environment.OSVersion.Platform == PlatformID.Win32S ||
				    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
				    Environment.OSVersion.Platform == PlatformID.WinCE)
					gtk_icon_source_set_filename_utf8(Handle, native_value);
				else
					gtk_icon_source_set_filename(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_source_get_icon_name(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_source_set_icon_name(IntPtr raw, IntPtr icon_name);

		public string IconName { 
			get {
				IntPtr raw_ret = gtk_icon_source_get_icon_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_icon_source_set_icon_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_source_get_pixbuf(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_source_set_pixbuf(IntPtr raw, IntPtr pixbuf);

		public Gdk.Pixbuf Pixbuf { 
			get {
				IntPtr raw_ret = gtk_icon_source_get_pixbuf(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
			set {
				gtk_icon_source_set_pixbuf(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_source_get_size(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_source_set_size(IntPtr raw, int size);

		public Gtk.IconSize Size { 
			get {
				int raw_ret = gtk_icon_source_get_size(Handle);
				Gtk.IconSize ret = (Gtk.IconSize) raw_ret;
				return ret;
			}
			set {
				gtk_icon_source_set_size(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_source_get_size_wildcarded(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_source_set_size_wildcarded(IntPtr raw, bool setting);

		public bool SizeWildcarded { 
			get {
				bool raw_ret = gtk_icon_source_get_size_wildcarded(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_icon_source_set_size_wildcarded(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_source_get_state(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_source_set_state(IntPtr raw, int state);

		public Gtk.StateType State { 
			get {
				int raw_ret = gtk_icon_source_get_state(Handle);
				Gtk.StateType ret = (Gtk.StateType) raw_ret;
				return ret;
			}
			set {
				gtk_icon_source_set_state(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_source_get_state_wildcarded(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_source_set_state_wildcarded(IntPtr raw, bool setting);

		public bool StateWildcarded { 
			get {
				bool raw_ret = gtk_icon_source_get_state_wildcarded(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_icon_source_set_state_wildcarded(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_source_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_icon_source_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public IconSource(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_source_new();

		public IconSource () 
		{
			Raw = gtk_icon_source_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_source_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gtk_icon_source_free (raw);
		}

		[Obsolete("Gtk.IconSource is now freed automatically")]
		public void Free () {}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gtk_icon_source_free (handle);
				return false;
			}
		}

		~IconSource ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
