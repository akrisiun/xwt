// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Icon {

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_size_from_name(IntPtr name);

		public static Gtk.IconSize SizeFromName(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			int raw_ret = gtk_icon_size_from_name(native_name);
			Gtk.IconSize ret = (Gtk.IconSize) raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_size_get_name(int size);

		public static string SizeGetName(Gtk.IconSize size) {
			IntPtr raw_ret = gtk_icon_size_get_name((int) size);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_size_lookup(int size, out int width, out int height);

		public static bool SizeLookup(Gtk.IconSize size, out int width, out int height) {
			bool raw_ret = gtk_icon_size_lookup((int) size, out width, out height);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_size_lookup_for_settings(IntPtr settings, int size, out int width, out int height);

		public static bool SizeLookupForSettings(Gtk.Settings settings, Gtk.IconSize size, out int width, out int height) {
			bool raw_ret = gtk_icon_size_lookup_for_settings(settings == null ? IntPtr.Zero : settings.Handle, (int) size, out width, out height);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_size_register(IntPtr name, int width, int height);

		public static Gtk.IconSize SizeRegister(string name, int width, int height) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			int raw_ret = gtk_icon_size_register(native_name, width, height);
			Gtk.IconSize ret = (Gtk.IconSize) raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_size_register_alias(IntPtr alias, int target);

		public static void SizeRegisterAlias(string alias, Gtk.IconSize target) {
			IntPtr native_alias = GLib.Marshaller.StringToPtrGStrdup (alias);
			gtk_icon_size_register_alias(native_alias, (int) target);
			GLib.Marshaller.Free (native_alias);
		}

#endregion
	}
}
