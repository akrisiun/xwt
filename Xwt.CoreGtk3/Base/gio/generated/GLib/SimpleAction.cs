// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SimpleAction : GLib.Object, GLib.IAction {

		public SimpleAction (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_simple_action_new(IntPtr name, IntPtr parameter_type);

		public SimpleAction (string name, GLib.VariantType parameter_type) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SimpleAction)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("name");
				vals.Add (new GLib.Value (name));
				names.Add ("parameter_type");
				vals.Add (new GLib.Value (parameter_type));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = g_simple_action_new(native_name, parameter_type == null ? IntPtr.Zero : parameter_type.Handle);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_simple_action_new_stateful(IntPtr name, IntPtr parameter_type, IntPtr state);

		public SimpleAction (string name, GLib.VariantType parameter_type, GLib.Variant state) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SimpleAction)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = g_simple_action_new_stateful(native_name, parameter_type == null ? IntPtr.Zero : parameter_type.Handle, state == null ? IntPtr.Zero : state.Handle);
			GLib.Marshaller.Free (native_name);
		}

		[GLib.Property ("name")]
		public string Name {
			get {
				GLib.Value val = GetProperty ("name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("parameter-type")]
		public GLib.VariantType ParameterType {
			get {
				GLib.Value val = GetProperty ("parameter-type");
				GLib.VariantType ret = (GLib.VariantType) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_simple_action_set_enabled(IntPtr raw, bool enabled);

		[GLib.Property ("enabled")]
		public bool Enabled {
			get {
				GLib.Value val = GetProperty ("enabled");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set  {
				g_simple_action_set_enabled(Handle, value);
			}
		}

		[GLib.Property ("state-type")]
		public GLib.VariantType StateType {
			get {
				GLib.Value val = GetProperty ("state-type");
				GLib.VariantType ret = (GLib.VariantType) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Signal("activate")]
		public event GLib.ActivatedHandler Activated {
			add {
				this.AddSignalHandler ("activate", value, typeof (GLib.ActivatedArgs));
			}
			remove {
				this.RemoveSignalHandler ("activate", value);
			}
		}

		static ActivatedNativeDelegate Activated_cb_delegate;
		static ActivatedNativeDelegate ActivatedVMCallback {
			get {
				if (Activated_cb_delegate == null)
					Activated_cb_delegate = new ActivatedNativeDelegate (Activated_cb);
				return Activated_cb_delegate;
			}
		}

		static void OverrideActivated (GLib.GType gtype)
		{
			OverrideActivated (gtype, ActivatedVMCallback);
		}

		static void OverrideActivated (GLib.GType gtype, ActivatedNativeDelegate callback)
		{
			GSimpleActionClass class_iface = GetClassStruct (gtype, false);
			class_iface.Activated = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActivatedNativeDelegate (IntPtr inst, IntPtr parameter);

		static void Activated_cb (IntPtr inst, IntPtr parameter)
		{
			try {
				SimpleAction __obj = GLib.Object.GetObject (inst, false) as SimpleAction;
				__obj.OnActivated (new GLib.Variant(parameter));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.SimpleAction), ConnectionMethod="OverrideActivated")]
		protected virtual void OnActivated (GLib.Variant parameter)
		{
			InternalActivated (parameter);
		}

		private void InternalActivated (GLib.Variant parameter)
		{
			ActivatedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Activated;
			if (unmanaged == null) return;

			unmanaged (this.Handle, parameter == null ? IntPtr.Zero : parameter.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GSimpleActionClass {
			public ActivatedNativeDelegate Activated;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=6)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GSimpleActionClass> class_structs;

		static GSimpleActionClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GSimpleActionClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GSimpleActionClass class_struct = (GSimpleActionClass) Marshal.PtrToStructure (class_ptr, typeof (GSimpleActionClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GSimpleActionClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_simple_action_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_simple_action_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_action_activate(IntPtr raw, IntPtr parameter);

		public void Activate(GLib.Variant parameter) {
			g_action_activate(Handle, parameter == null ? IntPtr.Zero : parameter.Handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_action_get_enabled(IntPtr raw);

		bool GLib.IAction.Enabled { 
			get {
				bool raw_ret = g_action_get_enabled(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_action_get_name(IntPtr raw);

		string GLib.IAction.Name { 
			get {
				IntPtr raw_ret = g_action_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_action_get_parameter_type(IntPtr raw);

		GLib.VariantType GLib.IAction.ParameterType { 
			get {
				IntPtr raw_ret = g_action_get_parameter_type(Handle);
				GLib.VariantType ret = new GLib.VariantType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_action_get_state(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_action_set_state(IntPtr raw, IntPtr value);

		public GLib.Variant State { 
			get {
				IntPtr raw_ret = g_action_get_state(Handle);
				GLib.Variant ret = new GLib.Variant(raw_ret);
				return ret;
			}
			set {
				g_action_set_state(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_action_get_state_hint(IntPtr raw);

		public GLib.Variant StateHint { 
			get {
				IntPtr raw_ret = g_action_get_state_hint(Handle);
				GLib.Variant ret = new GLib.Variant(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_action_get_state_type(IntPtr raw);

		GLib.VariantType GLib.IAction.StateType { 
			get {
				IntPtr raw_ret = g_action_get_state_type(Handle);
				GLib.VariantType ret = new GLib.VariantType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
