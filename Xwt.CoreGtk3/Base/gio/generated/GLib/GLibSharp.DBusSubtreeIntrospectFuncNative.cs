// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLibSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate IntPtr DBusSubtreeIntrospectFuncNative(IntPtr connection, IntPtr sender, IntPtr object_path, IntPtr node, IntPtr user_data);

	internal class DBusSubtreeIntrospectFuncInvoker {

		DBusSubtreeIntrospectFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~DBusSubtreeIntrospectFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal DBusSubtreeIntrospectFuncInvoker (DBusSubtreeIntrospectFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal DBusSubtreeIntrospectFuncInvoker (DBusSubtreeIntrospectFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal DBusSubtreeIntrospectFuncInvoker (DBusSubtreeIntrospectFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal GLib.DBusSubtreeIntrospectFunc Handler {
			get {
				return new GLib.DBusSubtreeIntrospectFunc(InvokeNative);
			}
		}

		GLib.DBusInterfaceInfo InvokeNative (GLib.DBusConnection connection, string sender, string object_path, string node)
		{
			IntPtr native_sender = GLib.Marshaller.StringToPtrGStrdup (sender);
			IntPtr native_object_path = GLib.Marshaller.StringToPtrGStrdup (object_path);
			IntPtr native_node = GLib.Marshaller.StringToPtrGStrdup (node);
			GLib.DBusInterfaceInfo __result = native_cb (connection == null ? IntPtr.Zero : connection.Handle, native_sender, native_object_path, native_node, __data) == IntPtr.Zero ? null : (GLib.DBusInterfaceInfo) GLib.Opaque.GetOpaque (native_cb (connection == null ? IntPtr.Zero : connection.Handle, native_sender, native_object_path, native_node, __data), typeof (GLib.DBusInterfaceInfo), false);
			GLib.Marshaller.Free (native_sender);
			GLib.Marshaller.Free (native_object_path);
			GLib.Marshaller.Free (native_node);
			return __result;
		}
	}

	internal class DBusSubtreeIntrospectFuncWrapper {

		public IntPtr NativeCallback (IntPtr connection, IntPtr sender, IntPtr object_path, IntPtr node, IntPtr user_data)
		{
			try {
				GLib.DBusInterfaceInfo __ret = managed (GLib.Object.GetObject(connection) as GLib.DBusConnection, GLib.Marshaller.Utf8PtrToString (sender), GLib.Marshaller.Utf8PtrToString (object_path), GLib.Marshaller.Utf8PtrToString (node));
				if (release_on_call)
					gch.Free ();
				return __ret == null ? IntPtr.Zero : __ret.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal DBusSubtreeIntrospectFuncNative NativeDelegate;
		GLib.DBusSubtreeIntrospectFunc managed;

		public DBusSubtreeIntrospectFuncWrapper (GLib.DBusSubtreeIntrospectFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new DBusSubtreeIntrospectFuncNative (NativeCallback);
		}

		public static GLib.DBusSubtreeIntrospectFunc GetManagedDelegate (DBusSubtreeIntrospectFuncNative native)
		{
			if (native == null)
				return null;
			DBusSubtreeIntrospectFuncWrapper wrapper = (DBusSubtreeIntrospectFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
