// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLibSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate bool DBusInterfaceSetPropertyFuncNative(IntPtr connection, IntPtr sender, IntPtr object_path, IntPtr interface_name, IntPtr property_name, IntPtr value, out IntPtr error, IntPtr user_data);

	internal class DBusInterfaceSetPropertyFuncInvoker {

		DBusInterfaceSetPropertyFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~DBusInterfaceSetPropertyFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal DBusInterfaceSetPropertyFuncInvoker (DBusInterfaceSetPropertyFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal DBusInterfaceSetPropertyFuncInvoker (DBusInterfaceSetPropertyFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal DBusInterfaceSetPropertyFuncInvoker (DBusInterfaceSetPropertyFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal GLib.DBusInterfaceSetPropertyFunc Handler {
			get {
				return new GLib.DBusInterfaceSetPropertyFunc(InvokeNative);
			}
		}

		bool InvokeNative (GLib.DBusConnection connection, string sender, string object_path, string interface_name, string property_name, GLib.Variant value)
		{
			IntPtr native_sender = GLib.Marshaller.StringToPtrGStrdup (sender);
			IntPtr native_object_path = GLib.Marshaller.StringToPtrGStrdup (object_path);
			IntPtr native_interface_name = GLib.Marshaller.StringToPtrGStrdup (interface_name);
			IntPtr native_property_name = GLib.Marshaller.StringToPtrGStrdup (property_name);
			IntPtr error = IntPtr.Zero;
			bool __result = native_cb (connection == null ? IntPtr.Zero : connection.Handle, native_sender, native_object_path, native_interface_name, native_property_name, value == null ? IntPtr.Zero : value.Handle, out error, __data);
			GLib.Marshaller.Free (native_sender);
			GLib.Marshaller.Free (native_object_path);
			GLib.Marshaller.Free (native_interface_name);
			GLib.Marshaller.Free (native_property_name);
			return __result;
		}
	}

	internal class DBusInterfaceSetPropertyFuncWrapper {

		public bool NativeCallback (IntPtr connection, IntPtr sender, IntPtr object_path, IntPtr interface_name, IntPtr property_name, IntPtr value, out IntPtr error, IntPtr user_data)
		{
			error = IntPtr.Zero;

			try {
				bool __ret = managed (GLib.Object.GetObject(connection) as GLib.DBusConnection, GLib.Marshaller.Utf8PtrToString (sender), GLib.Marshaller.Utf8PtrToString (object_path), GLib.Marshaller.Utf8PtrToString (interface_name), GLib.Marshaller.Utf8PtrToString (property_name), new GLib.Variant(value));
				if (release_on_call)
					gch.Free ();
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
				return false;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal DBusInterfaceSetPropertyFuncNative NativeDelegate;
		GLib.DBusInterfaceSetPropertyFunc managed;

		public DBusInterfaceSetPropertyFuncWrapper (GLib.DBusInterfaceSetPropertyFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new DBusInterfaceSetPropertyFuncNative (NativeCallback);
		}

		public static GLib.DBusInterfaceSetPropertyFunc GetManagedDelegate (DBusInterfaceSetPropertyFuncNative native)
		{
			if (native == null)
				return null;
			DBusInterfaceSetPropertyFuncWrapper wrapper = (DBusInterfaceSetPropertyFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
