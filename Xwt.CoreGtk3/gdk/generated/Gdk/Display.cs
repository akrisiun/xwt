// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Display : GLib.Object {

		public Display (IntPtr raw) : base(raw) {}

		protected Display() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Signal("closed")]
		public event Gdk.ClosedHandler Closed {
			add {
				this.AddSignalHandler ("closed", value, typeof (Gdk.ClosedArgs));
			}
			remove {
				this.RemoveSignalHandler ("closed", value);
			}
		}

		[GLib.Signal("opened")]
		public event System.EventHandler Opened {
			add {
				this.AddSignalHandler ("opened", value);
			}
			remove {
				this.RemoveSignalHandler ("opened", value);
			}
		}

		static OpenedNativeDelegate Opened_cb_delegate;
		static OpenedNativeDelegate OpenedVMCallback {
			get {
				if (Opened_cb_delegate == null)
					Opened_cb_delegate = new OpenedNativeDelegate (Opened_cb);
				return Opened_cb_delegate;
			}
		}

		static void OverrideOpened (GLib.GType gtype)
		{
			OverrideOpened (gtype, OpenedVMCallback);
		}

		static void OverrideOpened (GLib.GType gtype, OpenedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "opened", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void OpenedNativeDelegate (IntPtr inst);

		static void Opened_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnOpened ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideOpened")]
		protected virtual void OnOpened ()
		{
			InternalOpened ();
		}

		private void InternalOpened ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static GetNameNativeDelegate GetName_cb_delegate;
		static GetNameNativeDelegate GetNameVMCallback {
			get {
				if (GetName_cb_delegate == null)
					GetName_cb_delegate = new GetNameNativeDelegate (GetName_cb);
				return GetName_cb_delegate;
			}
		}

		static void OverrideGetName (GLib.GType gtype)
		{
			OverrideGetName (gtype, GetNameVMCallback);
		}

		static void OverrideGetName (GLib.GType gtype, GetNameNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetName = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetNameNativeDelegate (IntPtr inst);

		static IntPtr GetName_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				string __result;
				__result = __obj.OnGetName ();
				return GLib.Marshaller.StringToPtrGStrdup (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetName")]
		protected virtual string OnGetName ()
		{
			return InternalGetName ();
		}

		private string InternalGetName ()
		{
			GetNameNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetName;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return GLib.Marshaller.Utf8PtrToString (__result);
		}

		static GetNScreensNativeDelegate GetNScreens_cb_delegate;
		static GetNScreensNativeDelegate GetNScreensVMCallback {
			get {
				if (GetNScreens_cb_delegate == null)
					GetNScreens_cb_delegate = new GetNScreensNativeDelegate (GetNScreens_cb);
				return GetNScreens_cb_delegate;
			}
		}

		static void OverrideGetNScreens (GLib.GType gtype)
		{
			OverrideGetNScreens (gtype, GetNScreensVMCallback);
		}

		static void OverrideGetNScreens (GLib.GType gtype, GetNScreensNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetNScreens = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetNScreensNativeDelegate (IntPtr inst);

		static int GetNScreens_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				int __result;
				__result = __obj.OnGetNScreens ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetNScreens")]
		protected virtual int OnGetNScreens ()
		{
			return InternalGetNScreens ();
		}

		private int InternalGetNScreens ()
		{
			GetNScreensNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetNScreens;
			if (unmanaged == null) return 0;

			int __result = unmanaged (this.Handle);
			return __result;
		}

		static GetScreenNativeDelegate GetScreen_cb_delegate;
		static GetScreenNativeDelegate GetScreenVMCallback {
			get {
				if (GetScreen_cb_delegate == null)
					GetScreen_cb_delegate = new GetScreenNativeDelegate (GetScreen_cb);
				return GetScreen_cb_delegate;
			}
		}

		static void OverrideGetScreen (GLib.GType gtype)
		{
			OverrideGetScreen (gtype, GetScreenVMCallback);
		}

		static void OverrideGetScreen (GLib.GType gtype, GetScreenNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetScreen = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetScreenNativeDelegate (IntPtr inst, int screen_num);

		static IntPtr GetScreen_cb (IntPtr inst, int screen_num)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				Gdk.Screen __result;
				__result = __obj.OnGetScreen (screen_num);
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetScreen")]
		protected virtual Gdk.Screen OnGetScreen (int screen_num)
		{
			return InternalGetScreen (screen_num);
		}

		private Gdk.Screen InternalGetScreen (int screen_num)
		{
			GetScreenNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetScreen;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle, screen_num);
			return GLib.Object.GetObject(__result) as Gdk.Screen;
		}

		static GetDefaultScreenNativeDelegate GetDefaultScreen_cb_delegate;
		static GetDefaultScreenNativeDelegate GetDefaultScreenVMCallback {
			get {
				if (GetDefaultScreen_cb_delegate == null)
					GetDefaultScreen_cb_delegate = new GetDefaultScreenNativeDelegate (GetDefaultScreen_cb);
				return GetDefaultScreen_cb_delegate;
			}
		}

		static void OverrideGetDefaultScreen (GLib.GType gtype)
		{
			OverrideGetDefaultScreen (gtype, GetDefaultScreenVMCallback);
		}

		static void OverrideGetDefaultScreen (GLib.GType gtype, GetDefaultScreenNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetDefaultScreen = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetDefaultScreenNativeDelegate (IntPtr inst);

		static IntPtr GetDefaultScreen_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				Gdk.Screen __result;
				__result = __obj.OnGetDefaultScreen ();
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetDefaultScreen")]
		protected virtual Gdk.Screen OnGetDefaultScreen ()
		{
			return InternalGetDefaultScreen ();
		}

		private Gdk.Screen InternalGetDefaultScreen ()
		{
			GetDefaultScreenNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetDefaultScreen;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return GLib.Object.GetObject(__result) as Gdk.Screen;
		}

		static BeepNativeDelegate Beep_cb_delegate;
		static BeepNativeDelegate BeepVMCallback {
			get {
				if (Beep_cb_delegate == null)
					Beep_cb_delegate = new BeepNativeDelegate (Beep_cb);
				return Beep_cb_delegate;
			}
		}

		static void OverrideBeep (GLib.GType gtype)
		{
			OverrideBeep (gtype, BeepVMCallback);
		}

		static void OverrideBeep (GLib.GType gtype, BeepNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.Beep = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void BeepNativeDelegate (IntPtr inst);

		static void Beep_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnBeep ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideBeep")]
		protected virtual void OnBeep ()
		{
			InternalBeep ();
		}

		private void InternalBeep ()
		{
			BeepNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Beep;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static SyncNativeDelegate Sync_cb_delegate;
		static SyncNativeDelegate SyncVMCallback {
			get {
				if (Sync_cb_delegate == null)
					Sync_cb_delegate = new SyncNativeDelegate (Sync_cb);
				return Sync_cb_delegate;
			}
		}

		static void OverrideSync (GLib.GType gtype)
		{
			OverrideSync (gtype, SyncVMCallback);
		}

		static void OverrideSync (GLib.GType gtype, SyncNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.Sync = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SyncNativeDelegate (IntPtr inst);

		static void Sync_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnSync ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideSync")]
		protected virtual void OnSync ()
		{
			InternalSync ();
		}

		private void InternalSync ()
		{
			SyncNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Sync;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static FlushNativeDelegate Flush_cb_delegate;
		static FlushNativeDelegate FlushVMCallback {
			get {
				if (Flush_cb_delegate == null)
					Flush_cb_delegate = new FlushNativeDelegate (Flush_cb);
				return Flush_cb_delegate;
			}
		}

		static void OverrideFlush (GLib.GType gtype)
		{
			OverrideFlush (gtype, FlushVMCallback);
		}

		static void OverrideFlush (GLib.GType gtype, FlushNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.Flush = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void FlushNativeDelegate (IntPtr inst);

		static void Flush_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnFlush ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideFlush")]
		protected virtual void OnFlush ()
		{
			InternalFlush ();
		}

		private void InternalFlush ()
		{
			FlushNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Flush;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static HasPendingNativeDelegate HasPending_cb_delegate;
		static HasPendingNativeDelegate HasPendingVMCallback {
			get {
				if (HasPending_cb_delegate == null)
					HasPending_cb_delegate = new HasPendingNativeDelegate (HasPending_cb);
				return HasPending_cb_delegate;
			}
		}

		static void OverrideHasPending (GLib.GType gtype)
		{
			OverrideHasPending (gtype, HasPendingVMCallback);
		}

		static void OverrideHasPending (GLib.GType gtype, HasPendingNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.HasPending = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool HasPendingNativeDelegate (IntPtr inst);

		static bool HasPending_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				bool __result;
				__result = __obj.OnHasPending ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideHasPending")]
		protected virtual bool OnHasPending ()
		{
			return InternalHasPending ();
		}

		private bool InternalHasPending ()
		{
			HasPendingNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).HasPending;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static QueueEventsNativeDelegate QueueEvents_cb_delegate;
		static QueueEventsNativeDelegate QueueEventsVMCallback {
			get {
				if (QueueEvents_cb_delegate == null)
					QueueEvents_cb_delegate = new QueueEventsNativeDelegate (QueueEvents_cb);
				return QueueEvents_cb_delegate;
			}
		}

		static void OverrideQueueEvents (GLib.GType gtype)
		{
			OverrideQueueEvents (gtype, QueueEventsVMCallback);
		}

		static void OverrideQueueEvents (GLib.GType gtype, QueueEventsNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.QueueEvents = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void QueueEventsNativeDelegate (IntPtr inst);

		static void QueueEvents_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnQueueEvents ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideQueueEvents")]
		protected virtual void OnQueueEvents ()
		{
			InternalQueueEvents ();
		}

		private void InternalQueueEvents ()
		{
			QueueEventsNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).QueueEvents;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static GetDefaultGroupNativeDelegate GetDefaultGroup_cb_delegate;
		static GetDefaultGroupNativeDelegate GetDefaultGroupVMCallback {
			get {
				if (GetDefaultGroup_cb_delegate == null)
					GetDefaultGroup_cb_delegate = new GetDefaultGroupNativeDelegate (GetDefaultGroup_cb);
				return GetDefaultGroup_cb_delegate;
			}
		}

		static void OverrideGetDefaultGroup (GLib.GType gtype)
		{
			OverrideGetDefaultGroup (gtype, GetDefaultGroupVMCallback);
		}

		static void OverrideGetDefaultGroup (GLib.GType gtype, GetDefaultGroupNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetDefaultGroup = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetDefaultGroupNativeDelegate (IntPtr inst);

		static IntPtr GetDefaultGroup_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				Gdk.Window __result;
				__result = __obj.OnGetDefaultGroup ();
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetDefaultGroup")]
		protected virtual Gdk.Window OnGetDefaultGroup ()
		{
			return InternalGetDefaultGroup ();
		}

		private Gdk.Window InternalGetDefaultGroup ()
		{
			GetDefaultGroupNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetDefaultGroup;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return GLib.Object.GetObject(__result) as Gdk.Window;
		}

		static SupportsSelectionNotificationNativeDelegate SupportsSelectionNotification_cb_delegate;
		static SupportsSelectionNotificationNativeDelegate SupportsSelectionNotificationVMCallback {
			get {
				if (SupportsSelectionNotification_cb_delegate == null)
					SupportsSelectionNotification_cb_delegate = new SupportsSelectionNotificationNativeDelegate (SupportsSelectionNotification_cb);
				return SupportsSelectionNotification_cb_delegate;
			}
		}

		static void OverrideSupportsSelectionNotification (GLib.GType gtype)
		{
			OverrideSupportsSelectionNotification (gtype, SupportsSelectionNotificationVMCallback);
		}

		static void OverrideSupportsSelectionNotification (GLib.GType gtype, SupportsSelectionNotificationNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.SupportsSelectionNotification = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SupportsSelectionNotificationNativeDelegate (IntPtr inst);

		static bool SupportsSelectionNotification_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				bool __result;
				__result = __obj.OnSupportsSelectionNotification ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideSupportsSelectionNotification")]
		protected virtual bool OnSupportsSelectionNotification ()
		{
			return InternalSupportsSelectionNotification ();
		}

		private bool InternalSupportsSelectionNotification ()
		{
			SupportsSelectionNotificationNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SupportsSelectionNotification;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static RequestSelectionNotificationNativeDelegate RequestSelectionNotification_cb_delegate;
		static RequestSelectionNotificationNativeDelegate RequestSelectionNotificationVMCallback {
			get {
				if (RequestSelectionNotification_cb_delegate == null)
					RequestSelectionNotification_cb_delegate = new RequestSelectionNotificationNativeDelegate (RequestSelectionNotification_cb);
				return RequestSelectionNotification_cb_delegate;
			}
		}

		static void OverrideRequestSelectionNotification (GLib.GType gtype)
		{
			OverrideRequestSelectionNotification (gtype, RequestSelectionNotificationVMCallback);
		}

		static void OverrideRequestSelectionNotification (GLib.GType gtype, RequestSelectionNotificationNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.RequestSelectionNotification = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool RequestSelectionNotificationNativeDelegate (IntPtr inst, IntPtr selection);

		static bool RequestSelectionNotification_cb (IntPtr inst, IntPtr selection)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				bool __result;
				__result = __obj.OnRequestSelectionNotification (selection == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (selection, typeof (Gdk.Atom), false));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideRequestSelectionNotification")]
		protected virtual bool OnRequestSelectionNotification (Gdk.Atom selection)
		{
			return InternalRequestSelectionNotification (selection);
		}

		private bool InternalRequestSelectionNotification (Gdk.Atom selection)
		{
			RequestSelectionNotificationNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RequestSelectionNotification;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, selection == null ? IntPtr.Zero : selection.Handle);
			return __result;
		}

		static SupportsShapesNativeDelegate SupportsShapes_cb_delegate;
		static SupportsShapesNativeDelegate SupportsShapesVMCallback {
			get {
				if (SupportsShapes_cb_delegate == null)
					SupportsShapes_cb_delegate = new SupportsShapesNativeDelegate (SupportsShapes_cb);
				return SupportsShapes_cb_delegate;
			}
		}

		static void OverrideSupportsShapes (GLib.GType gtype)
		{
			OverrideSupportsShapes (gtype, SupportsShapesVMCallback);
		}

		static void OverrideSupportsShapes (GLib.GType gtype, SupportsShapesNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.SupportsShapes = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SupportsShapesNativeDelegate (IntPtr inst);

		static bool SupportsShapes_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				bool __result;
				__result = __obj.OnSupportsShapes ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideSupportsShapes")]
		protected virtual bool OnSupportsShapes ()
		{
			return InternalSupportsShapes ();
		}

		private bool InternalSupportsShapes ()
		{
			SupportsShapesNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SupportsShapes;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static SupportsInputShapesNativeDelegate SupportsInputShapes_cb_delegate;
		static SupportsInputShapesNativeDelegate SupportsInputShapesVMCallback {
			get {
				if (SupportsInputShapes_cb_delegate == null)
					SupportsInputShapes_cb_delegate = new SupportsInputShapesNativeDelegate (SupportsInputShapes_cb);
				return SupportsInputShapes_cb_delegate;
			}
		}

		static void OverrideSupportsInputShapes (GLib.GType gtype)
		{
			OverrideSupportsInputShapes (gtype, SupportsInputShapesVMCallback);
		}

		static void OverrideSupportsInputShapes (GLib.GType gtype, SupportsInputShapesNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.SupportsInputShapes = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SupportsInputShapesNativeDelegate (IntPtr inst);

		static bool SupportsInputShapes_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				bool __result;
				__result = __obj.OnSupportsInputShapes ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideSupportsInputShapes")]
		protected virtual bool OnSupportsInputShapes ()
		{
			return InternalSupportsInputShapes ();
		}

		private bool InternalSupportsInputShapes ()
		{
			SupportsInputShapesNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SupportsInputShapes;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static SupportsCompositeNativeDelegate SupportsComposite_cb_delegate;
		static SupportsCompositeNativeDelegate SupportsCompositeVMCallback {
			get {
				if (SupportsComposite_cb_delegate == null)
					SupportsComposite_cb_delegate = new SupportsCompositeNativeDelegate (SupportsComposite_cb);
				return SupportsComposite_cb_delegate;
			}
		}

		static void OverrideSupportsComposite (GLib.GType gtype)
		{
			OverrideSupportsComposite (gtype, SupportsCompositeVMCallback);
		}

		static void OverrideSupportsComposite (GLib.GType gtype, SupportsCompositeNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.SupportsComposite = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SupportsCompositeNativeDelegate (IntPtr inst);

		static bool SupportsComposite_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				bool __result;
				__result = __obj.OnSupportsComposite ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideSupportsComposite")]
		protected virtual bool OnSupportsComposite ()
		{
			return InternalSupportsComposite ();
		}

		private bool InternalSupportsComposite ()
		{
			SupportsCompositeNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SupportsComposite;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static SupportsCursorAlphaNativeDelegate SupportsCursorAlpha_cb_delegate;
		static SupportsCursorAlphaNativeDelegate SupportsCursorAlphaVMCallback {
			get {
				if (SupportsCursorAlpha_cb_delegate == null)
					SupportsCursorAlpha_cb_delegate = new SupportsCursorAlphaNativeDelegate (SupportsCursorAlpha_cb);
				return SupportsCursorAlpha_cb_delegate;
			}
		}

		static void OverrideSupportsCursorAlpha (GLib.GType gtype)
		{
			OverrideSupportsCursorAlpha (gtype, SupportsCursorAlphaVMCallback);
		}

		static void OverrideSupportsCursorAlpha (GLib.GType gtype, SupportsCursorAlphaNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.SupportsCursorAlpha = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SupportsCursorAlphaNativeDelegate (IntPtr inst);

		static bool SupportsCursorAlpha_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				bool __result;
				__result = __obj.OnSupportsCursorAlpha ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideSupportsCursorAlpha")]
		protected virtual bool OnSupportsCursorAlpha ()
		{
			return InternalSupportsCursorAlpha ();
		}

		private bool InternalSupportsCursorAlpha ()
		{
			SupportsCursorAlphaNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SupportsCursorAlpha;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static SupportsCursorColorNativeDelegate SupportsCursorColor_cb_delegate;
		static SupportsCursorColorNativeDelegate SupportsCursorColorVMCallback {
			get {
				if (SupportsCursorColor_cb_delegate == null)
					SupportsCursorColor_cb_delegate = new SupportsCursorColorNativeDelegate (SupportsCursorColor_cb);
				return SupportsCursorColor_cb_delegate;
			}
		}

		static void OverrideSupportsCursorColor (GLib.GType gtype)
		{
			OverrideSupportsCursorColor (gtype, SupportsCursorColorVMCallback);
		}

		static void OverrideSupportsCursorColor (GLib.GType gtype, SupportsCursorColorNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.SupportsCursorColor = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SupportsCursorColorNativeDelegate (IntPtr inst);

		static bool SupportsCursorColor_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				bool __result;
				__result = __obj.OnSupportsCursorColor ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideSupportsCursorColor")]
		protected virtual bool OnSupportsCursorColor ()
		{
			return InternalSupportsCursorColor ();
		}

		private bool InternalSupportsCursorColor ()
		{
			SupportsCursorColorNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SupportsCursorColor;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static SupportsClipboardPersistenceNativeDelegate SupportsClipboardPersistence_cb_delegate;
		static SupportsClipboardPersistenceNativeDelegate SupportsClipboardPersistenceVMCallback {
			get {
				if (SupportsClipboardPersistence_cb_delegate == null)
					SupportsClipboardPersistence_cb_delegate = new SupportsClipboardPersistenceNativeDelegate (SupportsClipboardPersistence_cb);
				return SupportsClipboardPersistence_cb_delegate;
			}
		}

		static void OverrideSupportsClipboardPersistence (GLib.GType gtype)
		{
			OverrideSupportsClipboardPersistence (gtype, SupportsClipboardPersistenceVMCallback);
		}

		static void OverrideSupportsClipboardPersistence (GLib.GType gtype, SupportsClipboardPersistenceNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.SupportsClipboardPersistence = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SupportsClipboardPersistenceNativeDelegate (IntPtr inst);

		static bool SupportsClipboardPersistence_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				bool __result;
				__result = __obj.OnSupportsClipboardPersistence ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideSupportsClipboardPersistence")]
		protected virtual bool OnSupportsClipboardPersistence ()
		{
			return InternalSupportsClipboardPersistence ();
		}

		private bool InternalSupportsClipboardPersistence ()
		{
			SupportsClipboardPersistenceNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SupportsClipboardPersistence;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static StoreClipboardNativeDelegate StoreClipboard_cb_delegate;
		static StoreClipboardNativeDelegate StoreClipboardVMCallback {
			get {
				if (StoreClipboard_cb_delegate == null)
					StoreClipboard_cb_delegate = new StoreClipboardNativeDelegate (StoreClipboard_cb);
				return StoreClipboard_cb_delegate;
			}
		}

		static void OverrideStoreClipboard (GLib.GType gtype)
		{
			OverrideStoreClipboard (gtype, StoreClipboardVMCallback);
		}

		static void OverrideStoreClipboard (GLib.GType gtype, StoreClipboardNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.StoreClipboard = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void StoreClipboardNativeDelegate (IntPtr inst, IntPtr clipboard_window, uint time_, IntPtr targets, int n_targets);

		static void StoreClipboard_cb (IntPtr inst, IntPtr clipboard_window, uint time_, IntPtr targets, int n_targets)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnStoreClipboard (GLib.Object.GetObject(clipboard_window) as Gdk.Window, time_, targets == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (targets, typeof (Gdk.Atom), false), n_targets);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideStoreClipboard")]
		protected virtual void OnStoreClipboard (Gdk.Window clipboard_window, uint time_, Gdk.Atom targets, int n_targets)
		{
			InternalStoreClipboard (clipboard_window, time_, targets, n_targets);
		}

		private void InternalStoreClipboard (Gdk.Window clipboard_window, uint time_, Gdk.Atom targets, int n_targets)
		{
			StoreClipboardNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).StoreClipboard;
			if (unmanaged == null) return;

			unmanaged (this.Handle, clipboard_window == null ? IntPtr.Zero : clipboard_window.Handle, time_, targets == null ? IntPtr.Zero : targets.Handle, n_targets);
		}

		static GetDefaultCursorSizeNativeDelegate GetDefaultCursorSize_cb_delegate;
		static GetDefaultCursorSizeNativeDelegate GetDefaultCursorSizeVMCallback {
			get {
				if (GetDefaultCursorSize_cb_delegate == null)
					GetDefaultCursorSize_cb_delegate = new GetDefaultCursorSizeNativeDelegate (GetDefaultCursorSize_cb);
				return GetDefaultCursorSize_cb_delegate;
			}
		}

		static void OverrideGetDefaultCursorSize (GLib.GType gtype)
		{
			OverrideGetDefaultCursorSize (gtype, GetDefaultCursorSizeVMCallback);
		}

		static void OverrideGetDefaultCursorSize (GLib.GType gtype, GetDefaultCursorSizeNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetDefaultCursorSize = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetDefaultCursorSizeNativeDelegate (IntPtr inst, out uint width, out uint height);

		static void GetDefaultCursorSize_cb (IntPtr inst, out uint width, out uint height)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnGetDefaultCursorSize (out width, out height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetDefaultCursorSize")]
		protected virtual void OnGetDefaultCursorSize (out uint width, out uint height)
		{
			InternalGetDefaultCursorSize (out width, out height);
		}

		private void InternalGetDefaultCursorSize (out uint width, out uint height)
		{
			GetDefaultCursorSizeNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetDefaultCursorSize;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			unmanaged (this.Handle, out width, out height);
		}

		static GetMaximalCursorSizeNativeDelegate GetMaximalCursorSize_cb_delegate;
		static GetMaximalCursorSizeNativeDelegate GetMaximalCursorSizeVMCallback {
			get {
				if (GetMaximalCursorSize_cb_delegate == null)
					GetMaximalCursorSize_cb_delegate = new GetMaximalCursorSizeNativeDelegate (GetMaximalCursorSize_cb);
				return GetMaximalCursorSize_cb_delegate;
			}
		}

		static void OverrideGetMaximalCursorSize (GLib.GType gtype)
		{
			OverrideGetMaximalCursorSize (gtype, GetMaximalCursorSizeVMCallback);
		}

		static void OverrideGetMaximalCursorSize (GLib.GType gtype, GetMaximalCursorSizeNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetMaximalCursorSize = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetMaximalCursorSizeNativeDelegate (IntPtr inst, out uint width, out uint height);

		static void GetMaximalCursorSize_cb (IntPtr inst, out uint width, out uint height)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnGetMaximalCursorSize (out width, out height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetMaximalCursorSize")]
		protected virtual void OnGetMaximalCursorSize (out uint width, out uint height)
		{
			InternalGetMaximalCursorSize (out width, out height);
		}

		private void InternalGetMaximalCursorSize (out uint width, out uint height)
		{
			GetMaximalCursorSizeNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetMaximalCursorSize;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			unmanaged (this.Handle, out width, out height);
		}

		static GetCursorForTypeNativeDelegate GetCursorForType_cb_delegate;
		static GetCursorForTypeNativeDelegate GetCursorForTypeVMCallback {
			get {
				if (GetCursorForType_cb_delegate == null)
					GetCursorForType_cb_delegate = new GetCursorForTypeNativeDelegate (GetCursorForType_cb);
				return GetCursorForType_cb_delegate;
			}
		}

		static void OverrideGetCursorForType (GLib.GType gtype)
		{
			OverrideGetCursorForType (gtype, GetCursorForTypeVMCallback);
		}

		static void OverrideGetCursorForType (GLib.GType gtype, GetCursorForTypeNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetCursorForType = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetCursorForTypeNativeDelegate (IntPtr inst, int type);

		static IntPtr GetCursorForType_cb (IntPtr inst, int type)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				Gdk.Cursor __result;
				__result = __obj.OnGetCursorForType ((Gdk.CursorType) type);
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetCursorForType")]
		protected virtual Gdk.Cursor OnGetCursorForType (Gdk.CursorType type)
		{
			return InternalGetCursorForType (type);
		}

		private Gdk.Cursor InternalGetCursorForType (Gdk.CursorType type)
		{
			GetCursorForTypeNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetCursorForType;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle, (int) type);
			return GLib.Object.GetObject(__result) as Gdk.Cursor;
		}

		static GetCursorForNameNativeDelegate GetCursorForName_cb_delegate;
		static GetCursorForNameNativeDelegate GetCursorForNameVMCallback {
			get {
				if (GetCursorForName_cb_delegate == null)
					GetCursorForName_cb_delegate = new GetCursorForNameNativeDelegate (GetCursorForName_cb);
				return GetCursorForName_cb_delegate;
			}
		}

		static void OverrideGetCursorForName (GLib.GType gtype)
		{
			OverrideGetCursorForName (gtype, GetCursorForNameVMCallback);
		}

		static void OverrideGetCursorForName (GLib.GType gtype, GetCursorForNameNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetCursorForName = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetCursorForNameNativeDelegate (IntPtr inst, IntPtr name);

		static IntPtr GetCursorForName_cb (IntPtr inst, IntPtr name)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				Gdk.Cursor __result;
				__result = __obj.OnGetCursorForName (GLib.Marshaller.Utf8PtrToString (name));
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetCursorForName")]
		protected virtual Gdk.Cursor OnGetCursorForName (string name)
		{
			return InternalGetCursorForName (name);
		}

		private Gdk.Cursor InternalGetCursorForName (string name)
		{
			GetCursorForNameNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetCursorForName;
			if (unmanaged == null) return null;

			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr __result = unmanaged (this.Handle, native_name);
			GLib.Marshaller.Free (native_name);
			return GLib.Object.GetObject(__result) as Gdk.Cursor;
		}

		static GetCursorForPixbufNativeDelegate GetCursorForPixbuf_cb_delegate;
		static GetCursorForPixbufNativeDelegate GetCursorForPixbufVMCallback {
			get {
				if (GetCursorForPixbuf_cb_delegate == null)
					GetCursorForPixbuf_cb_delegate = new GetCursorForPixbufNativeDelegate (GetCursorForPixbuf_cb);
				return GetCursorForPixbuf_cb_delegate;
			}
		}

		static void OverrideGetCursorForPixbuf (GLib.GType gtype)
		{
			OverrideGetCursorForPixbuf (gtype, GetCursorForPixbufVMCallback);
		}

		static void OverrideGetCursorForPixbuf (GLib.GType gtype, GetCursorForPixbufNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetCursorForPixbuf = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetCursorForPixbufNativeDelegate (IntPtr inst, IntPtr pixbuf, int x, int y);

		static IntPtr GetCursorForPixbuf_cb (IntPtr inst, IntPtr pixbuf, int x, int y)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				Gdk.Cursor __result;
				__result = __obj.OnGetCursorForPixbuf (GLib.Object.GetObject(pixbuf) as Gdk.Pixbuf, x, y);
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetCursorForPixbuf")]
		protected virtual Gdk.Cursor OnGetCursorForPixbuf (Gdk.Pixbuf pixbuf, int x, int y)
		{
			return InternalGetCursorForPixbuf (pixbuf, x, y);
		}

		private Gdk.Cursor InternalGetCursorForPixbuf (Gdk.Pixbuf pixbuf, int x, int y)
		{
			GetCursorForPixbufNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetCursorForPixbuf;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle, pixbuf == null ? IntPtr.Zero : pixbuf.Handle, x, y);
			return GLib.Object.GetObject(__result) as Gdk.Cursor;
		}

		static ListDevicesNativeDelegate ListDevices_cb_delegate;
		static ListDevicesNativeDelegate ListDevicesVMCallback {
			get {
				if (ListDevices_cb_delegate == null)
					ListDevices_cb_delegate = new ListDevicesNativeDelegate (ListDevices_cb);
				return ListDevices_cb_delegate;
			}
		}

		static void OverrideListDevices (GLib.GType gtype)
		{
			OverrideListDevices (gtype, ListDevicesVMCallback);
		}

		static void OverrideListDevices (GLib.GType gtype, ListDevicesNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.ListDevices = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr ListDevicesNativeDelegate (IntPtr inst);

		static IntPtr ListDevices_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				GLib.List __result;
				__result = __obj.OnListDevices ();
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideListDevices")]
		protected virtual GLib.List OnListDevices ()
		{
			return InternalListDevices ();
		}

		private GLib.List InternalListDevices ()
		{
			ListDevicesNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ListDevices;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return new GLib.List(__result);
		}

		static GetAppLaunchContextNativeDelegate GetAppLaunchContext_cb_delegate;
		static GetAppLaunchContextNativeDelegate GetAppLaunchContextVMCallback {
			get {
				if (GetAppLaunchContext_cb_delegate == null)
					GetAppLaunchContext_cb_delegate = new GetAppLaunchContextNativeDelegate (GetAppLaunchContext_cb);
				return GetAppLaunchContext_cb_delegate;
			}
		}

		static void OverrideGetAppLaunchContext (GLib.GType gtype)
		{
			OverrideGetAppLaunchContext (gtype, GetAppLaunchContextVMCallback);
		}

		static void OverrideGetAppLaunchContext (GLib.GType gtype, GetAppLaunchContextNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetAppLaunchContext = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetAppLaunchContextNativeDelegate (IntPtr inst);

		static IntPtr GetAppLaunchContext_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				Gdk.AppLaunchContext __result;
				__result = __obj.OnGetAppLaunchContext ();
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetAppLaunchContext")]
		protected virtual Gdk.AppLaunchContext OnGetAppLaunchContext ()
		{
			return InternalGetAppLaunchContext ();
		}

		private Gdk.AppLaunchContext InternalGetAppLaunchContext ()
		{
			GetAppLaunchContextNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetAppLaunchContext;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return GLib.Object.GetObject(__result) as Gdk.AppLaunchContext;
		}

		static BeforeProcessAllUpdatesNativeDelegate BeforeProcessAllUpdates_cb_delegate;
		static BeforeProcessAllUpdatesNativeDelegate BeforeProcessAllUpdatesVMCallback {
			get {
				if (BeforeProcessAllUpdates_cb_delegate == null)
					BeforeProcessAllUpdates_cb_delegate = new BeforeProcessAllUpdatesNativeDelegate (BeforeProcessAllUpdates_cb);
				return BeforeProcessAllUpdates_cb_delegate;
			}
		}

		static void OverrideBeforeProcessAllUpdates (GLib.GType gtype)
		{
			OverrideBeforeProcessAllUpdates (gtype, BeforeProcessAllUpdatesVMCallback);
		}

		static void OverrideBeforeProcessAllUpdates (GLib.GType gtype, BeforeProcessAllUpdatesNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.BeforeProcessAllUpdates = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void BeforeProcessAllUpdatesNativeDelegate (IntPtr inst);

		static void BeforeProcessAllUpdates_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnBeforeProcessAllUpdates ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideBeforeProcessAllUpdates")]
		protected virtual void OnBeforeProcessAllUpdates ()
		{
			InternalBeforeProcessAllUpdates ();
		}

		private void InternalBeforeProcessAllUpdates ()
		{
			BeforeProcessAllUpdatesNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).BeforeProcessAllUpdates;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static AfterProcessAllUpdatesNativeDelegate AfterProcessAllUpdates_cb_delegate;
		static AfterProcessAllUpdatesNativeDelegate AfterProcessAllUpdatesVMCallback {
			get {
				if (AfterProcessAllUpdates_cb_delegate == null)
					AfterProcessAllUpdates_cb_delegate = new AfterProcessAllUpdatesNativeDelegate (AfterProcessAllUpdates_cb);
				return AfterProcessAllUpdates_cb_delegate;
			}
		}

		static void OverrideAfterProcessAllUpdates (GLib.GType gtype)
		{
			OverrideAfterProcessAllUpdates (gtype, AfterProcessAllUpdatesVMCallback);
		}

		static void OverrideAfterProcessAllUpdates (GLib.GType gtype, AfterProcessAllUpdatesNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.AfterProcessAllUpdates = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AfterProcessAllUpdatesNativeDelegate (IntPtr inst);

		static void AfterProcessAllUpdates_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnAfterProcessAllUpdates ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideAfterProcessAllUpdates")]
		protected virtual void OnAfterProcessAllUpdates ()
		{
			InternalAfterProcessAllUpdates ();
		}

		private void InternalAfterProcessAllUpdates ()
		{
			AfterProcessAllUpdatesNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).AfterProcessAllUpdates;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static GetNextSerialNativeDelegate GetNextSerial_cb_delegate;
		static GetNextSerialNativeDelegate GetNextSerialVMCallback {
			get {
				if (GetNextSerial_cb_delegate == null)
					GetNextSerial_cb_delegate = new GetNextSerialNativeDelegate (GetNextSerial_cb);
				return GetNextSerial_cb_delegate;
			}
		}

		static void OverrideGetNextSerial (GLib.GType gtype)
		{
			OverrideGetNextSerial (gtype, GetNextSerialVMCallback);
		}

		static void OverrideGetNextSerial (GLib.GType gtype, GetNextSerialNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetNextSerial = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate UIntPtr GetNextSerialNativeDelegate (IntPtr inst);

		static UIntPtr GetNextSerial_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				ulong __result;
				__result = __obj.OnGetNextSerial ();
				return new UIntPtr (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetNextSerial")]
		protected virtual ulong OnGetNextSerial ()
		{
			return InternalGetNextSerial ();
		}

		private ulong InternalGetNextSerial ()
		{
			GetNextSerialNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetNextSerial;
			if (unmanaged == null) return 0;

			UIntPtr __result = unmanaged (this.Handle);
			return (ulong) __result;
		}

		static NotifyStartupCompleteNativeDelegate NotifyStartupComplete_cb_delegate;
		static NotifyStartupCompleteNativeDelegate NotifyStartupCompleteVMCallback {
			get {
				if (NotifyStartupComplete_cb_delegate == null)
					NotifyStartupComplete_cb_delegate = new NotifyStartupCompleteNativeDelegate (NotifyStartupComplete_cb);
				return NotifyStartupComplete_cb_delegate;
			}
		}

		static void OverrideNotifyStartupComplete (GLib.GType gtype)
		{
			OverrideNotifyStartupComplete (gtype, NotifyStartupCompleteVMCallback);
		}

		static void OverrideNotifyStartupComplete (GLib.GType gtype, NotifyStartupCompleteNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.NotifyStartupComplete = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void NotifyStartupCompleteNativeDelegate (IntPtr inst, IntPtr startup_id);

		static void NotifyStartupComplete_cb (IntPtr inst, IntPtr startup_id)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnNotifyStartupComplete (GLib.Marshaller.Utf8PtrToString (startup_id));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideNotifyStartupComplete")]
		protected virtual void OnNotifyStartupComplete (string startup_id)
		{
			InternalNotifyStartupComplete (startup_id);
		}

		private void InternalNotifyStartupComplete (string startup_id)
		{
			NotifyStartupCompleteNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).NotifyStartupComplete;
			if (unmanaged == null) return;

			IntPtr native_startup_id = GLib.Marshaller.StringToPtrGStrdup (startup_id);
			unmanaged (this.Handle, native_startup_id);
			GLib.Marshaller.Free (native_startup_id);
		}

		static EventDataCopyNativeDelegate EventDataCopy_cb_delegate;
		static EventDataCopyNativeDelegate EventDataCopyVMCallback {
			get {
				if (EventDataCopy_cb_delegate == null)
					EventDataCopy_cb_delegate = new EventDataCopyNativeDelegate (EventDataCopy_cb);
				return EventDataCopy_cb_delegate;
			}
		}

		static void OverrideEventDataCopy (GLib.GType gtype)
		{
			OverrideEventDataCopy (gtype, EventDataCopyVMCallback);
		}

		static void OverrideEventDataCopy (GLib.GType gtype, EventDataCopyNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.EventDataCopy = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void EventDataCopyNativeDelegate (IntPtr inst, IntPtr evnt, IntPtr new_event);

		static void EventDataCopy_cb (IntPtr inst, IntPtr evnt, IntPtr new_event)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnEventDataCopy (Gdk.Event.GetEvent (evnt), Gdk.Event.GetEvent (new_event));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideEventDataCopy")]
		protected virtual void OnEventDataCopy (Gdk.Event evnt, Gdk.Event new_event)
		{
			InternalEventDataCopy (evnt, new_event);
		}

		private void InternalEventDataCopy (Gdk.Event evnt, Gdk.Event new_event)
		{
			EventDataCopyNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).EventDataCopy;
			if (unmanaged == null) return;

			unmanaged (this.Handle, evnt == null ? IntPtr.Zero : evnt.Handle, new_event == null ? IntPtr.Zero : new_event.Handle);
		}

		static EventDataFreeNativeDelegate EventDataFree_cb_delegate;
		static EventDataFreeNativeDelegate EventDataFreeVMCallback {
			get {
				if (EventDataFree_cb_delegate == null)
					EventDataFree_cb_delegate = new EventDataFreeNativeDelegate (EventDataFree_cb);
				return EventDataFree_cb_delegate;
			}
		}

		static void OverrideEventDataFree (GLib.GType gtype)
		{
			OverrideEventDataFree (gtype, EventDataFreeVMCallback);
		}

		static void OverrideEventDataFree (GLib.GType gtype, EventDataFreeNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.EventDataFree = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void EventDataFreeNativeDelegate (IntPtr inst, IntPtr evnt);

		static void EventDataFree_cb (IntPtr inst, IntPtr evnt)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnEventDataFree (Gdk.Event.GetEvent (evnt));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideEventDataFree")]
		protected virtual void OnEventDataFree (Gdk.Event evnt)
		{
			InternalEventDataFree (evnt);
		}

		private void InternalEventDataFree (Gdk.Event evnt)
		{
			EventDataFreeNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).EventDataFree;
			if (unmanaged == null) return;

			unmanaged (this.Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
		}

		static CreateWindowImplNativeDelegate CreateWindowImpl_cb_delegate;
		static CreateWindowImplNativeDelegate CreateWindowImplVMCallback {
			get {
				if (CreateWindowImpl_cb_delegate == null)
					CreateWindowImpl_cb_delegate = new CreateWindowImplNativeDelegate (CreateWindowImpl_cb);
				return CreateWindowImpl_cb_delegate;
			}
		}

		static void OverrideCreateWindowImpl (GLib.GType gtype)
		{
			OverrideCreateWindowImpl (gtype, CreateWindowImplVMCallback);
		}

		static void OverrideCreateWindowImpl (GLib.GType gtype, CreateWindowImplNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.CreateWindowImpl = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CreateWindowImplNativeDelegate (IntPtr inst, IntPtr window, IntPtr real_parent, IntPtr screen, int event_mask, IntPtr attributes, int attributes_mask);

		static void CreateWindowImpl_cb (IntPtr inst, IntPtr window, IntPtr real_parent, IntPtr screen, int event_mask, IntPtr attributes, int attributes_mask)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnCreateWindowImpl (GLib.Object.GetObject(window) as Gdk.Window, GLib.Object.GetObject(real_parent) as Gdk.Window, GLib.Object.GetObject(screen) as Gdk.Screen, (Gdk.EventMask) event_mask, Gdk.WindowAttr.New (attributes), attributes_mask);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideCreateWindowImpl")]
		protected virtual void OnCreateWindowImpl (Gdk.Window window, Gdk.Window real_parent, Gdk.Screen screen, Gdk.EventMask event_mask, Gdk.WindowAttr attributes, int attributes_mask)
		{
			InternalCreateWindowImpl (window, real_parent, screen, event_mask, attributes, attributes_mask);
		}

		private void InternalCreateWindowImpl (Gdk.Window window, Gdk.Window real_parent, Gdk.Screen screen, Gdk.EventMask event_mask, Gdk.WindowAttr attributes, int attributes_mask)
		{
			CreateWindowImplNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).CreateWindowImpl;
			if (unmanaged == null) return;

			IntPtr native_attributes = GLib.Marshaller.StructureToPtrAlloc (attributes);
			unmanaged (this.Handle, window == null ? IntPtr.Zero : window.Handle, real_parent == null ? IntPtr.Zero : real_parent.Handle, screen == null ? IntPtr.Zero : screen.Handle, (int) event_mask, native_attributes, attributes_mask);
			attributes = Gdk.WindowAttr.New (native_attributes);
			Marshal.FreeHGlobal (native_attributes);
		}

		static GetKeymapNativeDelegate GetKeymap_cb_delegate;
		static GetKeymapNativeDelegate GetKeymapVMCallback {
			get {
				if (GetKeymap_cb_delegate == null)
					GetKeymap_cb_delegate = new GetKeymapNativeDelegate (GetKeymap_cb);
				return GetKeymap_cb_delegate;
			}
		}

		static void OverrideGetKeymap (GLib.GType gtype)
		{
			OverrideGetKeymap (gtype, GetKeymapVMCallback);
		}

		static void OverrideGetKeymap (GLib.GType gtype, GetKeymapNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetKeymap = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetKeymapNativeDelegate (IntPtr inst);

		static IntPtr GetKeymap_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				Gdk.Keymap __result;
				__result = __obj.OnGetKeymap ();
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetKeymap")]
		protected virtual Gdk.Keymap OnGetKeymap ()
		{
			return InternalGetKeymap ();
		}

		private Gdk.Keymap InternalGetKeymap ()
		{
			GetKeymapNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetKeymap;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return GLib.Object.GetObject(__result) as Gdk.Keymap;
		}

		static PushErrorTrapNativeDelegate PushErrorTrap_cb_delegate;
		static PushErrorTrapNativeDelegate PushErrorTrapVMCallback {
			get {
				if (PushErrorTrap_cb_delegate == null)
					PushErrorTrap_cb_delegate = new PushErrorTrapNativeDelegate (PushErrorTrap_cb);
				return PushErrorTrap_cb_delegate;
			}
		}

		static void OverridePushErrorTrap (GLib.GType gtype)
		{
			OverridePushErrorTrap (gtype, PushErrorTrapVMCallback);
		}

		static void OverridePushErrorTrap (GLib.GType gtype, PushErrorTrapNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.PushErrorTrap = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PushErrorTrapNativeDelegate (IntPtr inst);

		static void PushErrorTrap_cb (IntPtr inst)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnPushErrorTrap ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverridePushErrorTrap")]
		protected virtual void OnPushErrorTrap ()
		{
			InternalPushErrorTrap ();
		}

		private void InternalPushErrorTrap ()
		{
			PushErrorTrapNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).PushErrorTrap;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static PopErrorTrapNativeDelegate PopErrorTrap_cb_delegate;
		static PopErrorTrapNativeDelegate PopErrorTrapVMCallback {
			get {
				if (PopErrorTrap_cb_delegate == null)
					PopErrorTrap_cb_delegate = new PopErrorTrapNativeDelegate (PopErrorTrap_cb);
				return PopErrorTrap_cb_delegate;
			}
		}

		static void OverridePopErrorTrap (GLib.GType gtype)
		{
			OverridePopErrorTrap (gtype, PopErrorTrapVMCallback);
		}

		static void OverridePopErrorTrap (GLib.GType gtype, PopErrorTrapNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.PopErrorTrap = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int PopErrorTrapNativeDelegate (IntPtr inst, bool ignore);

		static int PopErrorTrap_cb (IntPtr inst, bool ignore)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				int __result;
				__result = __obj.OnPopErrorTrap (ignore);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverridePopErrorTrap")]
		protected virtual int OnPopErrorTrap (bool ignore)
		{
			return InternalPopErrorTrap (ignore);
		}

		private int InternalPopErrorTrap (bool ignore)
		{
			PopErrorTrapNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).PopErrorTrap;
			if (unmanaged == null) return 0;

			int __result = unmanaged (this.Handle, ignore);
			return __result;
		}

		static GetSelectionOwnerNativeDelegate GetSelectionOwner_cb_delegate;
		static GetSelectionOwnerNativeDelegate GetSelectionOwnerVMCallback {
			get {
				if (GetSelectionOwner_cb_delegate == null)
					GetSelectionOwner_cb_delegate = new GetSelectionOwnerNativeDelegate (GetSelectionOwner_cb);
				return GetSelectionOwner_cb_delegate;
			}
		}

		static void OverrideGetSelectionOwner (GLib.GType gtype)
		{
			OverrideGetSelectionOwner (gtype, GetSelectionOwnerVMCallback);
		}

		static void OverrideGetSelectionOwner (GLib.GType gtype, GetSelectionOwnerNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetSelectionOwner = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetSelectionOwnerNativeDelegate (IntPtr inst, IntPtr selection);

		static IntPtr GetSelectionOwner_cb (IntPtr inst, IntPtr selection)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				Gdk.Window __result;
				__result = __obj.OnGetSelectionOwner (selection == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (selection, typeof (Gdk.Atom), false));
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetSelectionOwner")]
		protected virtual Gdk.Window OnGetSelectionOwner (Gdk.Atom selection)
		{
			return InternalGetSelectionOwner (selection);
		}

		private Gdk.Window InternalGetSelectionOwner (Gdk.Atom selection)
		{
			GetSelectionOwnerNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetSelectionOwner;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle, selection == null ? IntPtr.Zero : selection.Handle);
			return GLib.Object.GetObject(__result) as Gdk.Window;
		}

		static SetSelectionOwnerNativeDelegate SetSelectionOwner_cb_delegate;
		static SetSelectionOwnerNativeDelegate SetSelectionOwnerVMCallback {
			get {
				if (SetSelectionOwner_cb_delegate == null)
					SetSelectionOwner_cb_delegate = new SetSelectionOwnerNativeDelegate (SetSelectionOwner_cb);
				return SetSelectionOwner_cb_delegate;
			}
		}

		static void OverrideSetSelectionOwner (GLib.GType gtype)
		{
			OverrideSetSelectionOwner (gtype, SetSelectionOwnerVMCallback);
		}

		static void OverrideSetSelectionOwner (GLib.GType gtype, SetSelectionOwnerNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.SetSelectionOwner = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetSelectionOwnerNativeDelegate (IntPtr inst, IntPtr owner, IntPtr selection, uint time, bool send_event);

		static bool SetSelectionOwner_cb (IntPtr inst, IntPtr owner, IntPtr selection, uint time, bool send_event)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				bool __result;
				__result = __obj.OnSetSelectionOwner (GLib.Object.GetObject(owner) as Gdk.Window, selection == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (selection, typeof (Gdk.Atom), false), time, send_event);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideSetSelectionOwner")]
		protected virtual bool OnSetSelectionOwner (Gdk.Window owner, Gdk.Atom selection, uint time, bool send_event)
		{
			return InternalSetSelectionOwner (owner, selection, time, send_event);
		}

		private bool InternalSetSelectionOwner (Gdk.Window owner, Gdk.Atom selection, uint time, bool send_event)
		{
			SetSelectionOwnerNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SetSelectionOwner;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, owner == null ? IntPtr.Zero : owner.Handle, selection == null ? IntPtr.Zero : selection.Handle, time, send_event);
			return __result;
		}

		static SendSelectionNotifyNativeDelegate SendSelectionNotify_cb_delegate;
		static SendSelectionNotifyNativeDelegate SendSelectionNotifyVMCallback {
			get {
				if (SendSelectionNotify_cb_delegate == null)
					SendSelectionNotify_cb_delegate = new SendSelectionNotifyNativeDelegate (SendSelectionNotify_cb);
				return SendSelectionNotify_cb_delegate;
			}
		}

		static void OverrideSendSelectionNotify (GLib.GType gtype)
		{
			OverrideSendSelectionNotify (gtype, SendSelectionNotifyVMCallback);
		}

		static void OverrideSendSelectionNotify (GLib.GType gtype, SendSelectionNotifyNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.SendSelectionNotify = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SendSelectionNotifyNativeDelegate (IntPtr inst, IntPtr requestor, IntPtr selection, IntPtr target, IntPtr property, uint time);

		static void SendSelectionNotify_cb (IntPtr inst, IntPtr requestor, IntPtr selection, IntPtr target, IntPtr property, uint time)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnSendSelectionNotify (GLib.Object.GetObject(requestor) as Gdk.Window, selection == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (selection, typeof (Gdk.Atom), false), target == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (target, typeof (Gdk.Atom), false), property == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (property, typeof (Gdk.Atom), false), time);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideSendSelectionNotify")]
		protected virtual void OnSendSelectionNotify (Gdk.Window requestor, Gdk.Atom selection, Gdk.Atom target, Gdk.Atom property, uint time)
		{
			InternalSendSelectionNotify (requestor, selection, target, property, time);
		}

		private void InternalSendSelectionNotify (Gdk.Window requestor, Gdk.Atom selection, Gdk.Atom target, Gdk.Atom property, uint time)
		{
			SendSelectionNotifyNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SendSelectionNotify;
			if (unmanaged == null) return;

			unmanaged (this.Handle, requestor == null ? IntPtr.Zero : requestor.Handle, selection == null ? IntPtr.Zero : selection.Handle, target == null ? IntPtr.Zero : target.Handle, property == null ? IntPtr.Zero : property.Handle, time);
		}

		static GetSelectionPropertyNativeDelegate GetSelectionProperty_cb_delegate;
		static GetSelectionPropertyNativeDelegate GetSelectionPropertyVMCallback {
			get {
				if (GetSelectionProperty_cb_delegate == null)
					GetSelectionProperty_cb_delegate = new GetSelectionPropertyNativeDelegate (GetSelectionProperty_cb);
				return GetSelectionProperty_cb_delegate;
			}
		}

		static void OverrideGetSelectionProperty (GLib.GType gtype)
		{
			OverrideGetSelectionProperty (gtype, GetSelectionPropertyVMCallback);
		}

		static void OverrideGetSelectionProperty (GLib.GType gtype, GetSelectionPropertyNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetSelectionProperty = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetSelectionPropertyNativeDelegate (IntPtr inst, IntPtr requestor, out byte data, IntPtr type, out int format);

		static int GetSelectionProperty_cb (IntPtr inst, IntPtr requestor, out byte data, IntPtr type, out int format)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				int __result;
				__result = __obj.OnGetSelectionProperty (GLib.Object.GetObject(requestor) as Gdk.Window, out data, type == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (type, typeof (Gdk.Atom), false), out format);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideGetSelectionProperty")]
		protected virtual int OnGetSelectionProperty (Gdk.Window requestor, out byte data, Gdk.Atom type, out int format)
		{
			return InternalGetSelectionProperty (requestor, out data, type, out format);
		}

		private int InternalGetSelectionProperty (Gdk.Window requestor, out byte data, Gdk.Atom type, out int format)
		{
			GetSelectionPropertyNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetSelectionProperty;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			int __result = unmanaged (this.Handle, requestor == null ? IntPtr.Zero : requestor.Handle, out data, type == null ? IntPtr.Zero : type.Handle, out format);
			return __result;
		}

		static ConvertSelectionNativeDelegate ConvertSelection_cb_delegate;
		static ConvertSelectionNativeDelegate ConvertSelectionVMCallback {
			get {
				if (ConvertSelection_cb_delegate == null)
					ConvertSelection_cb_delegate = new ConvertSelectionNativeDelegate (ConvertSelection_cb);
				return ConvertSelection_cb_delegate;
			}
		}

		static void OverrideConvertSelection (GLib.GType gtype)
		{
			OverrideConvertSelection (gtype, ConvertSelectionVMCallback);
		}

		static void OverrideConvertSelection (GLib.GType gtype, ConvertSelectionNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.ConvertSelection = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ConvertSelectionNativeDelegate (IntPtr inst, IntPtr requestor, IntPtr selection, IntPtr target, uint time);

		static void ConvertSelection_cb (IntPtr inst, IntPtr requestor, IntPtr selection, IntPtr target, uint time)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnConvertSelection (GLib.Object.GetObject(requestor) as Gdk.Window, selection == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (selection, typeof (Gdk.Atom), false), target == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (target, typeof (Gdk.Atom), false), time);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideConvertSelection")]
		protected virtual void OnConvertSelection (Gdk.Window requestor, Gdk.Atom selection, Gdk.Atom target, uint time)
		{
			InternalConvertSelection (requestor, selection, target, time);
		}

		private void InternalConvertSelection (Gdk.Window requestor, Gdk.Atom selection, Gdk.Atom target, uint time)
		{
			ConvertSelectionNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ConvertSelection;
			if (unmanaged == null) return;

			unmanaged (this.Handle, requestor == null ? IntPtr.Zero : requestor.Handle, selection == null ? IntPtr.Zero : selection.Handle, target == null ? IntPtr.Zero : target.Handle, time);
		}

		static TextPropertyToUtf8ListNativeDelegate TextPropertyToUtf8List_cb_delegate;
		static TextPropertyToUtf8ListNativeDelegate TextPropertyToUtf8ListVMCallback {
			get {
				if (TextPropertyToUtf8List_cb_delegate == null)
					TextPropertyToUtf8List_cb_delegate = new TextPropertyToUtf8ListNativeDelegate (TextPropertyToUtf8List_cb);
				return TextPropertyToUtf8List_cb_delegate;
			}
		}

		static void OverrideTextPropertyToUtf8List (GLib.GType gtype)
		{
			OverrideTextPropertyToUtf8List (gtype, TextPropertyToUtf8ListVMCallback);
		}

		static void OverrideTextPropertyToUtf8List (GLib.GType gtype, TextPropertyToUtf8ListNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.TextPropertyToUtf8List = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int TextPropertyToUtf8ListNativeDelegate (IntPtr inst, IntPtr encoding, int format, out byte text, int length, IntPtr list);

		static int TextPropertyToUtf8List_cb (IntPtr inst, IntPtr encoding, int format, out byte text, int length, IntPtr list)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				int __result;
				__result = __obj.OnTextPropertyToUtf8List (encoding == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (encoding, typeof (Gdk.Atom), false), format, out text, length, GLib.Marshaller.PtrToStringGFree(list));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideTextPropertyToUtf8List")]
		protected virtual int OnTextPropertyToUtf8List (Gdk.Atom encoding, int format, out byte text, int length, string list)
		{
			return InternalTextPropertyToUtf8List (encoding, format, out text, length, list);
		}

		private int InternalTextPropertyToUtf8List (Gdk.Atom encoding, int format, out byte text, int length, string list)
		{
			TextPropertyToUtf8ListNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).TextPropertyToUtf8List;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			int __result = unmanaged (this.Handle, encoding == null ? IntPtr.Zero : encoding.Handle, format, out text, length, GLib.Marshaller.StringToPtrGStrdup(list));
			return __result;
		}

		static Utf8ToStringTargetNativeDelegate Utf8ToStringTarget_cb_delegate;
		static Utf8ToStringTargetNativeDelegate Utf8ToStringTargetVMCallback {
			get {
				if (Utf8ToStringTarget_cb_delegate == null)
					Utf8ToStringTarget_cb_delegate = new Utf8ToStringTargetNativeDelegate (Utf8ToStringTarget_cb);
				return Utf8ToStringTarget_cb_delegate;
			}
		}

		static void OverrideUtf8ToStringTarget (GLib.GType gtype)
		{
			OverrideUtf8ToStringTarget (gtype, Utf8ToStringTargetVMCallback);
		}

		static void OverrideUtf8ToStringTarget (GLib.GType gtype, Utf8ToStringTargetNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.Utf8ToStringTarget = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr Utf8ToStringTargetNativeDelegate (IntPtr inst, IntPtr text);

		static IntPtr Utf8ToStringTarget_cb (IntPtr inst, IntPtr text)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				string __result;
				__result = __obj.OnUtf8ToStringTarget (GLib.Marshaller.Utf8PtrToString (text));
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideUtf8ToStringTarget")]
		protected virtual string OnUtf8ToStringTarget (string text)
		{
			return InternalUtf8ToStringTarget (text);
		}

		private string InternalUtf8ToStringTarget (string text)
		{
			Utf8ToStringTargetNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Utf8ToStringTarget;
			if (unmanaged == null) return null;

			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			IntPtr __result = unmanaged (this.Handle, native_text);
			GLib.Marshaller.Free (native_text);
			return GLib.Marshaller.PtrToStringGFree(__result);
		}

		static ClosedNativeDelegate Closed_cb_delegate;
		static ClosedNativeDelegate ClosedVMCallback {
			get {
				if (Closed_cb_delegate == null)
					Closed_cb_delegate = new ClosedNativeDelegate (Closed_cb);
				return Closed_cb_delegate;
			}
		}

		static void OverrideClosed (GLib.GType gtype)
		{
			OverrideClosed (gtype, ClosedVMCallback);
		}

		static void OverrideClosed (GLib.GType gtype, ClosedNativeDelegate callback)
		{
			GdkDisplayClass class_iface = GetClassStruct (gtype, false);
			class_iface.Closed = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClosedNativeDelegate (IntPtr inst, bool is_error);

		static void Closed_cb (IntPtr inst, bool is_error)
		{
			try {
				Display __obj = GLib.Object.GetObject (inst, false) as Display;
				__obj.OnClosed (is_error);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideClosed")]
		protected virtual void OnClosed (bool is_error)
		{
			InternalClosed (is_error);
		}

		private void InternalClosed (bool is_error)
		{
			ClosedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Closed;
			if (unmanaged == null) return;

			unmanaged (this.Handle, is_error);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GdkDisplayClass {
			public GLib.GType WindowType;
			public GetNameNativeDelegate GetName;
			public GetNScreensNativeDelegate GetNScreens;
			public GetScreenNativeDelegate GetScreen;
			public GetDefaultScreenNativeDelegate GetDefaultScreen;
			public BeepNativeDelegate Beep;
			public SyncNativeDelegate Sync;
			public FlushNativeDelegate Flush;
			public HasPendingNativeDelegate HasPending;
			public QueueEventsNativeDelegate QueueEvents;
			public GetDefaultGroupNativeDelegate GetDefaultGroup;
			public SupportsSelectionNotificationNativeDelegate SupportsSelectionNotification;
			public RequestSelectionNotificationNativeDelegate RequestSelectionNotification;
			public SupportsShapesNativeDelegate SupportsShapes;
			public SupportsInputShapesNativeDelegate SupportsInputShapes;
			public SupportsCompositeNativeDelegate SupportsComposite;
			public SupportsCursorAlphaNativeDelegate SupportsCursorAlpha;
			public SupportsCursorColorNativeDelegate SupportsCursorColor;
			public SupportsClipboardPersistenceNativeDelegate SupportsClipboardPersistence;
			public StoreClipboardNativeDelegate StoreClipboard;
			public GetDefaultCursorSizeNativeDelegate GetDefaultCursorSize;
			public GetMaximalCursorSizeNativeDelegate GetMaximalCursorSize;
			public GetCursorForTypeNativeDelegate GetCursorForType;
			public GetCursorForNameNativeDelegate GetCursorForName;
			public GetCursorForPixbufNativeDelegate GetCursorForPixbuf;
			public ListDevicesNativeDelegate ListDevices;
			public GetAppLaunchContextNativeDelegate GetAppLaunchContext;
			public BeforeProcessAllUpdatesNativeDelegate BeforeProcessAllUpdates;
			public AfterProcessAllUpdatesNativeDelegate AfterProcessAllUpdates;
			public GetNextSerialNativeDelegate GetNextSerial;
			public NotifyStartupCompleteNativeDelegate NotifyStartupComplete;
			public EventDataCopyNativeDelegate EventDataCopy;
			public EventDataFreeNativeDelegate EventDataFree;
			public CreateWindowImplNativeDelegate CreateWindowImpl;
			public GetKeymapNativeDelegate GetKeymap;
			public PushErrorTrapNativeDelegate PushErrorTrap;
			public PopErrorTrapNativeDelegate PopErrorTrap;
			public GetSelectionOwnerNativeDelegate GetSelectionOwner;
			public SetSelectionOwnerNativeDelegate SetSelectionOwner;
			public SendSelectionNotifyNativeDelegate SendSelectionNotify;
			public GetSelectionPropertyNativeDelegate GetSelectionProperty;
			public ConvertSelectionNativeDelegate ConvertSelection;
			public TextPropertyToUtf8ListNativeDelegate TextPropertyToUtf8List;
			public Utf8ToStringTargetNativeDelegate Utf8ToStringTarget;
			public ClosedNativeDelegate Closed;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GdkDisplayClass> class_structs;

		static GdkDisplayClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GdkDisplayClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GdkDisplayClass class_struct = (GdkDisplayClass) Marshal.PtrToStructure (class_ptr, typeof (GdkDisplayClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GdkDisplayClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_beep(IntPtr raw);

		public void Beep() {
			gdk_display_beep(Handle);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_close(IntPtr raw);

		public void Close() {
			gdk_display_close(Handle);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_device_is_grabbed(IntPtr raw, IntPtr device);

		public bool DeviceIsGrabbed(Gdk.Device device) {
			bool raw_ret = gdk_display_device_is_grabbed(Handle, device == null ? IntPtr.Zero : device.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_flush(IntPtr raw);

		public void Flush() {
			gdk_display_flush(Handle);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_app_launch_context(IntPtr raw);

		public Gdk.AppLaunchContext AppLaunchContext { 
			get {
				IntPtr raw_ret = gdk_display_get_app_launch_context(Handle);
				Gdk.AppLaunchContext ret = GLib.Object.GetObject(raw_ret) as Gdk.AppLaunchContext;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_default();

		public static Gdk.Display Default { 
			get {
				IntPtr raw_ret = gdk_display_get_default();
				Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gdk_display_get_default_cursor_size(IntPtr raw);

		public uint DefaultCursorSize { 
			get {
				uint raw_ret = gdk_display_get_default_cursor_size(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_default_group(IntPtr raw);

		public Gdk.Window DefaultGroup { 
			get {
				IntPtr raw_ret = gdk_display_get_default_group(Handle);
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_default_screen(IntPtr raw);

		public Gdk.Screen DefaultScreen { 
			get {
				IntPtr raw_ret = gdk_display_get_default_screen(Handle);
				Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_device_manager(IntPtr raw);

		public Gdk.DeviceManager DeviceManager { 
			get {
				IntPtr raw_ret = gdk_display_get_device_manager(Handle);
				Gdk.DeviceManager ret = GLib.Object.GetObject(raw_ret) as Gdk.DeviceManager;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_event(IntPtr raw);

		public Gdk.Event Event { 
			get {
				IntPtr raw_ret = gdk_display_get_event(Handle);
				Gdk.Event ret = Gdk.Event.GetEvent (raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_get_maximal_cursor_size(IntPtr raw, out uint width, out uint height);

		public void GetMaximalCursorSize(out uint width, out uint height) {
			gdk_display_get_maximal_cursor_size(Handle, out width, out height);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_display_get_n_screens(IntPtr raw);

		public int NScreens { 
			get {
				int raw_ret = gdk_display_get_n_screens(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = gdk_display_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_screen(IntPtr raw, int screen_num);

		public Gdk.Screen GetScreen(int screen_num) {
			IntPtr raw_ret = gdk_display_get_screen(Handle, screen_num);
			Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdk_display_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_window_at_pointer(IntPtr raw, out int win_x, out int win_y);

		[Obsolete]
		public Gdk.Window GetWindowAtPointer(out int win_x, out int win_y) {
			IntPtr raw_ret = gdk_display_get_window_at_pointer(Handle, out win_x, out win_y);
			Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_has_pending(IntPtr raw);

		public bool HasPending { 
			get {
				bool raw_ret = gdk_display_has_pending(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_is_closed(IntPtr raw);

		public bool IsClosed { 
			get {
				bool raw_ret = gdk_display_is_closed(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_keyboard_ungrab(IntPtr raw, uint time_);

		[Obsolete]
		public void KeyboardUngrab(uint time_) {
			gdk_display_keyboard_ungrab(Handle, time_);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_notify_startup_complete(IntPtr raw, IntPtr startup_id);

		public void NotifyStartupComplete(string startup_id) {
			IntPtr native_startup_id = GLib.Marshaller.StringToPtrGStrdup (startup_id);
			gdk_display_notify_startup_complete(Handle, native_startup_id);
			GLib.Marshaller.Free (native_startup_id);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_open(IntPtr display_name);

		public static Gdk.Display Open(string display_name) {
			IntPtr native_display_name = GLib.Marshaller.StringToPtrGStrdup (display_name);
			IntPtr raw_ret = gdk_display_open(native_display_name);
			Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
			GLib.Marshaller.Free (native_display_name);
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_open_default_libgtk_only();

		public static Gdk.Display OpenDefaultLibgtkOnly() {
			IntPtr raw_ret = gdk_display_open_default_libgtk_only();
			Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_peek_event(IntPtr raw);

		public Gdk.Event PeekEvent() {
			IntPtr raw_ret = gdk_display_peek_event(Handle);
			Gdk.Event ret = Gdk.Event.GetEvent (raw_ret);
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_pointer_is_grabbed(IntPtr raw);

		[Obsolete]
		public bool PointerIsGrabbed() {
			bool raw_ret = gdk_display_pointer_is_grabbed(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_pointer_ungrab(IntPtr raw, uint time_);

		[Obsolete]
		public void PointerUngrab(uint time_) {
			gdk_display_pointer_ungrab(Handle, time_);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_put_event(IntPtr raw, IntPtr evnt);

		public void PutEvent(Gdk.Event evnt) {
			gdk_display_put_event(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_request_selection_notification(IntPtr raw, IntPtr selection);

		public bool RequestSelectionNotification(Gdk.Atom selection) {
			bool raw_ret = gdk_display_request_selection_notification(Handle, selection == null ? IntPtr.Zero : selection.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_set_double_click_distance(IntPtr raw, uint distance);

		public uint DoubleClickDistance { 
			set {
				gdk_display_set_double_click_distance(Handle, value);
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_set_double_click_time(IntPtr raw, uint msec);

		public uint DoubleClickTime { 
			set {
				gdk_display_set_double_click_time(Handle, value);
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_store_clipboard(IntPtr raw, IntPtr clipboard_window, uint time_, IntPtr targets, int n_targets);

		public void StoreClipboard(Gdk.Window clipboard_window, uint time_, Gdk.Atom targets, int n_targets) {
			gdk_display_store_clipboard(Handle, clipboard_window == null ? IntPtr.Zero : clipboard_window.Handle, time_, targets == null ? IntPtr.Zero : targets.Handle, n_targets);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_clipboard_persistence(IntPtr raw);

		public bool SupportsClipboardPersistence() {
			bool raw_ret = gdk_display_supports_clipboard_persistence(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_composite(IntPtr raw);

		public bool SupportsComposite { 
			get {
				bool raw_ret = gdk_display_supports_composite(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_cursor_alpha(IntPtr raw);

		public bool SupportsCursorAlpha() {
			bool raw_ret = gdk_display_supports_cursor_alpha(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_cursor_color(IntPtr raw);

		public bool SupportsCursorColor() {
			bool raw_ret = gdk_display_supports_cursor_color(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_input_shapes(IntPtr raw);

		public bool SupportsInputShapes { 
			get {
				bool raw_ret = gdk_display_supports_input_shapes(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_selection_notification(IntPtr raw);

		public bool SupportsSelectionNotification() {
			bool raw_ret = gdk_display_supports_selection_notification(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_shapes(IntPtr raw);

		public bool SupportsShapes { 
			get {
				bool raw_ret = gdk_display_supports_shapes(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_sync(IntPtr raw);

		public void Sync() {
			gdk_display_sync(Handle);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_warp_pointer(IntPtr raw, IntPtr screen, int x, int y);

		[Obsolete]
		public void WarpPointer(Gdk.Screen screen, int x, int y) {
			gdk_display_warp_pointer(Handle, screen == null ? IntPtr.Zero : screen.Handle, x, y);
		}

#endregion
	}
}
