// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ProgressBar : Gtk.Widget, Gtk.IOrientable {

		public ProgressBar (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_progress_bar_new();

		public ProgressBar () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ProgressBar)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_progress_bar_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_progress_bar_get_inverted(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_inverted(IntPtr raw, bool inverted);

		[GLib.Property ("inverted")]
		public bool Inverted {
			get  {
				bool raw_ret = gtk_progress_bar_get_inverted(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_progress_bar_set_inverted(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_progress_bar_get_fraction(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_fraction(IntPtr raw, double fraction);

		[GLib.Property ("fraction")]
		public double Fraction {
			get  {
				double raw_ret = gtk_progress_bar_get_fraction(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				gtk_progress_bar_set_fraction(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_progress_bar_get_pulse_step(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_pulse_step(IntPtr raw, double fraction);

		[GLib.Property ("pulse-step")]
		public double PulseStep {
			get  {
				double raw_ret = gtk_progress_bar_get_pulse_step(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				gtk_progress_bar_set_pulse_step(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_progress_bar_get_text(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_text(IntPtr raw, IntPtr text);

		[GLib.Property ("text")]
		public string Text {
			get  {
				IntPtr raw_ret = gtk_progress_bar_get_text(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_progress_bar_set_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_progress_bar_get_show_text(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_show_text(IntPtr raw, bool show_text);

		[GLib.Property ("show-text")]
		public bool ShowText {
			get  {
				bool raw_ret = gtk_progress_bar_get_show_text(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_progress_bar_set_show_text(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_progress_bar_get_ellipsize(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_ellipsize(IntPtr raw, int mode);

		[GLib.Property ("ellipsize")]
		public Pango.EllipsizeMode Ellipsize {
			get  {
				int raw_ret = gtk_progress_bar_get_ellipsize(Handle);
				Pango.EllipsizeMode ret = (Pango.EllipsizeMode) raw_ret;
				return ret;
			}
			set  {
				gtk_progress_bar_set_ellipsize(Handle, (int) value);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkProgressBarClass {
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Widget)).GetClassSize ();
		static Dictionary<GLib.GType, GtkProgressBarClass> class_structs;

		static GtkProgressBarClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkProgressBarClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkProgressBarClass class_struct = (GtkProgressBarClass) Marshal.PtrToStructure (class_ptr, typeof (GtkProgressBarClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkProgressBarClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_progress_bar_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_progress_bar_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_pulse(IntPtr raw);

		public void Pulse() {
			gtk_progress_bar_pulse(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_orientable_get_orientation(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_orientable_set_orientation(IntPtr raw, int orientation);

		[GLib.Property ("orientation")]
		public Gtk.Orientation Orientation {
			get  {
				int raw_ret = gtk_orientable_get_orientation(Handle);
				Gtk.Orientation ret = (Gtk.Orientation) raw_ret;
				return ret;
			}
			set  {
				gtk_orientable_set_orientation(Handle, (int) value);
			}
		}

#endregion
	}
}
