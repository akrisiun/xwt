// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DBusAuthObserver : GLib.Object {

		public DBusAuthObserver (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_auth_observer_new();

		public DBusAuthObserver () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusAuthObserver)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = g_dbus_auth_observer_new();
		}

		[GLib.Signal("authorize-authenticated-peer")]
		public event GLib.AuthenticatedPeerAuthorizedHandler AuthenticatedPeerAuthorized {
			add {
				this.AddSignalHandler ("authorize-authenticated-peer", value, typeof (GLib.AuthenticatedPeerAuthorizedArgs));
			}
			remove {
				this.RemoveSignalHandler ("authorize-authenticated-peer", value);
			}
		}

		static AuthenticatedPeerAuthorizedNativeDelegate AuthenticatedPeerAuthorized_cb_delegate;
		static AuthenticatedPeerAuthorizedNativeDelegate AuthenticatedPeerAuthorizedVMCallback {
			get {
				if (AuthenticatedPeerAuthorized_cb_delegate == null)
					AuthenticatedPeerAuthorized_cb_delegate = new AuthenticatedPeerAuthorizedNativeDelegate (AuthenticatedPeerAuthorized_cb);
				return AuthenticatedPeerAuthorized_cb_delegate;
			}
		}

		static void OverrideAuthenticatedPeerAuthorized (GLib.GType gtype)
		{
			OverrideAuthenticatedPeerAuthorized (gtype, AuthenticatedPeerAuthorizedVMCallback);
		}

		static void OverrideAuthenticatedPeerAuthorized (GLib.GType gtype, AuthenticatedPeerAuthorizedNativeDelegate callback)
		{
			GDBusAuthObserverClass class_iface = GetClassStruct (gtype, false);
			class_iface.AuthenticatedPeerAuthorized = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool AuthenticatedPeerAuthorizedNativeDelegate (IntPtr inst, IntPtr stream, IntPtr credentials);

		static bool AuthenticatedPeerAuthorized_cb (IntPtr inst, IntPtr stream, IntPtr credentials)
		{
			try {
				DBusAuthObserver __obj = GLib.Object.GetObject (inst, false) as DBusAuthObserver;
				bool __result;
				__result = __obj.OnAuthenticatedPeerAuthorized (GLib.Object.GetObject(stream) as GLib.IOStream, GLib.Object.GetObject(credentials) as GLib.Credentials);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.DBusAuthObserver), ConnectionMethod="OverrideAuthenticatedPeerAuthorized")]
		protected virtual bool OnAuthenticatedPeerAuthorized (GLib.IOStream stream, GLib.Credentials credentials)
		{
			return InternalAuthenticatedPeerAuthorized (stream, credentials);
		}

		private bool InternalAuthenticatedPeerAuthorized (GLib.IOStream stream, GLib.Credentials credentials)
		{
			AuthenticatedPeerAuthorizedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).AuthenticatedPeerAuthorized;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, stream == null ? IntPtr.Zero : stream.Handle, credentials == null ? IntPtr.Zero : credentials.Handle);
			return __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GDBusAuthObserverClass {
			public AuthenticatedPeerAuthorizedNativeDelegate AuthenticatedPeerAuthorized;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GDBusAuthObserverClass> class_structs;

		static GDBusAuthObserverClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GDBusAuthObserverClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GDBusAuthObserverClass class_struct = (GDBusAuthObserverClass) Marshal.PtrToStructure (class_ptr, typeof (GDBusAuthObserverClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GDBusAuthObserverClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_auth_observer_authorize_authenticated_peer(IntPtr raw, IntPtr stream, IntPtr credentials);

		public bool AuthorizeAuthenticatedPeer(GLib.IOStream stream, GLib.Credentials credentials) {
			bool raw_ret = g_dbus_auth_observer_authorize_authenticated_peer(Handle, stream == null ? IntPtr.Zero : stream.Handle, credentials == null ? IntPtr.Zero : credentials.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_auth_observer_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_dbus_auth_observer_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
