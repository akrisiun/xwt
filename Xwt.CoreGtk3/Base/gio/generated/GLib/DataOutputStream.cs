// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DataOutputStream : GLib.FilterOutputStream {

		public DataOutputStream (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_data_output_stream_new(IntPtr base_stream);

		public DataOutputStream (GLib.OutputStream base_stream) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DataOutputStream)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (base_stream != null) {
					names.Add ("base_stream");
					vals.Add (new GLib.Value (base_stream));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = g_data_output_stream_new(base_stream == null ? IntPtr.Zero : base_stream.Handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_data_output_stream_get_byte_order(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_data_output_stream_set_byte_order(IntPtr raw, int order);

		[GLib.Property ("byte-order")]
		public GLib.DataStreamByteOrder ByteOrder {
			get  {
				int raw_ret = g_data_output_stream_get_byte_order(Handle);
				GLib.DataStreamByteOrder ret = (GLib.DataStreamByteOrder) raw_ret;
				return ret;
			}
			set  {
				g_data_output_stream_set_byte_order(Handle, (int) value);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GDataOutputStreamClass {
			IntPtr GReserved1;
			IntPtr GReserved2;
			IntPtr GReserved3;
			IntPtr GReserved4;
			IntPtr GReserved5;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.FilterOutputStream)).GetClassSize ();
		static Dictionary<GLib.GType, GDataOutputStreamClass> class_structs;

		static GDataOutputStreamClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GDataOutputStreamClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GDataOutputStreamClass class_struct = (GDataOutputStreamClass) Marshal.PtrToStructure (class_ptr, typeof (GDataOutputStreamClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GDataOutputStreamClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_data_output_stream_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_data_output_stream_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_data_output_stream_put_byte(IntPtr raw, byte data, IntPtr cancellable, out IntPtr error);

		public unsafe bool PutByte(byte data, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_data_output_stream_put_byte(Handle, data, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_data_output_stream_put_int16(IntPtr raw, short data, IntPtr cancellable, out IntPtr error);

		public unsafe bool PutInt16(short data, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_data_output_stream_put_int16(Handle, data, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_data_output_stream_put_int32(IntPtr raw, int data, IntPtr cancellable, out IntPtr error);

		public unsafe bool PutInt32(int data, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_data_output_stream_put_int32(Handle, data, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_data_output_stream_put_int64(IntPtr raw, long data, IntPtr cancellable, out IntPtr error);

		public unsafe bool PutInt64(long data, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_data_output_stream_put_int64(Handle, data, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_data_output_stream_put_string(IntPtr raw, IntPtr str, IntPtr cancellable, out IntPtr error);

		public unsafe bool PutString(string str, GLib.Cancellable cancellable) {
			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_data_output_stream_put_string(Handle, native_str, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_data_output_stream_put_uint16(IntPtr raw, ushort data, IntPtr cancellable, out IntPtr error);

		public unsafe bool PutUint16(ushort data, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_data_output_stream_put_uint16(Handle, data, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_data_output_stream_put_uint32(IntPtr raw, uint data, IntPtr cancellable, out IntPtr error);

		public unsafe bool PutUint32(uint data, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_data_output_stream_put_uint32(Handle, data, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_data_output_stream_put_uint64(IntPtr raw, ulong data, IntPtr cancellable, out IntPtr error);

		public unsafe bool PutUint64(ulong data, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_data_output_stream_put_uint64(Handle, data, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
