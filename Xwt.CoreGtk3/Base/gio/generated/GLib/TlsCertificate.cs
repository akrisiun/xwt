// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TlsCertificate : GLib.Object {

		public TlsCertificate (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_tls_certificate_new_from_file(IntPtr file, out IntPtr error);

		public unsafe TlsCertificate (string file) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TlsCertificate)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_file = GLib.Marshaller.StringToPtrGStrdup (file);
			IntPtr error = IntPtr.Zero;
			Raw = g_tls_certificate_new_from_file(native_file, out error);
			GLib.Marshaller.Free (native_file);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_tls_certificate_new_from_files(IntPtr cert_file, IntPtr key_file, out IntPtr error);

		public unsafe TlsCertificate (string cert_file, string key_file) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TlsCertificate)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_cert_file = GLib.Marshaller.StringToPtrGStrdup (cert_file);
			IntPtr native_key_file = GLib.Marshaller.StringToPtrGStrdup (key_file);
			IntPtr error = IntPtr.Zero;
			Raw = g_tls_certificate_new_from_files(native_cert_file, native_key_file, out error);
			GLib.Marshaller.Free (native_cert_file);
			GLib.Marshaller.Free (native_key_file);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_tls_certificate_new_from_pem(IntPtr data, IntPtr length, out IntPtr error);

		public static unsafe TlsCertificate NewFromPem(string data)
		{
			IntPtr native_data = GLib.Marshaller.StringToPtrGStrdup (data);
			IntPtr error = IntPtr.Zero;
			TlsCertificate result = new TlsCertificate (g_tls_certificate_new_from_pem(native_data, new IntPtr ((long) System.Text.Encoding.UTF8.GetByteCount (data)), out error));
			GLib.Marshaller.Free (native_data);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return result;
		}

		[GLib.Property ("certificate")]
		public IntPtr Certificate {
			get {
				GLib.Value val = GetProperty ("certificate");
				IntPtr ret = (IntPtr) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("certificate-pem")]
		public string CertificatePem {
			get {
				GLib.Value val = GetProperty ("certificate-pem");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_tls_certificate_get_issuer(IntPtr raw);

		[GLib.Property ("issuer")]
		public GLib.TlsCertificate Issuer {
			get  {
				IntPtr raw_ret = g_tls_certificate_get_issuer(Handle);
				GLib.TlsCertificate ret = GLib.Object.GetObject(raw_ret) as GLib.TlsCertificate;
				return ret;
			}
		}

		static VerifyNativeDelegate Verify_cb_delegate;
		static VerifyNativeDelegate VerifyVMCallback {
			get {
				if (Verify_cb_delegate == null)
					Verify_cb_delegate = new VerifyNativeDelegate (Verify_cb);
				return Verify_cb_delegate;
			}
		}

		static void OverrideVerify (GLib.GType gtype)
		{
			OverrideVerify (gtype, VerifyVMCallback);
		}

		static void OverrideVerify (GLib.GType gtype, VerifyNativeDelegate callback)
		{
			GTlsCertificateClass class_iface = GetClassStruct (gtype, false);
			class_iface.Verify = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int VerifyNativeDelegate (IntPtr inst, IntPtr identity, IntPtr trusted_ca);

		static int Verify_cb (IntPtr inst, IntPtr identity, IntPtr trusted_ca)
		{
			try {
				TlsCertificate __obj = GLib.Object.GetObject (inst, false) as TlsCertificate;
				GLib.TlsCertificateFlags __result;
				__result = __obj.OnVerify (GLib.SocketConnectableAdapter.GetObject (identity, false), GLib.Object.GetObject(trusted_ca) as GLib.TlsCertificate);
				return (int) __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.TlsCertificate), ConnectionMethod="OverrideVerify")]
		protected virtual GLib.TlsCertificateFlags OnVerify (GLib.ISocketConnectable identity, GLib.TlsCertificate trusted_ca)
		{
			return InternalVerify (identity, trusted_ca);
		}

		private GLib.TlsCertificateFlags InternalVerify (GLib.ISocketConnectable identity, GLib.TlsCertificate trusted_ca)
		{
			VerifyNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Verify;
			if (unmanaged == null) return (GLib.TlsCertificateFlags) 0;

			int __result = unmanaged (this.Handle, identity == null ? IntPtr.Zero : ((identity is GLib.Object) ? (identity as GLib.Object).Handle : (identity as GLib.SocketConnectableAdapter).Handle), trusted_ca == null ? IntPtr.Zero : trusted_ca.Handle);
			return (GLib.TlsCertificateFlags) __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GTlsCertificateClass {
			public VerifyNativeDelegate Verify;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=8)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GTlsCertificateClass> class_structs;

		static GTlsCertificateClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GTlsCertificateClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GTlsCertificateClass class_struct = (GTlsCertificateClass) Marshal.PtrToStructure (class_ptr, typeof (GTlsCertificateClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GTlsCertificateClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_tls_certificate_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_tls_certificate_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_tls_certificate_list_new_from_file(IntPtr file, out IntPtr error);

		public static unsafe GLib.TlsCertificate[] ListNewFromFile(string file) {
			IntPtr native_file = GLib.Marshaller.StringToPtrGStrdup (file);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_tls_certificate_list_new_from_file(native_file, out error);
			GLib.TlsCertificate[] ret = (GLib.TlsCertificate[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, true, typeof(GLib.TlsCertificate));
			GLib.Marshaller.Free (native_file);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_tls_certificate_verify(IntPtr raw, IntPtr identity, IntPtr trusted_ca);

		public GLib.TlsCertificateFlags Verify(GLib.ISocketConnectable identity, GLib.TlsCertificate trusted_ca) {
			int raw_ret = g_tls_certificate_verify(Handle, identity == null ? IntPtr.Zero : ((identity is GLib.Object) ? (identity as GLib.Object).Handle : (identity as GLib.SocketConnectableAdapter).Handle), trusted_ca == null ? IntPtr.Zero : trusted_ca.Handle);
			GLib.TlsCertificateFlags ret = (GLib.TlsCertificateFlags) raw_ret;
			return ret;
		}

#endregion
	}
}
