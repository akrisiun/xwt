// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Paned : Gtk.Container, Gtk.IOrientable {

		public Paned (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paned_new(int orientation);

		public Paned (Gtk.Orientation orientation) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Paned)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("orientation");
				vals.Add (new GLib.Value (orientation));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_paned_new((int) orientation);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_paned_get_position(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paned_set_position(IntPtr raw, int position);

		[GLib.Property ("position")]
		public int Position {
			get  {
				int raw_ret = gtk_paned_get_position(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_paned_set_position(Handle, value);
			}
		}

		[GLib.Property ("position-set")]
		public bool PositionSet {
			get {
				GLib.Value val = GetProperty ("position-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("position-set", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("min-position")]
		public int MinPosition {
			get {
				GLib.Value val = GetProperty ("min-position");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("max-position")]
		public int MaxPosition {
			get {
				GLib.Value val = GetProperty ("max-position");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		public class PanedChild : Gtk.Container.ContainerChild {
			protected internal PanedChild (Gtk.Container parent, Gtk.Widget child) : base (parent, child) {}

			[Gtk.ChildProperty ("resize")]
			public bool Resize {
				get {
					GLib.Value val = parent.ChildGetProperty (child, "resize");
					bool ret = (bool) val;
					val.Dispose ();
					return ret;
				}
				set {
					GLib.Value val = new GLib.Value(value);
					parent.ChildSetProperty(child, "resize", val);
					val.Dispose ();
				}
			}

			[Gtk.ChildProperty ("shrink")]
			public bool Shrink {
				get {
					GLib.Value val = parent.ChildGetProperty (child, "shrink");
					bool ret = (bool) val;
					val.Dispose ();
					return ret;
				}
				set {
					GLib.Value val = new GLib.Value(value);
					parent.ChildSetProperty(child, "shrink", val);
					val.Dispose ();
				}
			}

		}

		public override Gtk.Container.ContainerChild this [Gtk.Widget child] {
			get {
				return new PanedChild (this, child);
			}
		}

		[GLib.Signal("move-handle")]
		public event Gtk.MoveHandleHandler MoveHandle {
			add {
				this.AddSignalHandler ("move-handle", value, typeof (Gtk.MoveHandleArgs));
			}
			remove {
				this.RemoveSignalHandler ("move-handle", value);
			}
		}

		[GLib.Signal("cycle-child-focus")]
		public event Gtk.CycleChildFocusHandler CycleChildFocus {
			add {
				this.AddSignalHandler ("cycle-child-focus", value, typeof (Gtk.CycleChildFocusArgs));
			}
			remove {
				this.RemoveSignalHandler ("cycle-child-focus", value);
			}
		}

		[GLib.Signal("toggle-handle-focus")]
		public event Gtk.ToggleHandleFocusHandler ToggleHandleFocus {
			add {
				this.AddSignalHandler ("toggle-handle-focus", value, typeof (Gtk.ToggleHandleFocusArgs));
			}
			remove {
				this.RemoveSignalHandler ("toggle-handle-focus", value);
			}
		}

		[GLib.Signal("cancel-position")]
		public event Gtk.CancelPositionHandler CancelPosition {
			add {
				this.AddSignalHandler ("cancel-position", value, typeof (Gtk.CancelPositionArgs));
			}
			remove {
				this.RemoveSignalHandler ("cancel-position", value);
			}
		}

		[GLib.Signal("cycle-handle-focus")]
		public event Gtk.CycleHandleFocusHandler CycleHandleFocus {
			add {
				this.AddSignalHandler ("cycle-handle-focus", value, typeof (Gtk.CycleHandleFocusArgs));
			}
			remove {
				this.RemoveSignalHandler ("cycle-handle-focus", value);
			}
		}

		[GLib.Signal("accept-position")]
		public event Gtk.AcceptPositionHandler AcceptPosition {
			add {
				this.AddSignalHandler ("accept-position", value, typeof (Gtk.AcceptPositionArgs));
			}
			remove {
				this.RemoveSignalHandler ("accept-position", value);
			}
		}

		static CycleChildFocusNativeDelegate CycleChildFocus_cb_delegate;
		static CycleChildFocusNativeDelegate CycleChildFocusVMCallback {
			get {
				if (CycleChildFocus_cb_delegate == null)
					CycleChildFocus_cb_delegate = new CycleChildFocusNativeDelegate (CycleChildFocus_cb);
				return CycleChildFocus_cb_delegate;
			}
		}

		static void OverrideCycleChildFocus (GLib.GType gtype)
		{
			OverrideCycleChildFocus (gtype, CycleChildFocusVMCallback);
		}

		static void OverrideCycleChildFocus (GLib.GType gtype, CycleChildFocusNativeDelegate callback)
		{
			GtkPanedClass class_iface = GetClassStruct (gtype, false);
			class_iface.CycleChildFocus = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool CycleChildFocusNativeDelegate (IntPtr inst, bool reverse);

		static bool CycleChildFocus_cb (IntPtr inst, bool reverse)
		{
			try {
				Paned __obj = GLib.Object.GetObject (inst, false) as Paned;
				bool __result;
				__result = __obj.OnCycleChildFocus (reverse);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Paned), ConnectionMethod="OverrideCycleChildFocus")]
		protected virtual bool OnCycleChildFocus (bool reverse)
		{
			return InternalCycleChildFocus (reverse);
		}

		private bool InternalCycleChildFocus (bool reverse)
		{
			CycleChildFocusNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).CycleChildFocus;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, reverse);
			return __result;
		}

		static ToggleHandleFocusNativeDelegate ToggleHandleFocus_cb_delegate;
		static ToggleHandleFocusNativeDelegate ToggleHandleFocusVMCallback {
			get {
				if (ToggleHandleFocus_cb_delegate == null)
					ToggleHandleFocus_cb_delegate = new ToggleHandleFocusNativeDelegate (ToggleHandleFocus_cb);
				return ToggleHandleFocus_cb_delegate;
			}
		}

		static void OverrideToggleHandleFocus (GLib.GType gtype)
		{
			OverrideToggleHandleFocus (gtype, ToggleHandleFocusVMCallback);
		}

		static void OverrideToggleHandleFocus (GLib.GType gtype, ToggleHandleFocusNativeDelegate callback)
		{
			GtkPanedClass class_iface = GetClassStruct (gtype, false);
			class_iface.ToggleHandleFocus = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ToggleHandleFocusNativeDelegate (IntPtr inst);

		static bool ToggleHandleFocus_cb (IntPtr inst)
		{
			try {
				Paned __obj = GLib.Object.GetObject (inst, false) as Paned;
				bool __result;
				__result = __obj.OnToggleHandleFocus ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Paned), ConnectionMethod="OverrideToggleHandleFocus")]
		protected virtual bool OnToggleHandleFocus ()
		{
			return InternalToggleHandleFocus ();
		}

		private bool InternalToggleHandleFocus ()
		{
			ToggleHandleFocusNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ToggleHandleFocus;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static MoveHandleNativeDelegate MoveHandle_cb_delegate;
		static MoveHandleNativeDelegate MoveHandleVMCallback {
			get {
				if (MoveHandle_cb_delegate == null)
					MoveHandle_cb_delegate = new MoveHandleNativeDelegate (MoveHandle_cb);
				return MoveHandle_cb_delegate;
			}
		}

		static void OverrideMoveHandle (GLib.GType gtype)
		{
			OverrideMoveHandle (gtype, MoveHandleVMCallback);
		}

		static void OverrideMoveHandle (GLib.GType gtype, MoveHandleNativeDelegate callback)
		{
			GtkPanedClass class_iface = GetClassStruct (gtype, false);
			class_iface.MoveHandle = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool MoveHandleNativeDelegate (IntPtr inst, int scroll);

		static bool MoveHandle_cb (IntPtr inst, int scroll)
		{
			try {
				Paned __obj = GLib.Object.GetObject (inst, false) as Paned;
				bool __result;
				__result = __obj.OnMoveHandle ((Gtk.ScrollType) scroll);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Paned), ConnectionMethod="OverrideMoveHandle")]
		protected virtual bool OnMoveHandle (Gtk.ScrollType scroll)
		{
			return InternalMoveHandle (scroll);
		}

		private bool InternalMoveHandle (Gtk.ScrollType scroll)
		{
			MoveHandleNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).MoveHandle;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, (int) scroll);
			return __result;
		}

		static CycleHandleFocusNativeDelegate CycleHandleFocus_cb_delegate;
		static CycleHandleFocusNativeDelegate CycleHandleFocusVMCallback {
			get {
				if (CycleHandleFocus_cb_delegate == null)
					CycleHandleFocus_cb_delegate = new CycleHandleFocusNativeDelegate (CycleHandleFocus_cb);
				return CycleHandleFocus_cb_delegate;
			}
		}

		static void OverrideCycleHandleFocus (GLib.GType gtype)
		{
			OverrideCycleHandleFocus (gtype, CycleHandleFocusVMCallback);
		}

		static void OverrideCycleHandleFocus (GLib.GType gtype, CycleHandleFocusNativeDelegate callback)
		{
			GtkPanedClass class_iface = GetClassStruct (gtype, false);
			class_iface.CycleHandleFocus = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool CycleHandleFocusNativeDelegate (IntPtr inst, bool reverse);

		static bool CycleHandleFocus_cb (IntPtr inst, bool reverse)
		{
			try {
				Paned __obj = GLib.Object.GetObject (inst, false) as Paned;
				bool __result;
				__result = __obj.OnCycleHandleFocus (reverse);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Paned), ConnectionMethod="OverrideCycleHandleFocus")]
		protected virtual bool OnCycleHandleFocus (bool reverse)
		{
			return InternalCycleHandleFocus (reverse);
		}

		private bool InternalCycleHandleFocus (bool reverse)
		{
			CycleHandleFocusNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).CycleHandleFocus;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, reverse);
			return __result;
		}

		static AcceptPositionNativeDelegate AcceptPosition_cb_delegate;
		static AcceptPositionNativeDelegate AcceptPositionVMCallback {
			get {
				if (AcceptPosition_cb_delegate == null)
					AcceptPosition_cb_delegate = new AcceptPositionNativeDelegate (AcceptPosition_cb);
				return AcceptPosition_cb_delegate;
			}
		}

		static void OverrideAcceptPosition (GLib.GType gtype)
		{
			OverrideAcceptPosition (gtype, AcceptPositionVMCallback);
		}

		static void OverrideAcceptPosition (GLib.GType gtype, AcceptPositionNativeDelegate callback)
		{
			GtkPanedClass class_iface = GetClassStruct (gtype, false);
			class_iface.AcceptPosition = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool AcceptPositionNativeDelegate (IntPtr inst);

		static bool AcceptPosition_cb (IntPtr inst)
		{
			try {
				Paned __obj = GLib.Object.GetObject (inst, false) as Paned;
				bool __result;
				__result = __obj.OnAcceptPosition ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Paned), ConnectionMethod="OverrideAcceptPosition")]
		protected virtual bool OnAcceptPosition ()
		{
			return InternalAcceptPosition ();
		}

		private bool InternalAcceptPosition ()
		{
			AcceptPositionNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).AcceptPosition;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static CancelPositionNativeDelegate CancelPosition_cb_delegate;
		static CancelPositionNativeDelegate CancelPositionVMCallback {
			get {
				if (CancelPosition_cb_delegate == null)
					CancelPosition_cb_delegate = new CancelPositionNativeDelegate (CancelPosition_cb);
				return CancelPosition_cb_delegate;
			}
		}

		static void OverrideCancelPosition (GLib.GType gtype)
		{
			OverrideCancelPosition (gtype, CancelPositionVMCallback);
		}

		static void OverrideCancelPosition (GLib.GType gtype, CancelPositionNativeDelegate callback)
		{
			GtkPanedClass class_iface = GetClassStruct (gtype, false);
			class_iface.CancelPosition = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool CancelPositionNativeDelegate (IntPtr inst);

		static bool CancelPosition_cb (IntPtr inst)
		{
			try {
				Paned __obj = GLib.Object.GetObject (inst, false) as Paned;
				bool __result;
				__result = __obj.OnCancelPosition ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Paned), ConnectionMethod="OverrideCancelPosition")]
		protected virtual bool OnCancelPosition ()
		{
			return InternalCancelPosition ();
		}

		private bool InternalCancelPosition ()
		{
			CancelPositionNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).CancelPosition;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkPanedClass {
			public CycleChildFocusNativeDelegate CycleChildFocus;
			public ToggleHandleFocusNativeDelegate ToggleHandleFocus;
			public MoveHandleNativeDelegate MoveHandle;
			public CycleHandleFocusNativeDelegate CycleHandleFocus;
			public AcceptPositionNativeDelegate AcceptPosition;
			public CancelPositionNativeDelegate CancelPosition;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Container)).GetClassSize ();
		static Dictionary<GLib.GType, GtkPanedClass> class_structs;

		static GtkPanedClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkPanedClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkPanedClass class_struct = (GtkPanedClass) Marshal.PtrToStructure (class_ptr, typeof (GtkPanedClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkPanedClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paned_add1(IntPtr raw, IntPtr child);

		public void Add1(Gtk.Widget child) {
			gtk_paned_add1(Handle, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paned_add2(IntPtr raw, IntPtr child);

		public void Add2(Gtk.Widget child) {
			gtk_paned_add2(Handle, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paned_get_child1(IntPtr raw);

		public Gtk.Widget Child1 { 
			get {
				IntPtr raw_ret = gtk_paned_get_child1(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paned_get_child2(IntPtr raw);

		public Gtk.Widget Child2 { 
			get {
				IntPtr raw_ret = gtk_paned_get_child2(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paned_get_handle_window(IntPtr raw);

		public Gdk.Window HandleWindow { 
			get {
				IntPtr raw_ret = gtk_paned_get_handle_window(Handle);
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paned_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_paned_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paned_pack1(IntPtr raw, IntPtr child, bool resize, bool shrink);

		public void Pack1(Gtk.Widget child, bool resize, bool shrink) {
			gtk_paned_pack1(Handle, child == null ? IntPtr.Zero : child.Handle, resize, shrink);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paned_pack2(IntPtr raw, IntPtr child, bool resize, bool shrink);

		public void Pack2(Gtk.Widget child, bool resize, bool shrink) {
			gtk_paned_pack2(Handle, child == null ? IntPtr.Zero : child.Handle, resize, shrink);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_orientable_get_orientation(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_orientable_set_orientation(IntPtr raw, int orientation);

		[GLib.Property ("orientation")]
		public Gtk.Orientation Orientation {
			get  {
				int raw_ret = gtk_orientable_get_orientation(Handle);
				Gtk.Orientation ret = (Gtk.Orientation) raw_ret;
				return ret;
			}
			set  {
				gtk_orientable_set_orientation(Handle, (int) value);
			}
		}

#endregion
	}
}
