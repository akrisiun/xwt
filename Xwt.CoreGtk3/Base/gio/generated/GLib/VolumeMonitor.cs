// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class VolumeMonitor : GLib.Object {

		public VolumeMonitor (IntPtr raw) : base(raw) {}

		protected VolumeMonitor() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Signal("drive-changed")]
		public event GLib.DriveChangedHandler DriveChanged {
			add {
				this.AddSignalHandler ("drive-changed", value, typeof (GLib.DriveChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("drive-changed", value);
			}
		}

		[GLib.Signal("mount-changed")]
		public event GLib.MountChangedHandler MountChanged {
			add {
				this.AddSignalHandler ("mount-changed", value, typeof (GLib.MountChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("mount-changed", value);
			}
		}

		[GLib.Signal("mount-added")]
		public event GLib.MountAddedHandler MountAdded {
			add {
				this.AddSignalHandler ("mount-added", value, typeof (GLib.MountAddedArgs));
			}
			remove {
				this.RemoveSignalHandler ("mount-added", value);
			}
		}

		[GLib.Signal("drive-disconnected")]
		public event GLib.DriveDisconnectedHandler DriveDisconnected {
			add {
				this.AddSignalHandler ("drive-disconnected", value, typeof (GLib.DriveDisconnectedArgs));
			}
			remove {
				this.RemoveSignalHandler ("drive-disconnected", value);
			}
		}

		[GLib.Signal("volume-removed")]
		public event GLib.VolumeRemovedHandler VolumeRemoved {
			add {
				this.AddSignalHandler ("volume-removed", value, typeof (GLib.VolumeRemovedArgs));
			}
			remove {
				this.RemoveSignalHandler ("volume-removed", value);
			}
		}

		[GLib.Signal("drive-connected")]
		public event GLib.DriveConnectedHandler DriveConnected {
			add {
				this.AddSignalHandler ("drive-connected", value, typeof (GLib.DriveConnectedArgs));
			}
			remove {
				this.RemoveSignalHandler ("drive-connected", value);
			}
		}

		[GLib.Signal("mount-removed")]
		public event GLib.MountRemovedHandler MountRemoved {
			add {
				this.AddSignalHandler ("mount-removed", value, typeof (GLib.MountRemovedArgs));
			}
			remove {
				this.RemoveSignalHandler ("mount-removed", value);
			}
		}

		[GLib.Signal("volume-changed")]
		public event GLib.VolumeChangedHandler VolumeChanged {
			add {
				this.AddSignalHandler ("volume-changed", value, typeof (GLib.VolumeChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("volume-changed", value);
			}
		}

		[GLib.Signal("mount-pre-unmount")]
		public event GLib.MountPreUnmountHandler MountPreUnmount {
			add {
				this.AddSignalHandler ("mount-pre-unmount", value, typeof (GLib.MountPreUnmountArgs));
			}
			remove {
				this.RemoveSignalHandler ("mount-pre-unmount", value);
			}
		}

		[GLib.Signal("drive-eject-button")]
		public event GLib.DriveEjectButtonHandler DriveEjectButton {
			add {
				this.AddSignalHandler ("drive-eject-button", value, typeof (GLib.DriveEjectButtonArgs));
			}
			remove {
				this.RemoveSignalHandler ("drive-eject-button", value);
			}
		}

		[GLib.Signal("volume-added")]
		public event GLib.VolumeAddedHandler VolumeAdded {
			add {
				this.AddSignalHandler ("volume-added", value, typeof (GLib.VolumeAddedArgs));
			}
			remove {
				this.RemoveSignalHandler ("volume-added", value);
			}
		}

		[GLib.Signal("drive-stop-button")]
		public event GLib.DriveStopButtonHandler DriveStopButton {
			add {
				this.AddSignalHandler ("drive-stop-button", value, typeof (GLib.DriveStopButtonArgs));
			}
			remove {
				this.RemoveSignalHandler ("drive-stop-button", value);
			}
		}

		static VolumeAddedNativeDelegate VolumeAdded_cb_delegate;
		static VolumeAddedNativeDelegate VolumeAddedVMCallback {
			get {
				if (VolumeAdded_cb_delegate == null)
					VolumeAdded_cb_delegate = new VolumeAddedNativeDelegate (VolumeAdded_cb);
				return VolumeAdded_cb_delegate;
			}
		}

		static void OverrideVolumeAdded (GLib.GType gtype)
		{
			OverrideVolumeAdded (gtype, VolumeAddedVMCallback);
		}

		static void OverrideVolumeAdded (GLib.GType gtype, VolumeAddedNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.VolumeAdded = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void VolumeAddedNativeDelegate (IntPtr inst, IntPtr volume);

		static void VolumeAdded_cb (IntPtr inst, IntPtr volume)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				__obj.OnVolumeAdded (GLib.VolumeAdapter.GetObject (volume, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideVolumeAdded")]
		protected virtual void OnVolumeAdded (GLib.IVolume volume)
		{
			InternalVolumeAdded (volume);
		}

		private void InternalVolumeAdded (GLib.IVolume volume)
		{
			VolumeAddedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).VolumeAdded;
			if (unmanaged == null) return;

			unmanaged (this.Handle, volume == null ? IntPtr.Zero : ((volume is GLib.Object) ? (volume as GLib.Object).Handle : (volume as GLib.VolumeAdapter).Handle));
		}

		static VolumeRemovedNativeDelegate VolumeRemoved_cb_delegate;
		static VolumeRemovedNativeDelegate VolumeRemovedVMCallback {
			get {
				if (VolumeRemoved_cb_delegate == null)
					VolumeRemoved_cb_delegate = new VolumeRemovedNativeDelegate (VolumeRemoved_cb);
				return VolumeRemoved_cb_delegate;
			}
		}

		static void OverrideVolumeRemoved (GLib.GType gtype)
		{
			OverrideVolumeRemoved (gtype, VolumeRemovedVMCallback);
		}

		static void OverrideVolumeRemoved (GLib.GType gtype, VolumeRemovedNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.VolumeRemoved = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void VolumeRemovedNativeDelegate (IntPtr inst, IntPtr volume);

		static void VolumeRemoved_cb (IntPtr inst, IntPtr volume)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				__obj.OnVolumeRemoved (GLib.VolumeAdapter.GetObject (volume, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideVolumeRemoved")]
		protected virtual void OnVolumeRemoved (GLib.IVolume volume)
		{
			InternalVolumeRemoved (volume);
		}

		private void InternalVolumeRemoved (GLib.IVolume volume)
		{
			VolumeRemovedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).VolumeRemoved;
			if (unmanaged == null) return;

			unmanaged (this.Handle, volume == null ? IntPtr.Zero : ((volume is GLib.Object) ? (volume as GLib.Object).Handle : (volume as GLib.VolumeAdapter).Handle));
		}

		static VolumeChangedNativeDelegate VolumeChanged_cb_delegate;
		static VolumeChangedNativeDelegate VolumeChangedVMCallback {
			get {
				if (VolumeChanged_cb_delegate == null)
					VolumeChanged_cb_delegate = new VolumeChangedNativeDelegate (VolumeChanged_cb);
				return VolumeChanged_cb_delegate;
			}
		}

		static void OverrideVolumeChanged (GLib.GType gtype)
		{
			OverrideVolumeChanged (gtype, VolumeChangedVMCallback);
		}

		static void OverrideVolumeChanged (GLib.GType gtype, VolumeChangedNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.VolumeChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void VolumeChangedNativeDelegate (IntPtr inst, IntPtr volume);

		static void VolumeChanged_cb (IntPtr inst, IntPtr volume)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				__obj.OnVolumeChanged (GLib.VolumeAdapter.GetObject (volume, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideVolumeChanged")]
		protected virtual void OnVolumeChanged (GLib.IVolume volume)
		{
			InternalVolumeChanged (volume);
		}

		private void InternalVolumeChanged (GLib.IVolume volume)
		{
			VolumeChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).VolumeChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle, volume == null ? IntPtr.Zero : ((volume is GLib.Object) ? (volume as GLib.Object).Handle : (volume as GLib.VolumeAdapter).Handle));
		}

		static MountAddedNativeDelegate MountAdded_cb_delegate;
		static MountAddedNativeDelegate MountAddedVMCallback {
			get {
				if (MountAdded_cb_delegate == null)
					MountAdded_cb_delegate = new MountAddedNativeDelegate (MountAdded_cb);
				return MountAdded_cb_delegate;
			}
		}

		static void OverrideMountAdded (GLib.GType gtype)
		{
			OverrideMountAdded (gtype, MountAddedVMCallback);
		}

		static void OverrideMountAdded (GLib.GType gtype, MountAddedNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.MountAdded = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MountAddedNativeDelegate (IntPtr inst, IntPtr mount);

		static void MountAdded_cb (IntPtr inst, IntPtr mount)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				__obj.OnMountAdded (GLib.MountAdapter.GetObject (mount, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideMountAdded")]
		protected virtual void OnMountAdded (GLib.IMount mount)
		{
			InternalMountAdded (mount);
		}

		private void InternalMountAdded (GLib.IMount mount)
		{
			MountAddedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).MountAdded;
			if (unmanaged == null) return;

			unmanaged (this.Handle, mount == null ? IntPtr.Zero : ((mount is GLib.Object) ? (mount as GLib.Object).Handle : (mount as GLib.MountAdapter).Handle));
		}

		static MountRemovedNativeDelegate MountRemoved_cb_delegate;
		static MountRemovedNativeDelegate MountRemovedVMCallback {
			get {
				if (MountRemoved_cb_delegate == null)
					MountRemoved_cb_delegate = new MountRemovedNativeDelegate (MountRemoved_cb);
				return MountRemoved_cb_delegate;
			}
		}

		static void OverrideMountRemoved (GLib.GType gtype)
		{
			OverrideMountRemoved (gtype, MountRemovedVMCallback);
		}

		static void OverrideMountRemoved (GLib.GType gtype, MountRemovedNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.MountRemoved = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MountRemovedNativeDelegate (IntPtr inst, IntPtr mount);

		static void MountRemoved_cb (IntPtr inst, IntPtr mount)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				__obj.OnMountRemoved (GLib.MountAdapter.GetObject (mount, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideMountRemoved")]
		protected virtual void OnMountRemoved (GLib.IMount mount)
		{
			InternalMountRemoved (mount);
		}

		private void InternalMountRemoved (GLib.IMount mount)
		{
			MountRemovedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).MountRemoved;
			if (unmanaged == null) return;

			unmanaged (this.Handle, mount == null ? IntPtr.Zero : ((mount is GLib.Object) ? (mount as GLib.Object).Handle : (mount as GLib.MountAdapter).Handle));
		}

		static MountPreUnmountNativeDelegate MountPreUnmount_cb_delegate;
		static MountPreUnmountNativeDelegate MountPreUnmountVMCallback {
			get {
				if (MountPreUnmount_cb_delegate == null)
					MountPreUnmount_cb_delegate = new MountPreUnmountNativeDelegate (MountPreUnmount_cb);
				return MountPreUnmount_cb_delegate;
			}
		}

		static void OverrideMountPreUnmount (GLib.GType gtype)
		{
			OverrideMountPreUnmount (gtype, MountPreUnmountVMCallback);
		}

		static void OverrideMountPreUnmount (GLib.GType gtype, MountPreUnmountNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.MountPreUnmount = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MountPreUnmountNativeDelegate (IntPtr inst, IntPtr mount);

		static void MountPreUnmount_cb (IntPtr inst, IntPtr mount)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				__obj.OnMountPreUnmount (GLib.MountAdapter.GetObject (mount, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideMountPreUnmount")]
		protected virtual void OnMountPreUnmount (GLib.IMount mount)
		{
			InternalMountPreUnmount (mount);
		}

		private void InternalMountPreUnmount (GLib.IMount mount)
		{
			MountPreUnmountNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).MountPreUnmount;
			if (unmanaged == null) return;

			unmanaged (this.Handle, mount == null ? IntPtr.Zero : ((mount is GLib.Object) ? (mount as GLib.Object).Handle : (mount as GLib.MountAdapter).Handle));
		}

		static MountChangedNativeDelegate MountChanged_cb_delegate;
		static MountChangedNativeDelegate MountChangedVMCallback {
			get {
				if (MountChanged_cb_delegate == null)
					MountChanged_cb_delegate = new MountChangedNativeDelegate (MountChanged_cb);
				return MountChanged_cb_delegate;
			}
		}

		static void OverrideMountChanged (GLib.GType gtype)
		{
			OverrideMountChanged (gtype, MountChangedVMCallback);
		}

		static void OverrideMountChanged (GLib.GType gtype, MountChangedNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.MountChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MountChangedNativeDelegate (IntPtr inst, IntPtr mount);

		static void MountChanged_cb (IntPtr inst, IntPtr mount)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				__obj.OnMountChanged (GLib.MountAdapter.GetObject (mount, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideMountChanged")]
		protected virtual void OnMountChanged (GLib.IMount mount)
		{
			InternalMountChanged (mount);
		}

		private void InternalMountChanged (GLib.IMount mount)
		{
			MountChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).MountChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle, mount == null ? IntPtr.Zero : ((mount is GLib.Object) ? (mount as GLib.Object).Handle : (mount as GLib.MountAdapter).Handle));
		}

		static DriveConnectedNativeDelegate DriveConnected_cb_delegate;
		static DriveConnectedNativeDelegate DriveConnectedVMCallback {
			get {
				if (DriveConnected_cb_delegate == null)
					DriveConnected_cb_delegate = new DriveConnectedNativeDelegate (DriveConnected_cb);
				return DriveConnected_cb_delegate;
			}
		}

		static void OverrideDriveConnected (GLib.GType gtype)
		{
			OverrideDriveConnected (gtype, DriveConnectedVMCallback);
		}

		static void OverrideDriveConnected (GLib.GType gtype, DriveConnectedNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.DriveConnected = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DriveConnectedNativeDelegate (IntPtr inst, IntPtr drive);

		static void DriveConnected_cb (IntPtr inst, IntPtr drive)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				__obj.OnDriveConnected (GLib.DriveAdapter.GetObject (drive, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideDriveConnected")]
		protected virtual void OnDriveConnected (GLib.IDrive drive)
		{
			InternalDriveConnected (drive);
		}

		private void InternalDriveConnected (GLib.IDrive drive)
		{
			DriveConnectedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).DriveConnected;
			if (unmanaged == null) return;

			unmanaged (this.Handle, drive == null ? IntPtr.Zero : ((drive is GLib.Object) ? (drive as GLib.Object).Handle : (drive as GLib.DriveAdapter).Handle));
		}

		static DriveDisconnectedNativeDelegate DriveDisconnected_cb_delegate;
		static DriveDisconnectedNativeDelegate DriveDisconnectedVMCallback {
			get {
				if (DriveDisconnected_cb_delegate == null)
					DriveDisconnected_cb_delegate = new DriveDisconnectedNativeDelegate (DriveDisconnected_cb);
				return DriveDisconnected_cb_delegate;
			}
		}

		static void OverrideDriveDisconnected (GLib.GType gtype)
		{
			OverrideDriveDisconnected (gtype, DriveDisconnectedVMCallback);
		}

		static void OverrideDriveDisconnected (GLib.GType gtype, DriveDisconnectedNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.DriveDisconnected = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DriveDisconnectedNativeDelegate (IntPtr inst, IntPtr drive);

		static void DriveDisconnected_cb (IntPtr inst, IntPtr drive)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				__obj.OnDriveDisconnected (GLib.DriveAdapter.GetObject (drive, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideDriveDisconnected")]
		protected virtual void OnDriveDisconnected (GLib.IDrive drive)
		{
			InternalDriveDisconnected (drive);
		}

		private void InternalDriveDisconnected (GLib.IDrive drive)
		{
			DriveDisconnectedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).DriveDisconnected;
			if (unmanaged == null) return;

			unmanaged (this.Handle, drive == null ? IntPtr.Zero : ((drive is GLib.Object) ? (drive as GLib.Object).Handle : (drive as GLib.DriveAdapter).Handle));
		}

		static DriveChangedNativeDelegate DriveChanged_cb_delegate;
		static DriveChangedNativeDelegate DriveChangedVMCallback {
			get {
				if (DriveChanged_cb_delegate == null)
					DriveChanged_cb_delegate = new DriveChangedNativeDelegate (DriveChanged_cb);
				return DriveChanged_cb_delegate;
			}
		}

		static void OverrideDriveChanged (GLib.GType gtype)
		{
			OverrideDriveChanged (gtype, DriveChangedVMCallback);
		}

		static void OverrideDriveChanged (GLib.GType gtype, DriveChangedNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.DriveChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DriveChangedNativeDelegate (IntPtr inst, IntPtr drive);

		static void DriveChanged_cb (IntPtr inst, IntPtr drive)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				__obj.OnDriveChanged (GLib.DriveAdapter.GetObject (drive, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideDriveChanged")]
		protected virtual void OnDriveChanged (GLib.IDrive drive)
		{
			InternalDriveChanged (drive);
		}

		private void InternalDriveChanged (GLib.IDrive drive)
		{
			DriveChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).DriveChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle, drive == null ? IntPtr.Zero : ((drive is GLib.Object) ? (drive as GLib.Object).Handle : (drive as GLib.DriveAdapter).Handle));
		}

		static GetConnectedDrivesNativeDelegate GetConnectedDrives_cb_delegate;
		static GetConnectedDrivesNativeDelegate GetConnectedDrivesVMCallback {
			get {
				if (GetConnectedDrives_cb_delegate == null)
					GetConnectedDrives_cb_delegate = new GetConnectedDrivesNativeDelegate (GetConnectedDrives_cb);
				return GetConnectedDrives_cb_delegate;
			}
		}

		static void OverrideGetConnectedDrives (GLib.GType gtype)
		{
			OverrideGetConnectedDrives (gtype, GetConnectedDrivesVMCallback);
		}

		static void OverrideGetConnectedDrives (GLib.GType gtype, GetConnectedDrivesNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetConnectedDrives = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetConnectedDrivesNativeDelegate (IntPtr inst);

		static IntPtr GetConnectedDrives_cb (IntPtr inst)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				GLib.IDrive[] __result;
				__result = __obj.OnGetConnectedDrives ();
				return new GLib.List(__result, typeof (GLib.IDrive), true, true) == null ? IntPtr.Zero : new GLib.List(__result, typeof (GLib.IDrive), true, true).Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideGetConnectedDrives")]
		protected virtual GLib.IDrive[] OnGetConnectedDrives ()
		{
			return InternalGetConnectedDrives ();
		}

		private GLib.IDrive[] InternalGetConnectedDrives ()
		{
			GetConnectedDrivesNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetConnectedDrives;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return (GLib.IDrive[]) GLib.Marshaller.ListPtrToArray (__result, typeof(GLib.List), true, true, typeof(GLib.IDrive));
		}

		static GetVolumesNativeDelegate GetVolumes_cb_delegate;
		static GetVolumesNativeDelegate GetVolumesVMCallback {
			get {
				if (GetVolumes_cb_delegate == null)
					GetVolumes_cb_delegate = new GetVolumesNativeDelegate (GetVolumes_cb);
				return GetVolumes_cb_delegate;
			}
		}

		static void OverrideGetVolumes (GLib.GType gtype)
		{
			OverrideGetVolumes (gtype, GetVolumesVMCallback);
		}

		static void OverrideGetVolumes (GLib.GType gtype, GetVolumesNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetVolumes = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetVolumesNativeDelegate (IntPtr inst);

		static IntPtr GetVolumes_cb (IntPtr inst)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				GLib.IVolume[] __result;
				__result = __obj.OnGetVolumes ();
				return new GLib.List(__result, typeof (GLib.IVolume), true, true) == null ? IntPtr.Zero : new GLib.List(__result, typeof (GLib.IVolume), true, true).Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideGetVolumes")]
		protected virtual GLib.IVolume[] OnGetVolumes ()
		{
			return InternalGetVolumes ();
		}

		private GLib.IVolume[] InternalGetVolumes ()
		{
			GetVolumesNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetVolumes;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return (GLib.IVolume[]) GLib.Marshaller.ListPtrToArray (__result, typeof(GLib.List), true, true, typeof(GLib.IVolume));
		}

		static GetMountsNativeDelegate GetMounts_cb_delegate;
		static GetMountsNativeDelegate GetMountsVMCallback {
			get {
				if (GetMounts_cb_delegate == null)
					GetMounts_cb_delegate = new GetMountsNativeDelegate (GetMounts_cb);
				return GetMounts_cb_delegate;
			}
		}

		static void OverrideGetMounts (GLib.GType gtype)
		{
			OverrideGetMounts (gtype, GetMountsVMCallback);
		}

		static void OverrideGetMounts (GLib.GType gtype, GetMountsNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetMounts = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetMountsNativeDelegate (IntPtr inst);

		static IntPtr GetMounts_cb (IntPtr inst)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				GLib.IMount[] __result;
				__result = __obj.OnGetMounts ();
				return new GLib.List(__result, typeof (GLib.IMount), true, true) == null ? IntPtr.Zero : new GLib.List(__result, typeof (GLib.IMount), true, true).Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideGetMounts")]
		protected virtual GLib.IMount[] OnGetMounts ()
		{
			return InternalGetMounts ();
		}

		private GLib.IMount[] InternalGetMounts ()
		{
			GetMountsNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetMounts;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return (GLib.IMount[]) GLib.Marshaller.ListPtrToArray (__result, typeof(GLib.List), true, true, typeof(GLib.IMount));
		}

		static GetVolumeForUuidNativeDelegate GetVolumeForUuid_cb_delegate;
		static GetVolumeForUuidNativeDelegate GetVolumeForUuidVMCallback {
			get {
				if (GetVolumeForUuid_cb_delegate == null)
					GetVolumeForUuid_cb_delegate = new GetVolumeForUuidNativeDelegate (GetVolumeForUuid_cb);
				return GetVolumeForUuid_cb_delegate;
			}
		}

		static void OverrideGetVolumeForUuid (GLib.GType gtype)
		{
			OverrideGetVolumeForUuid (gtype, GetVolumeForUuidVMCallback);
		}

		static void OverrideGetVolumeForUuid (GLib.GType gtype, GetVolumeForUuidNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetVolumeForUuid = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetVolumeForUuidNativeDelegate (IntPtr inst, IntPtr uuid);

		static IntPtr GetVolumeForUuid_cb (IntPtr inst, IntPtr uuid)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				GLib.IVolume __result;
				__result = __obj.OnGetVolumeForUuid (GLib.Marshaller.Utf8PtrToString (uuid));
				return __result == null ? IntPtr.Zero : ((__result is GLib.Object) ? (__result as GLib.Object).Handle : (__result as GLib.VolumeAdapter).Handle);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideGetVolumeForUuid")]
		protected virtual GLib.IVolume OnGetVolumeForUuid (string uuid)
		{
			return InternalGetVolumeForUuid (uuid);
		}

		private GLib.IVolume InternalGetVolumeForUuid (string uuid)
		{
			GetVolumeForUuidNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetVolumeForUuid;
			if (unmanaged == null) return null;

			IntPtr native_uuid = GLib.Marshaller.StringToPtrGStrdup (uuid);
			IntPtr __result = unmanaged (this.Handle, native_uuid);
			GLib.Marshaller.Free (native_uuid);
			return GLib.VolumeAdapter.GetObject (__result, false);
		}

		static GetMountForUuidNativeDelegate GetMountForUuid_cb_delegate;
		static GetMountForUuidNativeDelegate GetMountForUuidVMCallback {
			get {
				if (GetMountForUuid_cb_delegate == null)
					GetMountForUuid_cb_delegate = new GetMountForUuidNativeDelegate (GetMountForUuid_cb);
				return GetMountForUuid_cb_delegate;
			}
		}

		static void OverrideGetMountForUuid (GLib.GType gtype)
		{
			OverrideGetMountForUuid (gtype, GetMountForUuidVMCallback);
		}

		static void OverrideGetMountForUuid (GLib.GType gtype, GetMountForUuidNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetMountForUuid = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetMountForUuidNativeDelegate (IntPtr inst, IntPtr uuid);

		static IntPtr GetMountForUuid_cb (IntPtr inst, IntPtr uuid)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				GLib.IMount __result;
				__result = __obj.OnGetMountForUuid (GLib.Marshaller.Utf8PtrToString (uuid));
				return __result == null ? IntPtr.Zero : ((__result is GLib.Object) ? (__result as GLib.Object).Handle : (__result as GLib.MountAdapter).Handle);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideGetMountForUuid")]
		protected virtual GLib.IMount OnGetMountForUuid (string uuid)
		{
			return InternalGetMountForUuid (uuid);
		}

		private GLib.IMount InternalGetMountForUuid (string uuid)
		{
			GetMountForUuidNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetMountForUuid;
			if (unmanaged == null) return null;

			IntPtr native_uuid = GLib.Marshaller.StringToPtrGStrdup (uuid);
			IntPtr __result = unmanaged (this.Handle, native_uuid);
			GLib.Marshaller.Free (native_uuid);
			return GLib.MountAdapter.GetObject (__result, false);
		}

		static DriveEjectButtonNativeDelegate DriveEjectButton_cb_delegate;
		static DriveEjectButtonNativeDelegate DriveEjectButtonVMCallback {
			get {
				if (DriveEjectButton_cb_delegate == null)
					DriveEjectButton_cb_delegate = new DriveEjectButtonNativeDelegate (DriveEjectButton_cb);
				return DriveEjectButton_cb_delegate;
			}
		}

		static void OverrideDriveEjectButton (GLib.GType gtype)
		{
			OverrideDriveEjectButton (gtype, DriveEjectButtonVMCallback);
		}

		static void OverrideDriveEjectButton (GLib.GType gtype, DriveEjectButtonNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.DriveEjectButton = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DriveEjectButtonNativeDelegate (IntPtr inst, IntPtr drive);

		static void DriveEjectButton_cb (IntPtr inst, IntPtr drive)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				__obj.OnDriveEjectButton (GLib.DriveAdapter.GetObject (drive, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideDriveEjectButton")]
		protected virtual void OnDriveEjectButton (GLib.IDrive drive)
		{
			InternalDriveEjectButton (drive);
		}

		private void InternalDriveEjectButton (GLib.IDrive drive)
		{
			DriveEjectButtonNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).DriveEjectButton;
			if (unmanaged == null) return;

			unmanaged (this.Handle, drive == null ? IntPtr.Zero : ((drive is GLib.Object) ? (drive as GLib.Object).Handle : (drive as GLib.DriveAdapter).Handle));
		}

		static DriveStopButtonNativeDelegate DriveStopButton_cb_delegate;
		static DriveStopButtonNativeDelegate DriveStopButtonVMCallback {
			get {
				if (DriveStopButton_cb_delegate == null)
					DriveStopButton_cb_delegate = new DriveStopButtonNativeDelegate (DriveStopButton_cb);
				return DriveStopButton_cb_delegate;
			}
		}

		static void OverrideDriveStopButton (GLib.GType gtype)
		{
			OverrideDriveStopButton (gtype, DriveStopButtonVMCallback);
		}

		static void OverrideDriveStopButton (GLib.GType gtype, DriveStopButtonNativeDelegate callback)
		{
			GVolumeMonitorClass class_iface = GetClassStruct (gtype, false);
			class_iface.DriveStopButton = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DriveStopButtonNativeDelegate (IntPtr inst, IntPtr drive);

		static void DriveStopButton_cb (IntPtr inst, IntPtr drive)
		{
			try {
				VolumeMonitor __obj = GLib.Object.GetObject (inst, false) as VolumeMonitor;
				__obj.OnDriveStopButton (GLib.DriveAdapter.GetObject (drive, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.VolumeMonitor), ConnectionMethod="OverrideDriveStopButton")]
		protected virtual void OnDriveStopButton (GLib.IDrive drive)
		{
			InternalDriveStopButton (drive);
		}

		private void InternalDriveStopButton (GLib.IDrive drive)
		{
			DriveStopButtonNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).DriveStopButton;
			if (unmanaged == null) return;

			unmanaged (this.Handle, drive == null ? IntPtr.Zero : ((drive is GLib.Object) ? (drive as GLib.Object).Handle : (drive as GLib.DriveAdapter).Handle));
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GVolumeMonitorClass {
			public VolumeAddedNativeDelegate VolumeAdded;
			public VolumeRemovedNativeDelegate VolumeRemoved;
			public VolumeChangedNativeDelegate VolumeChanged;
			public MountAddedNativeDelegate MountAdded;
			public MountRemovedNativeDelegate MountRemoved;
			public MountPreUnmountNativeDelegate MountPreUnmount;
			public MountChangedNativeDelegate MountChanged;
			public DriveConnectedNativeDelegate DriveConnected;
			public DriveDisconnectedNativeDelegate DriveDisconnected;
			public DriveChangedNativeDelegate DriveChanged;
			IntPtr IsSupported;
			public GetConnectedDrivesNativeDelegate GetConnectedDrives;
			public GetVolumesNativeDelegate GetVolumes;
			public GetMountsNativeDelegate GetMounts;
			public GetVolumeForUuidNativeDelegate GetVolumeForUuid;
			public GetMountForUuidNativeDelegate GetMountForUuid;
			IntPtr AdoptOrphanMount;
			public DriveEjectButtonNativeDelegate DriveEjectButton;
			public DriveStopButtonNativeDelegate DriveStopButton;
			IntPtr GReserved1;
			IntPtr GReserved2;
			IntPtr GReserved3;
			IntPtr GReserved4;
			IntPtr GReserved5;
			IntPtr GReserved6;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GVolumeMonitorClass> class_structs;

		static GVolumeMonitorClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GVolumeMonitorClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GVolumeMonitorClass class_struct = (GVolumeMonitorClass) Marshal.PtrToStructure (class_ptr, typeof (GVolumeMonitorClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GVolumeMonitorClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_volume_monitor_adopt_orphan_mount(IntPtr mount);

		[Obsolete]
		public static GLib.IVolume AdoptOrphanMount(GLib.IMount mount) {
			IntPtr raw_ret = g_volume_monitor_adopt_orphan_mount(mount == null ? IntPtr.Zero : ((mount is GLib.Object) ? (mount as GLib.Object).Handle : (mount as GLib.MountAdapter).Handle));
			GLib.IVolume ret = GLib.VolumeAdapter.GetObject (raw_ret, false);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_volume_monitor_get();

		public static GLib.VolumeMonitor Default { 
			get {
				IntPtr raw_ret = g_volume_monitor_get();
				GLib.VolumeMonitor ret = GLib.Object.GetObject(raw_ret) as GLib.VolumeMonitor;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_volume_monitor_get_connected_drives(IntPtr raw);

		public GLib.IDrive[] ConnectedDrives { 
			get {
				IntPtr raw_ret = g_volume_monitor_get_connected_drives(Handle);
				GLib.IDrive[] ret = (GLib.IDrive[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, true, typeof(GLib.IDrive));
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_volume_monitor_get_mount_for_uuid(IntPtr raw, IntPtr uuid);

		public GLib.IMount GetMountForUuid(string uuid) {
			IntPtr native_uuid = GLib.Marshaller.StringToPtrGStrdup (uuid);
			IntPtr raw_ret = g_volume_monitor_get_mount_for_uuid(Handle, native_uuid);
			GLib.IMount ret = GLib.MountAdapter.GetObject (raw_ret, false);
			GLib.Marshaller.Free (native_uuid);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_volume_monitor_get_mounts(IntPtr raw);

		public GLib.IMount[] Mounts { 
			get {
				IntPtr raw_ret = g_volume_monitor_get_mounts(Handle);
				GLib.IMount[] ret = (GLib.IMount[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, true, typeof(GLib.IMount));
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_volume_monitor_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_volume_monitor_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_volume_monitor_get_volume_for_uuid(IntPtr raw, IntPtr uuid);

		public GLib.IVolume GetVolumeForUuid(string uuid) {
			IntPtr native_uuid = GLib.Marshaller.StringToPtrGStrdup (uuid);
			IntPtr raw_ret = g_volume_monitor_get_volume_for_uuid(Handle, native_uuid);
			GLib.IVolume ret = GLib.VolumeAdapter.GetObject (raw_ret, false);
			GLib.Marshaller.Free (native_uuid);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_volume_monitor_get_volumes(IntPtr raw);

		public GLib.IVolume[] Volumes { 
			get {
				IntPtr raw_ret = g_volume_monitor_get_volumes(Handle);
				GLib.IVolume[] ret = (GLib.IVolume[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, true, typeof(GLib.IVolume));
				return ret;
			}
		}

#endregion
	}
}
