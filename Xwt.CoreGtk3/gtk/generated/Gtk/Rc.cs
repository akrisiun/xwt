// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Rc {

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_rc_add_default_file(IntPtr filename);

		[DllImport("libgtk-3-0.dll")]
		static extern void gtk_rc_add_default_file_utf8(IntPtr filename);

		[Obsolete]
		public static void AddDefaultFile(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
			    Environment.OSVersion.Platform == PlatformID.Win32S ||
			    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
			    Environment.OSVersion.Platform == PlatformID.WinCE)
				gtk_rc_add_default_file_utf8(native_filename);
			else
				gtk_rc_add_default_file(native_filename);
			GLib.Marshaller.Free (native_filename);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_rc_find_module_in_path(IntPtr module_file);

		[Obsolete]
		public static string FindModuleInPath(string module_file) {
			IntPtr native_module_file = GLib.Marshaller.StringToPtrGStrdup (module_file);
			IntPtr raw_ret = gtk_rc_find_module_in_path(native_module_file);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_module_file);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_rc_get_default_files();

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_rc_set_default_files(IntPtr[] filenames);

		[DllImport("libgtk-3-0.dll")]
		static extern void gtk_rc_set_default_files_utf8(IntPtr[] filenames);

		[Obsolete]
		public static string[] DefaultFiles { 
			get {
				IntPtr raw_ret = gtk_rc_get_default_files();
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, false);
				return ret;
			}
			set {
				int cnt_value = value == null ? 0 : value.Length;
				IntPtr[] native_value = new IntPtr [cnt_value + 1];
				for (int i = 0; i < cnt_value; i++)
					native_value [i] = GLib.Marshaller.StringToPtrGStrdup(value[i]);
				native_value [cnt_value] = IntPtr.Zero;
				if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
				    Environment.OSVersion.Platform == PlatformID.Win32S ||
				    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
				    Environment.OSVersion.Platform == PlatformID.WinCE)
					gtk_rc_set_default_files_utf8(native_value);
				else
					gtk_rc_set_default_files(native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_rc_get_im_module_file();

		[Obsolete]
		public static string ImModuleFile { 
			get {
				IntPtr raw_ret = gtk_rc_get_im_module_file();
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_rc_get_im_module_path();

		[Obsolete]
		public static string ImModulePath { 
			get {
				IntPtr raw_ret = gtk_rc_get_im_module_path();
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_rc_get_module_dir();

		[Obsolete]
		public static string ModuleDir { 
			get {
				IntPtr raw_ret = gtk_rc_get_module_dir();
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_rc_get_style(IntPtr widget);

		[Obsolete]
		public static Gtk.Style GetStyle(Gtk.Widget widget) {
			IntPtr raw_ret = gtk_rc_get_style(widget == null ? IntPtr.Zero : widget.Handle);
			Gtk.Style ret = GLib.Object.GetObject(raw_ret) as Gtk.Style;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_rc_get_style_by_paths(IntPtr settings, IntPtr widget_path, IntPtr class_path, IntPtr type);

		[Obsolete]
		public static Gtk.Style GetStyleByPaths(Gtk.Settings settings, string widget_path, string class_path, GLib.GType type) {
			IntPtr native_widget_path = GLib.Marshaller.StringToPtrGStrdup (widget_path);
			IntPtr native_class_path = GLib.Marshaller.StringToPtrGStrdup (class_path);
			IntPtr raw_ret = gtk_rc_get_style_by_paths(settings == null ? IntPtr.Zero : settings.Handle, native_widget_path, native_class_path, type.Val);
			Gtk.Style ret = GLib.Object.GetObject(raw_ret) as Gtk.Style;
			GLib.Marshaller.Free (native_widget_path);
			GLib.Marshaller.Free (native_class_path);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_rc_get_theme_dir();

		[Obsolete]
		public static string ThemeDir { 
			get {
				IntPtr raw_ret = gtk_rc_get_theme_dir();
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_rc_parse(IntPtr filename);

		[DllImport("libgtk-3-0.dll")]
		static extern void gtk_rc_parse_utf8(IntPtr filename);

		[Obsolete]
		public static void Parse(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
			    Environment.OSVersion.Platform == PlatformID.Win32S ||
			    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
			    Environment.OSVersion.Platform == PlatformID.WinCE)
				gtk_rc_parse_utf8(native_filename);
			else
				gtk_rc_parse(native_filename);
			GLib.Marshaller.Free (native_filename);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_rc_parse_string(IntPtr rc_string);

		[Obsolete]
		public static void ParseString(string rc_string) {
			IntPtr native_rc_string = GLib.Marshaller.StringToPtrGStrdup (rc_string);
			gtk_rc_parse_string(native_rc_string);
			GLib.Marshaller.Free (native_rc_string);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_rc_reparse_all();

		[Obsolete]
		public static bool ReparseAll() {
			bool raw_ret = gtk_rc_reparse_all();
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_rc_reparse_all_for_settings(IntPtr settings, bool force_load);

		[Obsolete]
		public static bool ReparseAllForSettings(Gtk.Settings settings, bool force_load) {
			bool raw_ret = gtk_rc_reparse_all_for_settings(settings == null ? IntPtr.Zero : settings.Handle, force_load);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_rc_reset_styles(IntPtr settings);

		[Obsolete]
		public static void ResetStyles(Gtk.Settings settings) {
			gtk_rc_reset_styles(settings == null ? IntPtr.Zero : settings.Handle);
		}

#endregion
	}
}
