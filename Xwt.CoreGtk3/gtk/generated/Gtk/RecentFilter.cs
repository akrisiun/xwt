// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class RecentFilter : GLib.InitiallyUnowned {

		public RecentFilter (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_filter_new();

		public RecentFilter () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RecentFilter)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_recent_filter_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkRecentFilterClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.InitiallyUnowned)).GetClassSize ();
		static Dictionary<GLib.GType, GtkRecentFilterClass> class_structs;

		static GtkRecentFilterClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkRecentFilterClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkRecentFilterClass class_struct = (GtkRecentFilterClass) Marshal.PtrToStructure (class_ptr, typeof (GtkRecentFilterClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkRecentFilterClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_age(IntPtr raw, int days);

		public void AddAge(int days) {
			gtk_recent_filter_add_age(Handle, days);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_application(IntPtr raw, IntPtr application);

		public void AddApplication(string application) {
			IntPtr native_application = GLib.Marshaller.StringToPtrGStrdup (application);
			gtk_recent_filter_add_application(Handle, native_application);
			GLib.Marshaller.Free (native_application);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_custom(IntPtr raw, int needed, GtkSharp.RecentFilterFuncNative func, IntPtr data, GLib.DestroyNotify data_destroy);

		public void AddCustom(Gtk.RecentFilterFlags needed, Gtk.RecentFilterFunc func) {
			GtkSharp.RecentFilterFuncWrapper func_wrapper = new GtkSharp.RecentFilterFuncWrapper (func);
			IntPtr data;
			GLib.DestroyNotify data_destroy;
			if (func == null) {
				data = IntPtr.Zero;
				data_destroy = null;
			} else {
				data = (IntPtr) GCHandle.Alloc (func_wrapper);
				data_destroy = GLib.DestroyHelper.NotifyHandler;
			}
			gtk_recent_filter_add_custom(Handle, (int) needed, func_wrapper.NativeDelegate, data, data_destroy);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_group(IntPtr raw, IntPtr group);

		public void AddGroup(string group) {
			IntPtr native_group = GLib.Marshaller.StringToPtrGStrdup (group);
			gtk_recent_filter_add_group(Handle, native_group);
			GLib.Marshaller.Free (native_group);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_mime_type(IntPtr raw, IntPtr mime_type);

		public void AddMimeType(string mime_type) {
			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
			gtk_recent_filter_add_mime_type(Handle, native_mime_type);
			GLib.Marshaller.Free (native_mime_type);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_pattern(IntPtr raw, IntPtr pattern);

		public void AddPattern(string pattern) {
			IntPtr native_pattern = GLib.Marshaller.StringToPtrGStrdup (pattern);
			gtk_recent_filter_add_pattern(Handle, native_pattern);
			GLib.Marshaller.Free (native_pattern);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_pixbuf_formats(IntPtr raw);

		public void AddPixbufFormats() {
			gtk_recent_filter_add_pixbuf_formats(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_filter_filter(IntPtr raw, IntPtr filter_info);

		public bool Filter(Gtk.RecentFilterInfo filter_info) {
			IntPtr native_filter_info = GLib.Marshaller.StructureToPtrAlloc (filter_info);
			bool raw_ret = gtk_recent_filter_filter(Handle, native_filter_info);
			bool ret = raw_ret;
			filter_info = Gtk.RecentFilterInfo.New (native_filter_info);
			Marshal.FreeHGlobal (native_filter_info);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_filter_get_name(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_set_name(IntPtr raw, IntPtr name);

		public string Name { 
			get {
				IntPtr raw_ret = gtk_recent_filter_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_recent_filter_set_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_recent_filter_get_needed(IntPtr raw);

		public Gtk.RecentFilterFlags Needed { 
			get {
				int raw_ret = gtk_recent_filter_get_needed(Handle);
				Gtk.RecentFilterFlags ret = (Gtk.RecentFilterFlags) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_filter_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_recent_filter_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
