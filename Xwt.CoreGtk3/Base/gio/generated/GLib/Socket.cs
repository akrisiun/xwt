// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Socket : GLib.Object, GLib.IInitable {

		public Socket (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_new(int family, int type, int protocol, out IntPtr error);

		public unsafe Socket (GLib.SocketFamily family, GLib.SocketType type, GLib.SocketProtocol protocol) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Socket)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr error = IntPtr.Zero;
			Raw = g_socket_new((int) family, (int) type, (int) protocol, out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_new_from_fd(int fd, out IntPtr error);

		public unsafe Socket (int fd) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Socket)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr error = IntPtr.Zero;
			Raw = g_socket_new_from_fd(fd, out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_socket_get_family(IntPtr raw);

		[GLib.Property ("family")]
		public GLib.SocketFamily Family {
			get  {
				int raw_ret = g_socket_get_family(Handle);
				GLib.SocketFamily ret = (GLib.SocketFamily) raw_ret;
				return ret;
			}
		}

		[GLib.Property ("type")]
		public GLib.SocketType Type {
			get {
				GLib.Value val = GetProperty ("type");
				GLib.SocketType ret = (GLib.SocketType) (Enum) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_socket_get_protocol(IntPtr raw);

		[GLib.Property ("protocol")]
		public GLib.SocketProtocol Protocol {
			get  {
				int raw_ret = g_socket_get_protocol(Handle);
				GLib.SocketProtocol ret = (GLib.SocketProtocol) raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_socket_get_fd(IntPtr raw);

		[GLib.Property ("fd")]
		public int Fd {
			get  {
				int raw_ret = g_socket_get_fd(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_socket_get_blocking(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_socket_set_blocking(IntPtr raw, bool blocking);

		[GLib.Property ("blocking")]
		public bool Blocking {
			get  {
				bool raw_ret = g_socket_get_blocking(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				g_socket_set_blocking(Handle, value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_socket_get_listen_backlog(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_socket_set_listen_backlog(IntPtr raw, int backlog);

		[GLib.Property ("listen-backlog")]
		public int ListenBacklog {
			get  {
				int raw_ret = g_socket_get_listen_backlog(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				g_socket_set_listen_backlog(Handle, value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_socket_get_keepalive(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_socket_set_keepalive(IntPtr raw, bool keepalive);

		[GLib.Property ("keepalive")]
		public bool Keepalive {
			get  {
				bool raw_ret = g_socket_get_keepalive(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				g_socket_set_keepalive(Handle, value);
			}
		}

		[GLib.Property ("local-address")]
		public GLib.SocketAddress LocalAddress {
			get {
				GLib.Value val = GetProperty ("local-address");
				GLib.SocketAddress ret = (GLib.SocketAddress) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("remote-address")]
		public GLib.SocketAddress RemoteAddress {
			get {
				GLib.Value val = GetProperty ("remote-address");
				GLib.SocketAddress ret = (GLib.SocketAddress) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint g_socket_get_timeout(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_socket_set_timeout(IntPtr raw, uint timeout);

		[GLib.Property ("timeout")]
		public uint Timeout {
			get  {
				uint raw_ret = g_socket_get_timeout(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				g_socket_set_timeout(Handle, value);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GSocketClass {
			IntPtr GReserved1;
			IntPtr GReserved2;
			IntPtr GReserved3;
			IntPtr GReserved4;
			IntPtr GReserved5;
			IntPtr GReserved6;
			IntPtr GReserved7;
			IntPtr GReserved8;
			IntPtr GReserved9;
			IntPtr GReserved10;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GSocketClass> class_structs;

		static GSocketClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GSocketClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GSocketClass class_struct = (GSocketClass) Marshal.PtrToStructure (class_ptr, typeof (GSocketClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GSocketClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_accept(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public unsafe GLib.Socket Accept(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_accept(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.Socket ret = GLib.Object.GetObject(raw_ret) as GLib.Socket;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_socket_bind(IntPtr raw, IntPtr address, bool allow_reuse, out IntPtr error);

		public unsafe bool Bind(GLib.SocketAddress address, bool allow_reuse) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_socket_bind(Handle, address == null ? IntPtr.Zero : address.Handle, allow_reuse, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_socket_check_connect_result(IntPtr raw, out IntPtr error);

		public unsafe bool CheckConnectResult() {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_socket_check_connect_result(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_socket_close(IntPtr raw, out IntPtr error);

		public unsafe bool Close() {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_socket_close(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_socket_condition_check(IntPtr raw, int condition);

		public GLib.IOCondition ConditionCheck(GLib.IOCondition condition) {
			int raw_ret = g_socket_condition_check(Handle, (int) condition);
			GLib.IOCondition ret = (GLib.IOCondition) raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_socket_condition_wait(IntPtr raw, int condition, IntPtr cancellable, out IntPtr error);

		public unsafe bool ConditionWait(GLib.IOCondition condition, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_socket_condition_wait(Handle, (int) condition, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_socket_connect(IntPtr raw, IntPtr address, IntPtr cancellable, out IntPtr error);

		public unsafe bool Connect(GLib.SocketAddress address, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_socket_connect(Handle, address == null ? IntPtr.Zero : address.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_socket_create_source(IntPtr raw, int condition, IntPtr cancellable);

		public GLib.Source CreateSource(GLib.IOCondition condition, GLib.Cancellable cancellable) {
			IntPtr raw_ret = g_socket_create_source(Handle, (int) condition, cancellable == null ? IntPtr.Zero : cancellable.Handle);
			GLib.Source ret = new GLib.Source(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_get_credentials(IntPtr raw, out IntPtr error);

		public unsafe GLib.Credentials GetCredentials() {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_get_credentials(Handle, out error);
			GLib.Credentials ret = GLib.Object.GetObject(raw_ret) as GLib.Credentials;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_get_local_address(IntPtr raw, out IntPtr error);

		public unsafe GLib.SocketAddress GetLocalAddress() {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_get_local_address(Handle, out error);
			GLib.SocketAddress ret = GLib.Object.GetObject(raw_ret) as GLib.SocketAddress;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_get_remote_address(IntPtr raw, out IntPtr error);

		public unsafe GLib.SocketAddress GetRemoteAddress() {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_get_remote_address(Handle, out error);
			GLib.SocketAddress ret = GLib.Object.GetObject(raw_ret) as GLib.SocketAddress;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_socket_get_socket_type(IntPtr raw);

		public GLib.SocketType SocketType { 
			get {
				int raw_ret = g_socket_get_socket_type(Handle);
				GLib.SocketType ret = (GLib.SocketType) raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_socket_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_socket_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_socket_is_closed(IntPtr raw);

		public bool IsClosed { 
			get {
				bool raw_ret = g_socket_is_closed(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_socket_is_connected(IntPtr raw);

		public bool IsConnected { 
			get {
				bool raw_ret = g_socket_is_connected(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_socket_listen(IntPtr raw, out IntPtr error);

		public unsafe bool Listen() {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_socket_listen(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_receive(IntPtr raw, IntPtr buffer, UIntPtr size, IntPtr cancellable, out IntPtr error);

		public unsafe long Receive(string buffer, ulong size, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_receive(Handle, GLib.Marshaller.StringToPtrGStrdup(buffer), new UIntPtr (size), cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			long ret = (long) raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_receive_from(IntPtr raw, IntPtr address, IntPtr buffer, UIntPtr size, IntPtr cancellable, out IntPtr error);

		public unsafe long ReceiveFrom(GLib.SocketAddress address, string buffer, ulong size, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_receive_from(Handle, address == null ? IntPtr.Zero : address.Handle, GLib.Marshaller.StringToPtrGStrdup(buffer), new UIntPtr (size), cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			long ret = (long) raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_receive_message(IntPtr raw, IntPtr address, IntPtr vectors, int num_vectors, IntPtr messages, out int num_messages, out int flags, IntPtr cancellable, out IntPtr error);

		public unsafe long ReceiveMessage(GLib.SocketAddress address, GLib.InputVector vectors, int num_vectors, GLib.SocketControlMessage messages, out int num_messages, out int flags, GLib.Cancellable cancellable) {
			IntPtr native_vectors = GLib.Marshaller.StructureToPtrAlloc (vectors);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_receive_message(Handle, address == null ? IntPtr.Zero : address.Handle, native_vectors, num_vectors, messages == null ? IntPtr.Zero : messages.Handle, out num_messages, out flags, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			long ret = (long) raw_ret;
			vectors = GLib.InputVector.New (native_vectors);
			Marshal.FreeHGlobal (native_vectors);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_receive_with_blocking(IntPtr raw, IntPtr buffer, UIntPtr size, bool blocking, IntPtr cancellable, out IntPtr error);

		public unsafe long ReceiveWithBlocking(string buffer, ulong size, bool blocking, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_receive_with_blocking(Handle, GLib.Marshaller.StringToPtrGStrdup(buffer), new UIntPtr (size), blocking, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			long ret = (long) raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_send(IntPtr raw, IntPtr buffer, UIntPtr size, IntPtr cancellable, out IntPtr error);

		public unsafe long Send(string buffer, ulong size, GLib.Cancellable cancellable) {
			IntPtr native_buffer = GLib.Marshaller.StringToPtrGStrdup (buffer);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_send(Handle, native_buffer, new UIntPtr (size), cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			long ret = (long) raw_ret;
			GLib.Marshaller.Free (native_buffer);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_send_message(IntPtr raw, IntPtr address, IntPtr vectors, int num_vectors, IntPtr messages, int num_messages, int flags, IntPtr cancellable, out IntPtr error);

		public unsafe long SendMessage(GLib.SocketAddress address, GLib.OutputVector vectors, int num_vectors, GLib.SocketControlMessage messages, int num_messages, int flags, GLib.Cancellable cancellable) {
			IntPtr native_vectors = GLib.Marshaller.StructureToPtrAlloc (vectors);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_send_message(Handle, address == null ? IntPtr.Zero : address.Handle, native_vectors, num_vectors, messages == null ? IntPtr.Zero : messages.Handle, num_messages, flags, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			long ret = (long) raw_ret;
			vectors = GLib.OutputVector.New (native_vectors);
			Marshal.FreeHGlobal (native_vectors);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_send_to(IntPtr raw, IntPtr address, IntPtr buffer, UIntPtr size, IntPtr cancellable, out IntPtr error);

		public unsafe long SendTo(GLib.SocketAddress address, string buffer, ulong size, GLib.Cancellable cancellable) {
			IntPtr native_buffer = GLib.Marshaller.StringToPtrGStrdup (buffer);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_send_to(Handle, address == null ? IntPtr.Zero : address.Handle, native_buffer, new UIntPtr (size), cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			long ret = (long) raw_ret;
			GLib.Marshaller.Free (native_buffer);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_send_with_blocking(IntPtr raw, IntPtr buffer, UIntPtr size, bool blocking, IntPtr cancellable, out IntPtr error);

		public unsafe long SendWithBlocking(string buffer, ulong size, bool blocking, GLib.Cancellable cancellable) {
			IntPtr native_buffer = GLib.Marshaller.StringToPtrGStrdup (buffer);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_send_with_blocking(Handle, native_buffer, new UIntPtr (size), blocking, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			long ret = (long) raw_ret;
			GLib.Marshaller.Free (native_buffer);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_socket_shutdown(IntPtr raw, bool shutdown_read, bool shutdown_write, out IntPtr error);

		public unsafe bool Shutdown(bool shutdown_read, bool shutdown_write) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_socket_shutdown(Handle, shutdown_read, shutdown_write, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_socket_speaks_ipv4(IntPtr raw);

		public bool SpeaksIpv4() {
			bool raw_ret = g_socket_speaks_ipv4(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_initable_init(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public bool Init(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_initable_init(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
