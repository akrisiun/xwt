// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class AspectFrame : Gtk.Frame {

		public AspectFrame (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_aspect_frame_new(IntPtr label, float xalign, float yalign, float ratio, bool obey_child);

		public AspectFrame (string label, float xalign, float yalign, float ratio, bool obey_child) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (AspectFrame)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("label");
				vals.Add (new GLib.Value (label));
				names.Add ("xalign");
				vals.Add (new GLib.Value (xalign));
				names.Add ("yalign");
				vals.Add (new GLib.Value (yalign));
				names.Add ("ratio");
				vals.Add (new GLib.Value (ratio));
				names.Add ("obey_child");
				vals.Add (new GLib.Value (obey_child));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			Raw = gtk_aspect_frame_new(native_label, xalign, yalign, ratio, obey_child);
			GLib.Marshaller.Free (native_label);
		}

		[GLib.Property ("xalign")]
		public float Xalign {
			get {
				GLib.Value val = GetProperty ("xalign");
				float ret = (float) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("xalign", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("yalign")]
		public float Yalign {
			get {
				GLib.Value val = GetProperty ("yalign");
				float ret = (float) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("yalign", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("ratio")]
		public float Ratio {
			get {
				GLib.Value val = GetProperty ("ratio");
				float ret = (float) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("ratio", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("obey-child")]
		public bool ObeyChild {
			get {
				GLib.Value val = GetProperty ("obey-child");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("obey-child", val);
				val.Dispose ();
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkAspectFrameClass {
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Frame)).GetClassSize ();
		static Dictionary<GLib.GType, GtkAspectFrameClass> class_structs;

		static GtkAspectFrameClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkAspectFrameClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkAspectFrameClass class_struct = (GtkAspectFrameClass) Marshal.PtrToStructure (class_ptr, typeof (GtkAspectFrameClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkAspectFrameClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_aspect_frame_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_aspect_frame_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_aspect_frame_set(IntPtr raw, float xalign, float yalign, float ratio, bool obey_child);

		public void Set(float xalign, float yalign, float ratio, bool obey_child) {
			gtk_aspect_frame_set(Handle, xalign, yalign, ratio, obey_child);
		}

#endregion
	}
}
