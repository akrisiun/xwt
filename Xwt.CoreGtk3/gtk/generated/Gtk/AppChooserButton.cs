// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class AppChooserButton : Gtk.ComboBox, Gtk.IAppChooser {

		public AppChooserButton (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_app_chooser_button_new(IntPtr content_type);

		public AppChooserButton (string content_type) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (AppChooserButton)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_content_type = GLib.Marshaller.StringToPtrGStrdup (content_type);
			Raw = gtk_app_chooser_button_new(native_content_type);
			GLib.Marshaller.Free (native_content_type);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_app_chooser_button_get_show_dialog_item(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_app_chooser_button_set_show_dialog_item(IntPtr raw, bool setting);

		[GLib.Property ("show-dialog-item")]
		public bool ShowDialogItem {
			get  {
				bool raw_ret = gtk_app_chooser_button_get_show_dialog_item(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_app_chooser_button_set_show_dialog_item(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_app_chooser_button_get_heading(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_app_chooser_button_set_heading(IntPtr raw, IntPtr heading);

		[GLib.Property ("heading")]
		public string Heading {
			get  {
				IntPtr raw_ret = gtk_app_chooser_button_get_heading(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_app_chooser_button_set_heading(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Signal("custom-item-activated")]
		public event Gtk.CustomItemActivatedHandler CustomItemActivated {
			add {
				this.AddSignalHandler ("custom-item-activated", value, typeof (Gtk.CustomItemActivatedArgs));
			}
			remove {
				this.RemoveSignalHandler ("custom-item-activated", value);
			}
		}

		static CustomItemActivatedNativeDelegate CustomItemActivated_cb_delegate;
		static CustomItemActivatedNativeDelegate CustomItemActivatedVMCallback {
			get {
				if (CustomItemActivated_cb_delegate == null)
					CustomItemActivated_cb_delegate = new CustomItemActivatedNativeDelegate (CustomItemActivated_cb);
				return CustomItemActivated_cb_delegate;
			}
		}

		static void OverrideCustomItemActivated (GLib.GType gtype)
		{
			OverrideCustomItemActivated (gtype, CustomItemActivatedVMCallback);
		}

		static void OverrideCustomItemActivated (GLib.GType gtype, CustomItemActivatedNativeDelegate callback)
		{
			GtkAppChooserButtonClass class_iface = GetClassStruct (gtype, false);
			class_iface.CustomItemActivated = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CustomItemActivatedNativeDelegate (IntPtr inst, IntPtr item_name);

		static void CustomItemActivated_cb (IntPtr inst, IntPtr item_name)
		{
			try {
				AppChooserButton __obj = GLib.Object.GetObject (inst, false) as AppChooserButton;
				__obj.OnCustomItemActivated (GLib.Marshaller.Utf8PtrToString (item_name));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.AppChooserButton), ConnectionMethod="OverrideCustomItemActivated")]
		protected virtual void OnCustomItemActivated (string item_name)
		{
			InternalCustomItemActivated (item_name);
		}

		private void InternalCustomItemActivated (string item_name)
		{
			CustomItemActivatedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).CustomItemActivated;
			if (unmanaged == null) return;

			IntPtr native_item_name = GLib.Marshaller.StringToPtrGStrdup (item_name);
			unmanaged (this.Handle, native_item_name);
			GLib.Marshaller.Free (native_item_name);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkAppChooserButtonClass {
			public CustomItemActivatedNativeDelegate CustomItemActivated;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=16)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.ComboBox)).GetClassSize ();
		static Dictionary<GLib.GType, GtkAppChooserButtonClass> class_structs;

		static GtkAppChooserButtonClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkAppChooserButtonClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkAppChooserButtonClass class_struct = (GtkAppChooserButtonClass) Marshal.PtrToStructure (class_ptr, typeof (GtkAppChooserButtonClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkAppChooserButtonClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_app_chooser_button_append_custom_item(IntPtr raw, IntPtr name, IntPtr label, IntPtr icon);

		public void AppendCustomItem(string name, string label, GLib.IIcon icon) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			gtk_app_chooser_button_append_custom_item(Handle, native_name, native_label, icon == null ? IntPtr.Zero : ((icon is GLib.Object) ? (icon as GLib.Object).Handle : (icon as GLib.IconAdapter).Handle));
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_label);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_app_chooser_button_append_separator(IntPtr raw);

		public void AppendSeparator() {
			gtk_app_chooser_button_append_separator(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_app_chooser_button_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_app_chooser_button_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_app_chooser_button_set_active_custom_item(IntPtr raw, IntPtr name);

		public string ActiveCustomItem { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_app_chooser_button_set_active_custom_item(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_app_chooser_get_app_info(IntPtr raw);

		public GLib.IAppInfo AppInfo { 
			get {
				IntPtr raw_ret = gtk_app_chooser_get_app_info(Handle);
				GLib.IAppInfo ret = GLib.AppInfoAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_app_chooser_get_content_type(IntPtr raw);

		public string ContentType { 
			get {
				IntPtr raw_ret = gtk_app_chooser_get_content_type(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_app_chooser_refresh(IntPtr raw);

		public void Refresh() {
			gtk_app_chooser_refresh(Handle);
		}

#endregion
	}
}
