// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLibSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate IntPtr DBusMessageFilterFunctionNative(IntPtr connection, IntPtr message, bool incoming, IntPtr user_data);

	internal class DBusMessageFilterFunctionInvoker {

		DBusMessageFilterFunctionNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~DBusMessageFilterFunctionInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal DBusMessageFilterFunctionInvoker (DBusMessageFilterFunctionNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal DBusMessageFilterFunctionInvoker (DBusMessageFilterFunctionNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal DBusMessageFilterFunctionInvoker (DBusMessageFilterFunctionNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal GLib.DBusMessageFilterFunction Handler {
			get {
				return new GLib.DBusMessageFilterFunction(InvokeNative);
			}
		}

		GLib.DBusMessage InvokeNative (GLib.DBusConnection connection, GLib.DBusMessage message, bool incoming)
		{
			GLib.DBusMessage __result = GLib.Object.GetObject(native_cb (connection == null ? IntPtr.Zero : connection.Handle, message == null ? IntPtr.Zero : message.Handle, incoming, __data)) as GLib.DBusMessage;
			return __result;
		}
	}

	internal class DBusMessageFilterFunctionWrapper {

		public IntPtr NativeCallback (IntPtr connection, IntPtr message, bool incoming, IntPtr user_data)
		{
			try {
				GLib.DBusMessage __ret = managed (GLib.Object.GetObject(connection) as GLib.DBusConnection, GLib.Object.GetObject(message) as GLib.DBusMessage, incoming);
				if (release_on_call)
					gch.Free ();
				return __ret == null ? IntPtr.Zero : __ret.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal DBusMessageFilterFunctionNative NativeDelegate;
		GLib.DBusMessageFilterFunction managed;

		public DBusMessageFilterFunctionWrapper (GLib.DBusMessageFilterFunction managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new DBusMessageFilterFunctionNative (NativeCallback);
		}

		public static GLib.DBusMessageFilterFunction GetManagedDelegate (DBusMessageFilterFunctionNative native)
		{
			if (native == null)
				return null;
			DBusMessageFilterFunctionWrapper wrapper = (DBusMessageFilterFunctionWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
