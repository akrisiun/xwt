// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class WidgetPath : GLib.Opaque {

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_widget_path_append_type(IntPtr raw, IntPtr type);

		public int AppendType(GLib.GType type) {
			int raw_ret = gtk_widget_path_append_type(Handle, type.Val);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_widget_path_copy(IntPtr raw);

		public Gtk.WidgetPath Copy() {
			IntPtr raw_ret = gtk_widget_path_copy(Handle);
			Gtk.WidgetPath ret = raw_ret == IntPtr.Zero ? null : (Gtk.WidgetPath) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.WidgetPath), true);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_widget_path_get_object_type(IntPtr raw);

		public GLib.GType ObjectType { 
			get {
				IntPtr raw_ret = gtk_widget_path_get_object_type(Handle);
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_widget_path_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_widget_path_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_widget_path_has_parent(IntPtr raw, IntPtr type);

		public bool HasParent(GLib.GType type) {
			bool raw_ret = gtk_widget_path_has_parent(Handle, type.Val);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_widget_path_is_type(IntPtr raw, IntPtr type);

		public bool IsType(GLib.GType type) {
			bool raw_ret = gtk_widget_path_is_type(Handle, type.Val);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_widget_path_iter_add_class(IntPtr raw, int pos, IntPtr name);

		public void IterAddClass(int pos, string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gtk_widget_path_iter_add_class(Handle, pos, native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_widget_path_iter_add_region(IntPtr raw, int pos, IntPtr name, int flags);

		public void IterAddRegion(int pos, string name, Gtk.RegionFlags flags) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gtk_widget_path_iter_add_region(Handle, pos, native_name, (int) flags);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_widget_path_iter_clear_classes(IntPtr raw, int pos);

		public void IterClearClasses(int pos) {
			gtk_widget_path_iter_clear_classes(Handle, pos);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_widget_path_iter_clear_regions(IntPtr raw, int pos);

		public void IterClearRegions(int pos) {
			gtk_widget_path_iter_clear_regions(Handle, pos);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_widget_path_iter_get_name(IntPtr raw, int pos);

		public string IterGetName(int pos) {
			IntPtr raw_ret = gtk_widget_path_iter_get_name(Handle, pos);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_widget_path_iter_get_object_type(IntPtr raw, int pos);

		public GLib.GType IterGetObjectType(int pos) {
			IntPtr raw_ret = gtk_widget_path_iter_get_object_type(Handle, pos);
			GLib.GType ret = new GLib.GType(raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_widget_path_iter_has_class(IntPtr raw, int pos, IntPtr name);

		public bool IterHasClass(int pos, string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = gtk_widget_path_iter_has_class(Handle, pos, native_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_widget_path_iter_has_name(IntPtr raw, int pos, IntPtr name);

		public bool IterHasName(int pos, string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = gtk_widget_path_iter_has_name(Handle, pos, native_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_widget_path_iter_has_qclass(IntPtr raw, int pos, int qname);

		public bool IterHasQclass(int pos, int qname) {
			bool raw_ret = gtk_widget_path_iter_has_qclass(Handle, pos, qname);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_widget_path_iter_has_qname(IntPtr raw, int pos, int qname);

		public bool IterHasQname(int pos, int qname) {
			bool raw_ret = gtk_widget_path_iter_has_qname(Handle, pos, qname);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_widget_path_iter_has_qregion(IntPtr raw, int pos, int qname, out int flags);

		public bool IterHasQregion(int pos, int qname, out Gtk.RegionFlags flags) {
			int native_flags;
			bool raw_ret = gtk_widget_path_iter_has_qregion(Handle, pos, qname, out native_flags);
			bool ret = raw_ret;
			flags = (Gtk.RegionFlags) native_flags;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_widget_path_iter_has_region(IntPtr raw, int pos, IntPtr name, out int flags);

		public bool IterHasRegion(int pos, string name, out Gtk.RegionFlags flags) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			int native_flags;
			bool raw_ret = gtk_widget_path_iter_has_region(Handle, pos, native_name, out native_flags);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			flags = (Gtk.RegionFlags) native_flags;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_widget_path_iter_list_classes(IntPtr raw, int pos);

		public string[] IterListClasses(int pos) {
			IntPtr raw_ret = gtk_widget_path_iter_list_classes(Handle, pos);
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), true, false, typeof(string));
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_widget_path_iter_list_regions(IntPtr raw, int pos);

		public string[] IterListRegions(int pos) {
			IntPtr raw_ret = gtk_widget_path_iter_list_regions(Handle, pos);
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), true, false, typeof(string));
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_widget_path_iter_remove_class(IntPtr raw, int pos, IntPtr name);

		public void IterRemoveClass(int pos, string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gtk_widget_path_iter_remove_class(Handle, pos, native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_widget_path_iter_remove_region(IntPtr raw, int pos, IntPtr name);

		public void IterRemoveRegion(int pos, string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gtk_widget_path_iter_remove_region(Handle, pos, native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_widget_path_iter_set_name(IntPtr raw, int pos, IntPtr name);

		public void IterSetName(int pos, string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gtk_widget_path_iter_set_name(Handle, pos, native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_widget_path_iter_set_object_type(IntPtr raw, int pos, IntPtr type);

		public void IterSetObjectType(int pos, GLib.GType type) {
			gtk_widget_path_iter_set_object_type(Handle, pos, type.Val);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_widget_path_length(IntPtr raw);

		public int Length() {
			int raw_ret = gtk_widget_path_length(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_widget_path_prepend_type(IntPtr raw, IntPtr type);

		public void PrependType(GLib.GType type) {
			gtk_widget_path_prepend_type(Handle, type.Val);
		}

		public WidgetPath(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_widget_path_new();

		public WidgetPath () 
		{
			Raw = gtk_widget_path_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_widget_path_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gtk_widget_path_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gtk_widget_path_free (handle);
				return false;
			}
		}

		~WidgetPath ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
