// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class RadioButton : Gtk.CheckButton {

		public RadioButton (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_button_new_from_widget(IntPtr radio_group_member);

		public RadioButton (Gtk.RadioButton radio_group_member) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RadioButton)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (radio_group_member != null) {
					names.Add ("group");
					vals.Add (new GLib.Value (radio_group_member));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_radio_button_new_from_widget(radio_group_member == null ? IntPtr.Zero : radio_group_member.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_button_new_with_mnemonic_from_widget(IntPtr radio_group_member, IntPtr label);

		public RadioButton (Gtk.RadioButton radio_group_member, string label) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RadioButton)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (radio_group_member != null) {
					names.Add ("group");
					vals.Add (new GLib.Value (radio_group_member));
				}
				names.Add ("label");
				vals.Add (new GLib.Value (label));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			Raw = gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member == null ? IntPtr.Zero : radio_group_member.Handle, native_label);
			GLib.Marshaller.Free (native_label);
		}

		[GLib.Signal("group-changed")]
		public event System.EventHandler GroupChanged {
			add {
				this.AddSignalHandler ("group-changed", value);
			}
			remove {
				this.RemoveSignalHandler ("group-changed", value);
			}
		}

		static GroupChangedNativeDelegate GroupChanged_cb_delegate;
		static GroupChangedNativeDelegate GroupChangedVMCallback {
			get {
				if (GroupChanged_cb_delegate == null)
					GroupChanged_cb_delegate = new GroupChangedNativeDelegate (GroupChanged_cb);
				return GroupChanged_cb_delegate;
			}
		}

		static void OverrideGroupChanged (GLib.GType gtype)
		{
			OverrideGroupChanged (gtype, GroupChangedVMCallback);
		}

		static void OverrideGroupChanged (GLib.GType gtype, GroupChangedNativeDelegate callback)
		{
			GtkRadioButtonClass class_iface = GetClassStruct (gtype, false);
			class_iface.GroupChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GroupChangedNativeDelegate (IntPtr inst);

		static void GroupChanged_cb (IntPtr inst)
		{
			try {
				RadioButton __obj = GLib.Object.GetObject (inst, false) as RadioButton;
				__obj.OnGroupChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.RadioButton), ConnectionMethod="OverrideGroupChanged")]
		protected virtual void OnGroupChanged ()
		{
			InternalGroupChanged ();
		}

		private void InternalGroupChanged ()
		{
			GroupChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GroupChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkRadioButtonClass {
			public GroupChangedNativeDelegate GroupChanged;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.CheckButton)).GetClassSize ();
		static Dictionary<GLib.GType, GtkRadioButtonClass> class_structs;

		static GtkRadioButtonClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkRadioButtonClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkRadioButtonClass class_struct = (GtkRadioButtonClass) Marshal.PtrToStructure (class_ptr, typeof (GtkRadioButtonClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkRadioButtonClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_button_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_radio_button_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_radio_button_join_group(IntPtr raw, IntPtr group_source);

		public void JoinGroup(Gtk.RadioButton group_source) {
			gtk_radio_button_join_group(Handle, group_source == null ? IntPtr.Zero : group_source.Handle);
		}

#endregion
	}
}
