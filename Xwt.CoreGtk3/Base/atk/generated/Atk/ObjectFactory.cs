// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ObjectFactory : GLib.Object {

		public ObjectFactory (IntPtr raw) : base(raw) {}

		protected ObjectFactory() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		static CreateAccessibleNativeDelegate CreateAccessible_cb_delegate;
		static CreateAccessibleNativeDelegate CreateAccessibleVMCallback {
			get {
				if (CreateAccessible_cb_delegate == null)
					CreateAccessible_cb_delegate = new CreateAccessibleNativeDelegate (CreateAccessible_cb);
				return CreateAccessible_cb_delegate;
			}
		}

		public delegate Atk.Object CreateAccessibleDelegate (GLib.Object obj);
		static CreateAccessibleDelegate create_accessible_handler;

		public static CreateAccessibleDelegate CreateAccessibleHandler {
			set {
				create_accessible_handler = value;
				OverrideCreateAccessible ((GLib.GType) typeof (ObjectFactory), value == null ? null : CreateAccessibleVMCallback);
			}
		}

		static void OverrideCreateAccessible (GLib.GType gtype, CreateAccessibleNativeDelegate callback)
		{
			AtkObjectFactoryClass class_iface = GetClassStruct (gtype, false);
			class_iface.CreateAccessible = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr CreateAccessibleNativeDelegate (IntPtr obj);

		static IntPtr CreateAccessible_cb (IntPtr obj)
		{
			try {
				Atk.Object __result;
				__result = create_accessible_handler (GLib.Object.GetObject (obj));
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		static InvalidateNativeDelegate Invalidate_cb_delegate;
		static InvalidateNativeDelegate InvalidateVMCallback {
			get {
				if (Invalidate_cb_delegate == null)
					Invalidate_cb_delegate = new InvalidateNativeDelegate (Invalidate_cb);
				return Invalidate_cb_delegate;
			}
		}

		static void OverrideInvalidate (GLib.GType gtype)
		{
			OverrideInvalidate (gtype, InvalidateVMCallback);
		}

		static void OverrideInvalidate (GLib.GType gtype, InvalidateNativeDelegate callback)
		{
			AtkObjectFactoryClass class_iface = GetClassStruct (gtype, false);
			class_iface.Invalidate = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void InvalidateNativeDelegate (IntPtr inst);

		static void Invalidate_cb (IntPtr inst)
		{
			try {
				ObjectFactory __obj = GLib.Object.GetObject (inst, false) as ObjectFactory;
				__obj.OnInvalidate ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.ObjectFactory), ConnectionMethod="OverrideInvalidate")]
		protected virtual void OnInvalidate ()
		{
			InternalInvalidate ();
		}

		private void InternalInvalidate ()
		{
			InvalidateNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Invalidate;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static GetAccessibleTypeNativeDelegate GetAccessibleType_cb_delegate;
		static GetAccessibleTypeNativeDelegate GetAccessibleTypeVMCallback {
			get {
				if (GetAccessibleType_cb_delegate == null)
					GetAccessibleType_cb_delegate = new GetAccessibleTypeNativeDelegate (GetAccessibleType_cb);
				return GetAccessibleType_cb_delegate;
			}
		}

		public delegate GLib.GType GetAccessibleTypeDelegate ();
		static GetAccessibleTypeDelegate get_accessible_type_handler;

		public static GetAccessibleTypeDelegate GetAccessibleTypeHandler {
			set {
				get_accessible_type_handler = value;
				OverrideGetAccessibleType ((GLib.GType) typeof (ObjectFactory), value == null ? null : GetAccessibleTypeVMCallback);
			}
		}

		static void OverrideGetAccessibleType (GLib.GType gtype, GetAccessibleTypeNativeDelegate callback)
		{
			AtkObjectFactoryClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetAccessibleType = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetAccessibleTypeNativeDelegate ();

		static IntPtr GetAccessibleType_cb ()
		{
			try {
				GLib.GType __result;
				__result = get_accessible_type_handler ();
				return __result.Val;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct AtkObjectFactoryClass {
			public CreateAccessibleNativeDelegate CreateAccessible;
			public InvalidateNativeDelegate Invalidate;
			public GetAccessibleTypeNativeDelegate GetAccessibleType;
			private AtkSharp.FunctionNative pad1;
			public Atk.Function Pad1 {
				get {
					return AtkSharp.FunctionWrapper.GetManagedDelegate (pad1);
				}
			}
			private AtkSharp.FunctionNative pad2;
			public Atk.Function Pad2 {
				get {
					return AtkSharp.FunctionWrapper.GetManagedDelegate (pad2);
				}
			}
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, AtkObjectFactoryClass> class_structs;

		static AtkObjectFactoryClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, AtkObjectFactoryClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				AtkObjectFactoryClass class_struct = (AtkObjectFactoryClass) Marshal.PtrToStructure (class_ptr, typeof (AtkObjectFactoryClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, AtkObjectFactoryClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_object_factory_create_accessible(IntPtr raw, IntPtr obj);

		public Atk.Object CreateAccessible(GLib.Object obj) {
			IntPtr raw_ret = atk_object_factory_create_accessible(Handle, obj == null ? IntPtr.Zero : obj.Handle);
			Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_object_factory_get_accessible_type(IntPtr raw);

		public GLib.GType AccessibleType { 
			get {
				IntPtr raw_ret = atk_object_factory_get_accessible_type(Handle);
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_object_factory_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = atk_object_factory_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_object_factory_invalidate(IntPtr raw);

		public void Invalidate() {
			atk_object_factory_invalidate(Handle);
		}

#endregion
	}
}
