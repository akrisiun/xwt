// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Statusbar : Gtk.HBox {

		public Statusbar (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_statusbar_new();

		public Statusbar () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Statusbar)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_statusbar_new();
		}

		[GLib.Signal("text-popped")]
		public event Gtk.TextPoppedHandler TextPopped {
			add {
				this.AddSignalHandler ("text-popped", value, typeof (Gtk.TextPoppedArgs));
			}
			remove {
				this.RemoveSignalHandler ("text-popped", value);
			}
		}

		[GLib.Signal("text-pushed")]
		public event Gtk.TextPushedHandler TextPushed {
			add {
				this.AddSignalHandler ("text-pushed", value, typeof (Gtk.TextPushedArgs));
			}
			remove {
				this.RemoveSignalHandler ("text-pushed", value);
			}
		}

		static TextPushedNativeDelegate TextPushed_cb_delegate;
		static TextPushedNativeDelegate TextPushedVMCallback {
			get {
				if (TextPushed_cb_delegate == null)
					TextPushed_cb_delegate = new TextPushedNativeDelegate (TextPushed_cb);
				return TextPushed_cb_delegate;
			}
		}

		static void OverrideTextPushed (GLib.GType gtype)
		{
			OverrideTextPushed (gtype, TextPushedVMCallback);
		}

		static void OverrideTextPushed (GLib.GType gtype, TextPushedNativeDelegate callback)
		{
			GtkStatusbarClass class_iface = GetClassStruct (gtype, false);
			class_iface.TextPushed = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextPushedNativeDelegate (IntPtr inst, uint context_id, IntPtr text);

		static void TextPushed_cb (IntPtr inst, uint context_id, IntPtr text)
		{
			try {
				Statusbar __obj = GLib.Object.GetObject (inst, false) as Statusbar;
				__obj.OnTextPushed (context_id, GLib.Marshaller.Utf8PtrToString (text));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Statusbar), ConnectionMethod="OverrideTextPushed")]
		protected virtual void OnTextPushed (uint context_id, string text)
		{
			InternalTextPushed (context_id, text);
		}

		private void InternalTextPushed (uint context_id, string text)
		{
			TextPushedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).TextPushed;
			if (unmanaged == null) return;

			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			unmanaged (this.Handle, context_id, native_text);
			GLib.Marshaller.Free (native_text);
		}

		static TextPoppedNativeDelegate TextPopped_cb_delegate;
		static TextPoppedNativeDelegate TextPoppedVMCallback {
			get {
				if (TextPopped_cb_delegate == null)
					TextPopped_cb_delegate = new TextPoppedNativeDelegate (TextPopped_cb);
				return TextPopped_cb_delegate;
			}
		}

		static void OverrideTextPopped (GLib.GType gtype)
		{
			OverrideTextPopped (gtype, TextPoppedVMCallback);
		}

		static void OverrideTextPopped (GLib.GType gtype, TextPoppedNativeDelegate callback)
		{
			GtkStatusbarClass class_iface = GetClassStruct (gtype, false);
			class_iface.TextPopped = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextPoppedNativeDelegate (IntPtr inst, uint context_id, IntPtr text);

		static void TextPopped_cb (IntPtr inst, uint context_id, IntPtr text)
		{
			try {
				Statusbar __obj = GLib.Object.GetObject (inst, false) as Statusbar;
				__obj.OnTextPopped (context_id, GLib.Marshaller.Utf8PtrToString (text));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Statusbar), ConnectionMethod="OverrideTextPopped")]
		protected virtual void OnTextPopped (uint context_id, string text)
		{
			InternalTextPopped (context_id, text);
		}

		private void InternalTextPopped (uint context_id, string text)
		{
			TextPoppedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).TextPopped;
			if (unmanaged == null) return;

			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			unmanaged (this.Handle, context_id, native_text);
			GLib.Marshaller.Free (native_text);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkStatusbarClass {
			private IntPtr _reserved;
			public TextPushedNativeDelegate TextPushed;
			public TextPoppedNativeDelegate TextPopped;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.HBox)).GetClassSize ();
		static Dictionary<GLib.GType, GtkStatusbarClass> class_structs;

		static GtkStatusbarClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkStatusbarClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkStatusbarClass class_struct = (GtkStatusbarClass) Marshal.PtrToStructure (class_ptr, typeof (GtkStatusbarClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkStatusbarClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_statusbar_get_context_id(IntPtr raw, IntPtr context_description);

		public uint GetContextId(string context_description) {
			IntPtr native_context_description = GLib.Marshaller.StringToPtrGStrdup (context_description);
			uint raw_ret = gtk_statusbar_get_context_id(Handle, native_context_description);
			uint ret = raw_ret;
			GLib.Marshaller.Free (native_context_description);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_statusbar_get_message_area(IntPtr raw);

		public Gtk.Widget MessageArea { 
			get {
				IntPtr raw_ret = gtk_statusbar_get_message_area(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_statusbar_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_statusbar_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_statusbar_pop(IntPtr raw, uint context_id);

		public void Pop(uint context_id) {
			gtk_statusbar_pop(Handle, context_id);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_statusbar_push(IntPtr raw, uint context_id, IntPtr text);

		public uint Push(uint context_id, string text) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			uint raw_ret = gtk_statusbar_push(Handle, context_id, native_text);
			uint ret = raw_ret;
			GLib.Marshaller.Free (native_text);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_statusbar_remove(IntPtr raw, uint context_id, uint message_id);

		public void Remove(uint context_id, uint message_id) {
			gtk_statusbar_remove(Handle, context_id, message_id);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_statusbar_remove_all(IntPtr raw, uint context_id);

		public void RemoveAll(uint context_id) {
			gtk_statusbar_remove_all(Handle, context_id);
		}

#endregion
	}
}
