// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib
{

    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;

    public partial class LoadGlib
    {

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_application_get_type();

        /// <summary>
        /// GLib.LoadGlib.GType load
        /// </summary>
        public static GLib.GType GType {
            get {
                IntPtr raw_ret = g_application_get_type();
                GLib.GType ret = new GLib.GType(raw_ret);
                return ret;
            }
        }
    }

    #region Autogenerated code
    public partial class Application : GLib.Object, GLib.IActionGroup
    {

        public Application(IntPtr raw) : base(raw) { }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_application_new(IntPtr application_id, int flags);

        public Application(string application_id, GLib.ApplicationFlags flags) : base(IntPtr.Zero)
        {
            if (GetType() != typeof(Application)) {
                var vals = new List<GLib.Value>();
                var names = new List<string>();
                names.Add("application_id");
                vals.Add(new GLib.Value(application_id));
                names.Add("flags");
                vals.Add(new GLib.Value(flags));
                CreateNativeObject(names.ToArray(), vals.ToArray());
                return;
            }
            IntPtr native_application_id = GLib.Marshaller.StringToPtrGStrdup(application_id);
            Raw = g_application_new(native_application_id, (int)flags);
            GLib.Marshaller.Free(native_application_id);
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_application_get_application_id(IntPtr raw);

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_application_set_application_id(IntPtr raw, IntPtr application_id);

        [GLib.Property("application-id")]
        public string ApplicationId {
            get {
                IntPtr raw_ret = g_application_get_application_id(Handle);
                string ret = GLib.Marshaller.Utf8PtrToString(raw_ret);
                return ret;
            }
            set {
                IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup(value);
                g_application_set_application_id(Handle, native_value);
                GLib.Marshaller.Free(native_value);
            }
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_application_get_flags(IntPtr raw);

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_application_set_flags(IntPtr raw, int flags);

        [GLib.Property("flags")]
        public GLib.ApplicationFlags Flags {
            get {
                int raw_ret = g_application_get_flags(Handle);
                GLib.ApplicationFlags ret = (GLib.ApplicationFlags)raw_ret;
                return ret;
            }
            set {
                g_application_set_flags(Handle, (int)value);
            }
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_application_get_is_registered(IntPtr raw);

        [GLib.Property("is-registered")]
        public bool IsRegistered {
            get {
                bool raw_ret = g_application_get_is_registered(Handle);
                bool ret = raw_ret;
                return ret;
            }
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_application_get_is_remote(IntPtr raw);

        [GLib.Property("is-remote")]
        public bool IsRemote {
            get {
                bool raw_ret = g_application_get_is_remote(Handle);
                bool ret = raw_ret;
                return ret;
            }
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern uint g_application_get_inactivity_timeout(IntPtr raw);

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_application_set_inactivity_timeout(IntPtr raw, uint inactivity_timeout);

        [GLib.Property("inactivity-timeout")]
        public uint InactivityTimeout {
            get {
                uint raw_ret = g_application_get_inactivity_timeout(Handle);
                uint ret = raw_ret;
                return ret;
            }
            set {
                g_application_set_inactivity_timeout(Handle, value);
            }
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_application_set_action_group(IntPtr raw, IntPtr action_group);

        [GLib.Property("action-group")]
        public GLib.IActionGroup ActionGroup {
            set {
                g_application_set_action_group(Handle, value == null ? IntPtr.Zero : ((value is GLib.Object) ? (value as GLib.Object).Handle : (value as GLib.ActionGroupAdapter).Handle));
            }
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate void OpenedSignalDelegate(IntPtr inst, IntPtr arg0, int arg1, IntPtr arg2, IntPtr gch);

        static void OpenedSignalCallback(IntPtr inst, IntPtr arg0, int arg1, IntPtr arg2, IntPtr gch)
        {
            GLib.OpenedArgs args = new GLib.OpenedArgs();
            try {
                GLib.Signal sig = ((GCHandle)gch).Target as GLib.Signal;
                if (sig == null)
                    throw new Exception("Unknown signal GC handle received " + gch);

                args.Args = new object[3];
                args.Args[0] = GLib.FileAdapter.GetObject(arg0, false);
                args.Args[1] = arg1;
                args.Args[2] = GLib.Marshaller.Utf8PtrToString(arg2);
                GLib.OpenedHandler handler = (GLib.OpenedHandler)sig.Handler;
                handler(GLib.Object.GetObject(inst), args);
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, false);
            }
        }

        [GLib.Signal("open")]
        public event GLib.OpenedHandler Opened {
            add {
                this.AddSignalHandler("open", value, new OpenedSignalDelegate(OpenedSignalCallback));
            }
            remove {
                this.RemoveSignalHandler("open", value);
            }
        }

        [GLib.Signal("activate")]
        public event System.EventHandler Activated {
            add {
                this.AddSignalHandler("activate", value);
            }
            remove {
                this.RemoveSignalHandler("activate", value);
            }
        }

        [GLib.Signal("command-line")]
        public event GLib.CommandLineHandler CommandLine {
            add {
                this.AddSignalHandler("command-line", value, typeof(GLib.CommandLineArgs));
            }
            remove {
                this.RemoveSignalHandler("command-line", value);
            }
        }

        [GLib.Signal("startup")]
        public event System.EventHandler Startup {
            add {
                this.AddSignalHandler("startup", value);
            }
            remove {
                this.RemoveSignalHandler("startup", value);
            }
        }

        static StartupNativeDelegate Startup_cb_delegate;
        static StartupNativeDelegate StartupVMCallback {
            get {
                if (Startup_cb_delegate == null)
                    Startup_cb_delegate = new StartupNativeDelegate(Startup_cb);
                return Startup_cb_delegate;
            }
        }

        static void OverrideStartup(GLib.GType gtype)
        {
            OverrideStartup(gtype, StartupVMCallback);
        }

        static void OverrideStartup(GLib.GType gtype, StartupNativeDelegate callback)
        {
            GApplicationClass class_iface = GetClassStruct(gtype, false);
            class_iface.Startup = callback;
            OverrideClassStruct(gtype, class_iface);
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate void StartupNativeDelegate(IntPtr inst);

        static void Startup_cb(IntPtr inst)
        {
            try {
                Application __obj = GLib.Object.GetObject(inst, false) as Application;
                __obj.OnStartup();
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, false);
            }
        }

        [GLib.DefaultSignalHandler(Type = typeof(GLib.Application), ConnectionMethod = "OverrideStartup")]
        protected virtual void OnStartup()
        {
            InternalStartup();
        }

        private void InternalStartup()
        {
            StartupNativeDelegate unmanaged = GetClassStruct(this.LookupGType().GetThresholdType(), true).Startup;
            if (unmanaged == null)
                return;

            unmanaged(this.Handle);
        }

        static ActivatedNativeDelegate Activated_cb_delegate;
        static ActivatedNativeDelegate ActivatedVMCallback {
            get {
                if (Activated_cb_delegate == null)
                    Activated_cb_delegate = new ActivatedNativeDelegate(Activated_cb);
                return Activated_cb_delegate;
            }
        }

        static void OverrideActivated(GLib.GType gtype)
        {
            OverrideActivated(gtype, ActivatedVMCallback);
        }

        static void OverrideActivated(GLib.GType gtype, ActivatedNativeDelegate callback)
        {
            GApplicationClass class_iface = GetClassStruct(gtype, false);
            class_iface.Activated = callback;
            OverrideClassStruct(gtype, class_iface);
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate void ActivatedNativeDelegate(IntPtr inst);

        static void Activated_cb(IntPtr inst)
        {
            try {
                Application __obj = GLib.Object.GetObject(inst, false) as Application;
                __obj.OnActivated();
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, false);
            }
        }

        [GLib.DefaultSignalHandler(Type = typeof(GLib.Application), ConnectionMethod = "OverrideActivated")]
        protected virtual void OnActivated()
        {
            InternalActivated();
        }

        private void InternalActivated()
        {
            ActivatedNativeDelegate unmanaged = GetClassStruct(this.LookupGType().GetThresholdType(), true).Activated;
            if (unmanaged == null)
                return;

            unmanaged(this.Handle);
        }

        static OpenedNativeDelegate Opened_cb_delegate;
        static OpenedNativeDelegate OpenedVMCallback {
            get {
                if (Opened_cb_delegate == null)
                    Opened_cb_delegate = new OpenedNativeDelegate(Opened_cb);
                return Opened_cb_delegate;
            }
        }

        static void OverrideOpened(GLib.GType gtype)
        {
            OverrideOpened(gtype, OpenedVMCallback);
        }

        static void OverrideOpened(GLib.GType gtype, OpenedNativeDelegate callback)
        {
            GApplicationClass class_iface = GetClassStruct(gtype, false);
            class_iface.Opened = callback;
            OverrideClassStruct(gtype, class_iface);
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate void OpenedNativeDelegate(IntPtr inst, IntPtr files, int n_files, IntPtr hint);

        static void Opened_cb(IntPtr inst, IntPtr files, int n_files, IntPtr hint)
        {
            try {
                Application __obj = GLib.Object.GetObject(inst, false) as Application;
                __obj.OnOpened(GLib.FileAdapter.GetObject(files, false), n_files, GLib.Marshaller.Utf8PtrToString(hint));
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, false);
            }
        }

        [GLib.DefaultSignalHandler(Type = typeof(GLib.Application), ConnectionMethod = "OverrideOpened")]
        protected virtual void OnOpened(GLib.IFile files, int n_files, string hint)
        {
            InternalOpened(files, n_files, hint);
        }

        private void InternalOpened(GLib.IFile files, int n_files, string hint)
        {
            OpenedNativeDelegate unmanaged = GetClassStruct(this.LookupGType().GetThresholdType(), true).Opened;
            if (unmanaged == null)
                return;

            IntPtr native_hint = GLib.Marshaller.StringToPtrGStrdup(hint);
            unmanaged(this.Handle, files == null ? IntPtr.Zero : ((files is GLib.Object) ? (files as GLib.Object).Handle : (files as GLib.FileAdapter).Handle), n_files, native_hint);
            GLib.Marshaller.Free(native_hint);
        }

        static CommandLineNativeDelegate CommandLine_cb_delegate;
        static CommandLineNativeDelegate CommandLineVMCallback {
            get {
                if (CommandLine_cb_delegate == null)
                    CommandLine_cb_delegate = new CommandLineNativeDelegate(CommandLine_cb);
                return CommandLine_cb_delegate;
            }
        }

        static void OverrideCommandLine(GLib.GType gtype)
        {
            OverrideCommandLine(gtype, CommandLineVMCallback);
        }

        static void OverrideCommandLine(GLib.GType gtype, CommandLineNativeDelegate callback)
        {
            GApplicationClass class_iface = GetClassStruct(gtype, false);
            class_iface.CommandLine = callback;
            OverrideClassStruct(gtype, class_iface);
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate int CommandLineNativeDelegate(IntPtr inst, IntPtr command_line);

        static int CommandLine_cb(IntPtr inst, IntPtr command_line)
        {
            try {
                Application __obj = GLib.Object.GetObject(inst, false) as Application;
                int __result;
                __result = __obj.OnCommandLine(GLib.Object.GetObject(command_line) as GLib.ApplicationCommandLine);
                return __result;
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, true);
                // NOTREACHED: above call does not return.
                throw e;
            }
        }

        [GLib.DefaultSignalHandler(Type = typeof(GLib.Application), ConnectionMethod = "OverrideCommandLine")]
        protected virtual int OnCommandLine(GLib.ApplicationCommandLine command_line)
        {
            return InternalCommandLine(command_line);
        }

        private int InternalCommandLine(GLib.ApplicationCommandLine command_line)
        {
            CommandLineNativeDelegate unmanaged = GetClassStruct(this.LookupGType().GetThresholdType(), true).CommandLine;
            if (unmanaged == null)
                return 0;

            int __result = unmanaged(this.Handle, command_line == null ? IntPtr.Zero : command_line.Handle);
            return __result;
        }

        static LocalCommandLineNativeDelegate LocalCommandLine_cb_delegate;
        static LocalCommandLineNativeDelegate LocalCommandLineVMCallback {
            get {
                if (LocalCommandLine_cb_delegate == null)
                    LocalCommandLine_cb_delegate = new LocalCommandLineNativeDelegate(LocalCommandLine_cb);
                return LocalCommandLine_cb_delegate;
            }
        }

        static void OverrideLocalCommandLine(GLib.GType gtype)
        {
            OverrideLocalCommandLine(gtype, LocalCommandLineVMCallback);
        }

        static void OverrideLocalCommandLine(GLib.GType gtype, LocalCommandLineNativeDelegate callback)
        {
            GApplicationClass class_iface = GetClassStruct(gtype, false);
            class_iface.LocalCommandLine = callback;
            OverrideClassStruct(gtype, class_iface);
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate bool LocalCommandLineNativeDelegate(IntPtr inst, IntPtr arguments, out int exit_status);

        static bool LocalCommandLine_cb(IntPtr inst, IntPtr arguments, out int exit_status)
        {
            try {
                Application __obj = GLib.Object.GetObject(inst, false) as Application;
                bool __result;
                __result = __obj.OnLocalCommandLine(GLib.Marshaller.PtrToStringGFree(arguments), out exit_status);
                return __result;
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, true);
                // NOTREACHED: above call does not return.
                throw e;
            }
        }

        [GLib.DefaultSignalHandler(Type = typeof(GLib.Application), ConnectionMethod = "OverrideLocalCommandLine")]
        protected virtual bool OnLocalCommandLine(string arguments, out int exit_status)
        {
            return InternalLocalCommandLine(arguments, out exit_status);
        }

        private bool InternalLocalCommandLine(string arguments, out int exit_status)
        {
            LocalCommandLineNativeDelegate unmanaged = GetClassStruct(this.LookupGType().GetThresholdType(), true).LocalCommandLine;
            if (unmanaged == null)
                throw new InvalidOperationException("No base method to invoke");

            bool __result = unmanaged(this.Handle, GLib.Marshaller.StringToPtrGStrdup(arguments), out exit_status);
            return __result;
        }

        static BeforeEmitNativeDelegate BeforeEmit_cb_delegate;
        static BeforeEmitNativeDelegate BeforeEmitVMCallback {
            get {
                if (BeforeEmit_cb_delegate == null)
                    BeforeEmit_cb_delegate = new BeforeEmitNativeDelegate(BeforeEmit_cb);
                return BeforeEmit_cb_delegate;
            }
        }

        static void OverrideBeforeEmit(GLib.GType gtype)
        {
            OverrideBeforeEmit(gtype, BeforeEmitVMCallback);
        }

        static void OverrideBeforeEmit(GLib.GType gtype, BeforeEmitNativeDelegate callback)
        {
            GApplicationClass class_iface = GetClassStruct(gtype, false);
            class_iface.BeforeEmit = callback;
            OverrideClassStruct(gtype, class_iface);
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate void BeforeEmitNativeDelegate(IntPtr inst, IntPtr platform_data);

        static void BeforeEmit_cb(IntPtr inst, IntPtr platform_data)
        {
            try {
                Application __obj = GLib.Object.GetObject(inst, false) as Application;
                __obj.OnBeforeEmit(new GLib.Variant(platform_data));
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, false);
            }
        }

        [GLib.DefaultSignalHandler(Type = typeof(GLib.Application), ConnectionMethod = "OverrideBeforeEmit")]
        protected virtual void OnBeforeEmit(GLib.Variant platform_data)
        {
            InternalBeforeEmit(platform_data);
        }

        private void InternalBeforeEmit(GLib.Variant platform_data)
        {
            BeforeEmitNativeDelegate unmanaged = GetClassStruct(this.LookupGType().GetThresholdType(), true).BeforeEmit;
            if (unmanaged == null)
                return;

            unmanaged(this.Handle, platform_data == null ? IntPtr.Zero : platform_data.Handle);
        }

        static AfterEmitNativeDelegate AfterEmit_cb_delegate;
        static AfterEmitNativeDelegate AfterEmitVMCallback {
            get {
                if (AfterEmit_cb_delegate == null)
                    AfterEmit_cb_delegate = new AfterEmitNativeDelegate(AfterEmit_cb);
                return AfterEmit_cb_delegate;
            }
        }

        static void OverrideAfterEmit(GLib.GType gtype)
        {
            OverrideAfterEmit(gtype, AfterEmitVMCallback);
        }

        static void OverrideAfterEmit(GLib.GType gtype, AfterEmitNativeDelegate callback)
        {
            GApplicationClass class_iface = GetClassStruct(gtype, false);
            class_iface.AfterEmit = callback;
            OverrideClassStruct(gtype, class_iface);
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate void AfterEmitNativeDelegate(IntPtr inst, IntPtr platform_data);

        static void AfterEmit_cb(IntPtr inst, IntPtr platform_data)
        {
            try {
                Application __obj = GLib.Object.GetObject(inst, false) as Application;
                __obj.OnAfterEmit(new GLib.Variant(platform_data));
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, false);
            }
        }

        [GLib.DefaultSignalHandler(Type = typeof(GLib.Application), ConnectionMethod = "OverrideAfterEmit")]
        protected virtual void OnAfterEmit(GLib.Variant platform_data)
        {
            InternalAfterEmit(platform_data);
        }

        private void InternalAfterEmit(GLib.Variant platform_data)
        {
            AfterEmitNativeDelegate unmanaged = GetClassStruct(this.LookupGType().GetThresholdType(), true).AfterEmit;
            if (unmanaged == null)
                return;

            unmanaged(this.Handle, platform_data == null ? IntPtr.Zero : platform_data.Handle);
        }

        static QuitMainloopNativeDelegate QuitMainloop_cb_delegate;
        static QuitMainloopNativeDelegate QuitMainloopVMCallback {
            get {
                if (QuitMainloop_cb_delegate == null)
                    QuitMainloop_cb_delegate = new QuitMainloopNativeDelegate(QuitMainloop_cb);
                return QuitMainloop_cb_delegate;
            }
        }

        static void OverrideQuitMainloop(GLib.GType gtype)
        {
            OverrideQuitMainloop(gtype, QuitMainloopVMCallback);
        }

        static void OverrideQuitMainloop(GLib.GType gtype, QuitMainloopNativeDelegate callback)
        {
            GApplicationClass class_iface = GetClassStruct(gtype, false);
            class_iface.QuitMainloop = callback;
            OverrideClassStruct(gtype, class_iface);
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate void QuitMainloopNativeDelegate(IntPtr inst);

        static void QuitMainloop_cb(IntPtr inst)
        {
            try {
                Application __obj = GLib.Object.GetObject(inst, false) as Application;
                __obj.OnQuitMainloop();
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, false);
            }
        }

        [GLib.DefaultSignalHandler(Type = typeof(GLib.Application), ConnectionMethod = "OverrideQuitMainloop")]
        protected virtual void OnQuitMainloop()
        {
            InternalQuitMainloop();
        }

        private void InternalQuitMainloop()
        {
            QuitMainloopNativeDelegate unmanaged = GetClassStruct(this.LookupGType().GetThresholdType(), true).QuitMainloop;
            if (unmanaged == null)
                return;

            unmanaged(this.Handle);
        }

        static RunMainloopNativeDelegate RunMainloop_cb_delegate;
        static RunMainloopNativeDelegate RunMainloopVMCallback {
            get {
                if (RunMainloop_cb_delegate == null)
                    RunMainloop_cb_delegate = new RunMainloopNativeDelegate(RunMainloop_cb);
                return RunMainloop_cb_delegate;
            }
        }

        static void OverrideRunMainloop(GLib.GType gtype)
        {
            OverrideRunMainloop(gtype, RunMainloopVMCallback);
        }

        static void OverrideRunMainloop(GLib.GType gtype, RunMainloopNativeDelegate callback)
        {
            GApplicationClass class_iface = GetClassStruct(gtype, false);
            class_iface.RunMainloop = callback;
            OverrideClassStruct(gtype, class_iface);
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate void RunMainloopNativeDelegate(IntPtr inst);

        static void RunMainloop_cb(IntPtr inst)
        {
            try {
                Application __obj = GLib.Object.GetObject(inst, false) as Application;
                __obj.OnRunMainloop();
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, false);
            }
        }

        [GLib.DefaultSignalHandler(Type = typeof(GLib.Application), ConnectionMethod = "OverrideRunMainloop")]
        protected virtual void OnRunMainloop()
        {
            InternalRunMainloop();
        }

        private void InternalRunMainloop()
        {
            RunMainloopNativeDelegate unmanaged = GetClassStruct(this.LookupGType().GetThresholdType(), true).RunMainloop;
            if (unmanaged == null)
                return;

            unmanaged(this.Handle);
        }

        [StructLayout(LayoutKind.Sequential)]
        struct GApplicationClass
        {
            public StartupNativeDelegate Startup;
            public ActivatedNativeDelegate Activated;
            public OpenedNativeDelegate Opened;
            public CommandLineNativeDelegate CommandLine;
            public LocalCommandLineNativeDelegate LocalCommandLine;
            public BeforeEmitNativeDelegate BeforeEmit;
            public AfterEmitNativeDelegate AfterEmit;
            IntPtr AddPlatformData;
            public QuitMainloopNativeDelegate QuitMainloop;
            public RunMainloopNativeDelegate RunMainloop;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 12)]
            private IntPtr[] Padding;
        }

        static uint class_offset = ((GLib.GType)typeof(GLib.Object)).GetClassSize();
        static Dictionary<GLib.GType, GApplicationClass> class_structs;

        static GApplicationClass GetClassStruct(GLib.GType gtype, bool use_cache)
        {
            if (class_structs == null)
                class_structs = new Dictionary<GLib.GType, GApplicationClass>();

            if (use_cache && class_structs.ContainsKey(gtype))
                return class_structs[gtype];
            else {
                IntPtr class_ptr = new IntPtr(gtype.GetClassPtr().ToInt64() + class_offset);
                GApplicationClass class_struct = (GApplicationClass)Marshal.PtrToStructure(class_ptr, typeof(GApplicationClass));
                if (use_cache)
                    class_structs.Add(gtype, class_struct);
                return class_struct;
            }
        }

        static void OverrideClassStruct(GLib.GType gtype, GApplicationClass class_struct)
        {
            IntPtr class_ptr = new IntPtr(gtype.GetClassPtr().ToInt64() + class_offset);
            Marshal.StructureToPtr(class_struct, class_ptr, false);
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_application_activate(IntPtr raw);

        public void Activate()
        {
            g_application_activate(Handle);
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_application_get_type();

        public static new GLib.GType GType {
            get {
                IntPtr raw_ret = g_application_get_type();
                GLib.GType ret = new GLib.GType(raw_ret);
                return ret;
            }
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_application_hold(IntPtr raw);

        public void Hold()
        {
            g_application_hold(Handle);
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_application_id_is_valid(IntPtr application_id);

        public static bool IdIsValid(string application_id)
        {
            IntPtr native_application_id = GLib.Marshaller.StringToPtrGStrdup(application_id);
            bool raw_ret = g_application_id_is_valid(native_application_id);
            bool ret = raw_ret;
            GLib.Marshaller.Free(native_application_id);
            return ret;
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_application_open(IntPtr raw, IntPtr files, int n_files, IntPtr hint);

        public void Open(GLib.IFile files, int n_files, string hint)
        {
            IntPtr native_hint = GLib.Marshaller.StringToPtrGStrdup(hint);
            g_application_open(Handle, files == null ? IntPtr.Zero : ((files is GLib.Object) ? (files as GLib.Object).Handle : (files as GLib.FileAdapter).Handle), n_files, native_hint);
            GLib.Marshaller.Free(native_hint);
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern unsafe bool g_application_register(IntPtr raw, IntPtr cancellable, out IntPtr error);

        public unsafe bool Register(GLib.Cancellable cancellable)
        {
            IntPtr error = IntPtr.Zero;
            bool raw_ret = g_application_register(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
            bool ret = raw_ret;
            if (error != IntPtr.Zero)
                throw new GLib.GException(error);
            return ret;
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_application_release(IntPtr raw);

        public void Release()
        {
            g_application_release(Handle);
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_action_group_action_added(IntPtr raw, IntPtr action_name);

        public void EmitActionAdded(string action_name)
        {
            IntPtr native_action_name = GLib.Marshaller.StringToPtrGStrdup(action_name);
            g_action_group_action_added(Handle, native_action_name);
            GLib.Marshaller.Free(native_action_name);
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_action_group_action_enabled_changed(IntPtr raw, IntPtr action_name, bool enabled);

        public void EmitActionEnabledChanged(string action_name, bool enabled)
        {
            IntPtr native_action_name = GLib.Marshaller.StringToPtrGStrdup(action_name);
            g_action_group_action_enabled_changed(Handle, native_action_name, enabled);
            GLib.Marshaller.Free(native_action_name);
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_action_group_action_removed(IntPtr raw, IntPtr action_name);

        public void EmitActionRemoved(string action_name)
        {
            IntPtr native_action_name = GLib.Marshaller.StringToPtrGStrdup(action_name);
            g_action_group_action_removed(Handle, native_action_name);
            GLib.Marshaller.Free(native_action_name);
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_action_group_action_state_changed(IntPtr raw, IntPtr action_name, IntPtr state);

        public void EmitActionStateChanged(string action_name, GLib.Variant state)
        {
            IntPtr native_action_name = GLib.Marshaller.StringToPtrGStrdup(action_name);
            g_action_group_action_state_changed(Handle, native_action_name, state == null ? IntPtr.Zero : state.Handle);
            GLib.Marshaller.Free(native_action_name);
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_action_group_activate_action(IntPtr raw, IntPtr action_name, IntPtr parameter);

        public void ActivateAction(string action_name, GLib.Variant parameter)
        {
            IntPtr native_action_name = GLib.Marshaller.StringToPtrGStrdup(action_name);
            g_action_group_activate_action(Handle, native_action_name, parameter == null ? IntPtr.Zero : parameter.Handle);
            GLib.Marshaller.Free(native_action_name);
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_action_group_change_action_state(IntPtr raw, IntPtr action_name, IntPtr value);

        public void ChangeActionState(string action_name, GLib.Variant value)
        {
            IntPtr native_action_name = GLib.Marshaller.StringToPtrGStrdup(action_name);
            g_action_group_change_action_state(Handle, native_action_name, value == null ? IntPtr.Zero : value.Handle);
            GLib.Marshaller.Free(native_action_name);
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_action_group_get_action_enabled(IntPtr raw, IntPtr action_name);

        public bool GetActionEnabled(string action_name)
        {
            IntPtr native_action_name = GLib.Marshaller.StringToPtrGStrdup(action_name);
            bool raw_ret = g_action_group_get_action_enabled(Handle, native_action_name);
            bool ret = raw_ret;
            GLib.Marshaller.Free(native_action_name);
            return ret;
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_action_group_get_action_parameter_type(IntPtr raw, IntPtr action_name);

        public GLib.VariantType GetActionParameterType(string action_name)
        {
            IntPtr native_action_name = GLib.Marshaller.StringToPtrGStrdup(action_name);
            IntPtr raw_ret = g_action_group_get_action_parameter_type(Handle, native_action_name);
            GLib.VariantType ret = new GLib.VariantType(raw_ret);
            GLib.Marshaller.Free(native_action_name);
            return ret;
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_action_group_get_action_state(IntPtr raw, IntPtr action_name);

        public GLib.Variant GetActionState(string action_name)
        {
            IntPtr native_action_name = GLib.Marshaller.StringToPtrGStrdup(action_name);
            IntPtr raw_ret = g_action_group_get_action_state(Handle, native_action_name);
            GLib.Variant ret = new GLib.Variant(raw_ret);
            GLib.Marshaller.Free(native_action_name);
            return ret;
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_action_group_get_action_state_hint(IntPtr raw, IntPtr action_name);

        public GLib.Variant GetActionStateHint(string action_name)
        {
            IntPtr native_action_name = GLib.Marshaller.StringToPtrGStrdup(action_name);
            IntPtr raw_ret = g_action_group_get_action_state_hint(Handle, native_action_name);
            GLib.Variant ret = new GLib.Variant(raw_ret);
            GLib.Marshaller.Free(native_action_name);
            return ret;
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_action_group_get_action_state_type(IntPtr raw, IntPtr action_name);

        public GLib.VariantType GetActionStateType(string action_name)
        {
            IntPtr native_action_name = GLib.Marshaller.StringToPtrGStrdup(action_name);
            IntPtr raw_ret = g_action_group_get_action_state_type(Handle, native_action_name);
            GLib.VariantType ret = new GLib.VariantType(raw_ret);
            GLib.Marshaller.Free(native_action_name);
            return ret;
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_action_group_has_action(IntPtr raw, IntPtr action_name);

        public bool HasAction(string action_name)
        {
            IntPtr native_action_name = GLib.Marshaller.StringToPtrGStrdup(action_name);
            bool raw_ret = g_action_group_has_action(Handle, native_action_name);
            bool ret = raw_ret;
            GLib.Marshaller.Free(native_action_name);
            return ret;
        }

        [DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_action_group_list_actions(IntPtr raw);

        public string ListActions()
        {
            IntPtr raw_ret = g_action_group_list_actions(Handle);
            string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
            return ret;
        }

        [GLib.Signal("action-enabled-changed")]
        public event GLib.ActionEnabledChangedHandler ActionEnabledChanged {
            add {
                this.AddSignalHandler("action-enabled-changed", value, typeof(GLib.ActionEnabledChangedArgs));
            }
            remove {
                this.RemoveSignalHandler("action-enabled-changed", value);
            }
        }

        [GLib.Signal("action-removed")]
        public event GLib.ActionRemovedHandler ActionRemoved {
            add {
                this.AddSignalHandler("action-removed", value, typeof(GLib.ActionRemovedArgs));
            }
            remove {
                this.RemoveSignalHandler("action-removed", value);
            }
        }

        [GLib.Signal("action-state-changed")]
        public event GLib.ActionStateChangedHandler ActionStateChanged {
            add {
                this.AddSignalHandler("action-state-changed", value, typeof(GLib.ActionStateChangedArgs));
            }
            remove {
                this.RemoveSignalHandler("action-state-changed", value);
            }
        }

        [GLib.Signal("action-added")]
        public event GLib.ActionAddedHandler ActionAdded {
            add {
                this.AddSignalHandler("action-added", value, typeof(GLib.ActionAddedArgs));
            }
            remove {
                this.RemoveSignalHandler("action-added", value);
            }
        }

        static ActionAddedNativeDelegate ActionAdded_cb_delegate;
        static ActionAddedNativeDelegate ActionAddedVMCallback {
            get {
                if (ActionAdded_cb_delegate == null)
                    ActionAdded_cb_delegate = new ActionAddedNativeDelegate(ActionAdded_cb);
                return ActionAdded_cb_delegate;
            }
        }

        static void OverrideActionAdded(GLib.GType gtype)
        {
            OverrideActionAdded(gtype, ActionAddedVMCallback);
        }

        static void OverrideActionAdded(GLib.GType gtype, ActionAddedNativeDelegate callback)
        {
            OverrideVirtualMethod(gtype, "action-added", callback);
        }
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate void ActionAddedNativeDelegate(IntPtr inst, IntPtr action_name);

        static void ActionAdded_cb(IntPtr inst, IntPtr action_name)
        {
            try {
                GLib.Application __obj = GLib.Object.GetObject(inst, false) as GLib.Application;
                __obj.OnActionAdded(GLib.Marshaller.Utf8PtrToString(action_name));
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, false);
            }
        }

        [GLib.DefaultSignalHandler(Type = typeof(GLib.Application), ConnectionMethod = "OverrideActionAdded")]
        protected virtual void OnActionAdded(string action_name)
        {
            InternalActionAdded(action_name);
        }

        private void InternalActionAdded(string action_name)
        {
            GLib.Value ret = GLib.Value.Empty;
            GLib.ValueArray inst_and_params = new GLib.ValueArray(2);
            GLib.Value[] vals = new GLib.Value[2];
            vals[0] = new GLib.Value(this);
            inst_and_params.Append(vals[0]);
            vals[1] = new GLib.Value(action_name);
            inst_and_params.Append(vals[1]);
            g_signal_chain_from_overridden(inst_and_params.ArrayPtr, ref ret);
            foreach (GLib.Value v in vals)
                v.Dispose();
        }

        static ActionRemovedNativeDelegate ActionRemoved_cb_delegate;
        static ActionRemovedNativeDelegate ActionRemovedVMCallback {
            get {
                if (ActionRemoved_cb_delegate == null)
                    ActionRemoved_cb_delegate = new ActionRemovedNativeDelegate(ActionRemoved_cb);
                return ActionRemoved_cb_delegate;
            }
        }

        static void OverrideActionRemoved(GLib.GType gtype)
        {
            OverrideActionRemoved(gtype, ActionRemovedVMCallback);
        }

        static void OverrideActionRemoved(GLib.GType gtype, ActionRemovedNativeDelegate callback)
        {
            OverrideVirtualMethod(gtype, "action-removed", callback);
        }
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate void ActionRemovedNativeDelegate(IntPtr inst, IntPtr action_name);

        static void ActionRemoved_cb(IntPtr inst, IntPtr action_name)
        {
            try {
                GLib.Application __obj = GLib.Object.GetObject(inst, false) as GLib.Application;
                __obj.OnActionRemoved(GLib.Marshaller.Utf8PtrToString(action_name));
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, false);
            }
        }

        [GLib.DefaultSignalHandler(Type = typeof(GLib.Application), ConnectionMethod = "OverrideActionRemoved")]
        protected virtual void OnActionRemoved(string action_name)
        {
            InternalActionRemoved(action_name);
        }

        private void InternalActionRemoved(string action_name)
        {
            GLib.Value ret = GLib.Value.Empty;
            GLib.ValueArray inst_and_params = new GLib.ValueArray(2);
            GLib.Value[] vals = new GLib.Value[2];
            vals[0] = new GLib.Value(this);
            inst_and_params.Append(vals[0]);
            vals[1] = new GLib.Value(action_name);
            inst_and_params.Append(vals[1]);
            g_signal_chain_from_overridden(inst_and_params.ArrayPtr, ref ret);
            foreach (GLib.Value v in vals)
                v.Dispose();
        }

        static ActionEnabledChangedNativeDelegate ActionEnabledChanged_cb_delegate;
        static ActionEnabledChangedNativeDelegate ActionEnabledChangedVMCallback {
            get {
                if (ActionEnabledChanged_cb_delegate == null)
                    ActionEnabledChanged_cb_delegate = new ActionEnabledChangedNativeDelegate(ActionEnabledChanged_cb);
                return ActionEnabledChanged_cb_delegate;
            }
        }

        static void OverrideActionEnabledChanged(GLib.GType gtype)
        {
            OverrideActionEnabledChanged(gtype, ActionEnabledChangedVMCallback);
        }

        static void OverrideActionEnabledChanged(GLib.GType gtype, ActionEnabledChangedNativeDelegate callback)
        {
            OverrideVirtualMethod(gtype, "action-enabled-changed", callback);
        }
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate void ActionEnabledChangedNativeDelegate(IntPtr inst, IntPtr action_name, bool enabled);

        static void ActionEnabledChanged_cb(IntPtr inst, IntPtr action_name, bool enabled)
        {
            try {
                GLib.Application __obj = GLib.Object.GetObject(inst, false) as GLib.Application;
                __obj.OnActionEnabledChanged(GLib.Marshaller.Utf8PtrToString(action_name), enabled);
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, false);
            }
        }

        [GLib.DefaultSignalHandler(Type = typeof(GLib.Application), ConnectionMethod = "OverrideActionEnabledChanged")]
        protected virtual void OnActionEnabledChanged(string action_name, bool enabled)
        {
            InternalActionEnabledChanged(action_name, enabled);
        }

        private void InternalActionEnabledChanged(string action_name, bool enabled)
        {
            GLib.Value ret = GLib.Value.Empty;
            GLib.ValueArray inst_and_params = new GLib.ValueArray(3);
            GLib.Value[] vals = new GLib.Value[3];
            vals[0] = new GLib.Value(this);
            inst_and_params.Append(vals[0]);
            vals[1] = new GLib.Value(action_name);
            inst_and_params.Append(vals[1]);
            vals[2] = new GLib.Value(enabled);
            inst_and_params.Append(vals[2]);
            g_signal_chain_from_overridden(inst_and_params.ArrayPtr, ref ret);
            foreach (GLib.Value v in vals)
                v.Dispose();
        }

        static ActionStateChangedNativeDelegate ActionStateChanged_cb_delegate;
        static ActionStateChangedNativeDelegate ActionStateChangedVMCallback {
            get {
                if (ActionStateChanged_cb_delegate == null)
                    ActionStateChanged_cb_delegate = new ActionStateChangedNativeDelegate(ActionStateChanged_cb);
                return ActionStateChanged_cb_delegate;
            }
        }

        static void OverrideActionStateChanged(GLib.GType gtype)
        {
            OverrideActionStateChanged(gtype, ActionStateChangedVMCallback);
        }

        static void OverrideActionStateChanged(GLib.GType gtype, ActionStateChangedNativeDelegate callback)
        {
            OverrideVirtualMethod(gtype, "action-state-changed", callback);
        }
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate void ActionStateChangedNativeDelegate(IntPtr inst, IntPtr action_name, IntPtr value);

        static void ActionStateChanged_cb(IntPtr inst, IntPtr action_name, IntPtr value)
        {
            try {
                GLib.Application __obj = GLib.Object.GetObject(inst, false) as GLib.Application;
                __obj.OnActionStateChanged(GLib.Marshaller.Utf8PtrToString(action_name), new GLib.Variant(value));
            }
            catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException(e, false);
            }
        }

        [GLib.DefaultSignalHandler(Type = typeof(GLib.Application), ConnectionMethod = "OverrideActionStateChanged")]
        protected virtual void OnActionStateChanged(string action_name, GLib.Variant value)
        {
            InternalActionStateChanged(action_name, value);
        }

        private void InternalActionStateChanged(string action_name, GLib.Variant value)
        {
            GLib.Value ret = GLib.Value.Empty;
            GLib.ValueArray inst_and_params = new GLib.ValueArray(3);
            GLib.Value[] vals = new GLib.Value[3];
            vals[0] = new GLib.Value(this);
            inst_and_params.Append(vals[0]);
            vals[1] = new GLib.Value(action_name);
            inst_and_params.Append(vals[1]);
            vals[2] = new GLib.Value(value);
            inst_and_params.Append(vals[2]);
            g_signal_chain_from_overridden(inst_and_params.ArrayPtr, ref ret);
            foreach (GLib.Value v in vals)
                v.Dispose();
        }

        #endregion
    }
}
