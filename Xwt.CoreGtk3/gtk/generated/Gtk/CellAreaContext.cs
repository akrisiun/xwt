// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class CellAreaContext : GLib.Object {

		public CellAreaContext (IntPtr raw) : base(raw) {}

		protected CellAreaContext() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_area_context_get_area(IntPtr raw);

		[GLib.Property ("area")]
		public Gtk.CellArea Area {
			get  {
				IntPtr raw_ret = gtk_cell_area_context_get_area(Handle);
				Gtk.CellArea ret = GLib.Object.GetObject(raw_ret) as Gtk.CellArea;
				return ret;
			}
		}

		[GLib.Property ("minimum-width")]
		public int MinimumWidth {
			get {
				GLib.Value val = GetProperty ("minimum-width");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("natural-width")]
		public int NaturalWidth {
			get {
				GLib.Value val = GetProperty ("natural-width");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("minimum-height")]
		public int MinimumHeight {
			get {
				GLib.Value val = GetProperty ("minimum-height");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("natural-height")]
		public int NaturalHeight {
			get {
				GLib.Value val = GetProperty ("natural-height");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		static AllocateNativeDelegate Allocate_cb_delegate;
		static AllocateNativeDelegate AllocateVMCallback {
			get {
				if (Allocate_cb_delegate == null)
					Allocate_cb_delegate = new AllocateNativeDelegate (Allocate_cb);
				return Allocate_cb_delegate;
			}
		}

		static void OverrideAllocate (GLib.GType gtype)
		{
			OverrideAllocate (gtype, AllocateVMCallback);
		}

		static void OverrideAllocate (GLib.GType gtype, AllocateNativeDelegate callback)
		{
			GtkCellAreaContextClass class_iface = GetClassStruct (gtype, false);
			class_iface.Allocate = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AllocateNativeDelegate (IntPtr inst, int width, int height);

		static void Allocate_cb (IntPtr inst, int width, int height)
		{
			try {
				CellAreaContext __obj = GLib.Object.GetObject (inst, false) as CellAreaContext;
				__obj.OnAllocate (width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellAreaContext), ConnectionMethod="OverrideAllocate")]
		protected virtual void OnAllocate (int width, int height)
		{
			InternalAllocate (width, height);
		}

		private void InternalAllocate (int width, int height)
		{
			AllocateNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Allocate;
			if (unmanaged == null) return;

			unmanaged (this.Handle, width, height);
		}

		static ResetNativeDelegate Reset_cb_delegate;
		static ResetNativeDelegate ResetVMCallback {
			get {
				if (Reset_cb_delegate == null)
					Reset_cb_delegate = new ResetNativeDelegate (Reset_cb);
				return Reset_cb_delegate;
			}
		}

		static void OverrideReset (GLib.GType gtype)
		{
			OverrideReset (gtype, ResetVMCallback);
		}

		static void OverrideReset (GLib.GType gtype, ResetNativeDelegate callback)
		{
			GtkCellAreaContextClass class_iface = GetClassStruct (gtype, false);
			class_iface.Reset = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ResetNativeDelegate (IntPtr inst);

		static void Reset_cb (IntPtr inst)
		{
			try {
				CellAreaContext __obj = GLib.Object.GetObject (inst, false) as CellAreaContext;
				__obj.OnReset ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellAreaContext), ConnectionMethod="OverrideReset")]
		protected virtual void OnReset ()
		{
			InternalReset ();
		}

		private void InternalReset ()
		{
			ResetNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Reset;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static GetPreferredHeightForWidthNativeDelegate GetPreferredHeightForWidth_cb_delegate;
		static GetPreferredHeightForWidthNativeDelegate GetPreferredHeightForWidthVMCallback {
			get {
				if (GetPreferredHeightForWidth_cb_delegate == null)
					GetPreferredHeightForWidth_cb_delegate = new GetPreferredHeightForWidthNativeDelegate (GetPreferredHeightForWidth_cb);
				return GetPreferredHeightForWidth_cb_delegate;
			}
		}

		static void OverrideGetPreferredHeightForWidth (GLib.GType gtype)
		{
			OverrideGetPreferredHeightForWidth (gtype, GetPreferredHeightForWidthVMCallback);
		}

		static void OverrideGetPreferredHeightForWidth (GLib.GType gtype, GetPreferredHeightForWidthNativeDelegate callback)
		{
			GtkCellAreaContextClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetPreferredHeightForWidth = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetPreferredHeightForWidthNativeDelegate (IntPtr inst, int width, out int minimum_height, out int natural_height);

		static void GetPreferredHeightForWidth_cb (IntPtr inst, int width, out int minimum_height, out int natural_height)
		{
			try {
				CellAreaContext __obj = GLib.Object.GetObject (inst, false) as CellAreaContext;
				__obj.OnGetPreferredHeightForWidth (width, out minimum_height, out natural_height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellAreaContext), ConnectionMethod="OverrideGetPreferredHeightForWidth")]
		protected virtual void OnGetPreferredHeightForWidth (int width, out int minimum_height, out int natural_height)
		{
			InternalGetPreferredHeightForWidth (width, out minimum_height, out natural_height);
		}

		private void InternalGetPreferredHeightForWidth (int width, out int minimum_height, out int natural_height)
		{
			GetPreferredHeightForWidthNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetPreferredHeightForWidth;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			unmanaged (this.Handle, width, out minimum_height, out natural_height);
		}

		static GetPreferredWidthForHeightNativeDelegate GetPreferredWidthForHeight_cb_delegate;
		static GetPreferredWidthForHeightNativeDelegate GetPreferredWidthForHeightVMCallback {
			get {
				if (GetPreferredWidthForHeight_cb_delegate == null)
					GetPreferredWidthForHeight_cb_delegate = new GetPreferredWidthForHeightNativeDelegate (GetPreferredWidthForHeight_cb);
				return GetPreferredWidthForHeight_cb_delegate;
			}
		}

		static void OverrideGetPreferredWidthForHeight (GLib.GType gtype)
		{
			OverrideGetPreferredWidthForHeight (gtype, GetPreferredWidthForHeightVMCallback);
		}

		static void OverrideGetPreferredWidthForHeight (GLib.GType gtype, GetPreferredWidthForHeightNativeDelegate callback)
		{
			GtkCellAreaContextClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetPreferredWidthForHeight = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetPreferredWidthForHeightNativeDelegate (IntPtr inst, int height, out int minimum_width, out int natural_width);

		static void GetPreferredWidthForHeight_cb (IntPtr inst, int height, out int minimum_width, out int natural_width)
		{
			try {
				CellAreaContext __obj = GLib.Object.GetObject (inst, false) as CellAreaContext;
				__obj.OnGetPreferredWidthForHeight (height, out minimum_width, out natural_width);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellAreaContext), ConnectionMethod="OverrideGetPreferredWidthForHeight")]
		protected virtual void OnGetPreferredWidthForHeight (int height, out int minimum_width, out int natural_width)
		{
			InternalGetPreferredWidthForHeight (height, out minimum_width, out natural_width);
		}

		private void InternalGetPreferredWidthForHeight (int height, out int minimum_width, out int natural_width)
		{
			GetPreferredWidthForHeightNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetPreferredWidthForHeight;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			unmanaged (this.Handle, height, out minimum_width, out natural_width);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkCellAreaContextClass {
			public AllocateNativeDelegate Allocate;
			public ResetNativeDelegate Reset;
			public GetPreferredHeightForWidthNativeDelegate GetPreferredHeightForWidth;
			public GetPreferredWidthForHeightNativeDelegate GetPreferredWidthForHeight;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
			IntPtr GtkReserved5;
			IntPtr GtkReserved6;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkCellAreaContextClass> class_structs;

		static GtkCellAreaContextClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkCellAreaContextClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkCellAreaContextClass class_struct = (GtkCellAreaContextClass) Marshal.PtrToStructure (class_ptr, typeof (GtkCellAreaContextClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkCellAreaContextClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_context_allocate(IntPtr raw, int width, int height);

		public void Allocate(int width, int height) {
			gtk_cell_area_context_allocate(Handle, width, height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_context_get_allocation(IntPtr raw, out int width, out int height);

		public void GetAllocation(out int width, out int height) {
			gtk_cell_area_context_get_allocation(Handle, out width, out height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_context_get_preferred_height(IntPtr raw, out int minimum_height, out int natural_height);

		public void GetPreferredHeight(out int minimum_height, out int natural_height) {
			gtk_cell_area_context_get_preferred_height(Handle, out minimum_height, out natural_height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_context_get_preferred_height_for_width(IntPtr raw, int width, out int minimum_height, out int natural_height);

		public void GetPreferredHeightForWidth(int width, out int minimum_height, out int natural_height) {
			gtk_cell_area_context_get_preferred_height_for_width(Handle, width, out minimum_height, out natural_height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_context_get_preferred_width(IntPtr raw, out int minimum_width, out int natural_width);

		public void GetPreferredWidth(out int minimum_width, out int natural_width) {
			gtk_cell_area_context_get_preferred_width(Handle, out minimum_width, out natural_width);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_context_get_preferred_width_for_height(IntPtr raw, int height, out int minimum_width, out int natural_width);

		public void GetPreferredWidthForHeight(int height, out int minimum_width, out int natural_width) {
			gtk_cell_area_context_get_preferred_width_for_height(Handle, height, out minimum_width, out natural_width);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_area_context_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_cell_area_context_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_context_push_preferred_height(IntPtr raw, int minimum_height, int natural_height);

		public void PushPreferredHeight(int minimum_height, int natural_height) {
			gtk_cell_area_context_push_preferred_height(Handle, minimum_height, natural_height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_context_push_preferred_width(IntPtr raw, int minimum_width, int natural_width);

		public void PushPreferredWidth(int minimum_width, int natural_width) {
			gtk_cell_area_context_push_preferred_width(Handle, minimum_width, natural_width);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_context_reset(IntPtr raw);

		public void Reset() {
			gtk_cell_area_context_reset(Handle);
		}

#endregion
	}
}
