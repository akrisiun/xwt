// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ThemingEngine : GLib.Object {

		public ThemingEngine (IntPtr raw) : base(raw) {}

		protected ThemingEngine() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("name")]
		public string Name {
			get {
				GLib.Value val = GetProperty ("name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		static RenderLineNativeDelegate RenderLine_cb_delegate;
		static RenderLineNativeDelegate RenderLineVMCallback {
			get {
				if (RenderLine_cb_delegate == null)
					RenderLine_cb_delegate = new RenderLineNativeDelegate (RenderLine_cb);
				return RenderLine_cb_delegate;
			}
		}

		static void OverrideRenderLine (GLib.GType gtype)
		{
			OverrideRenderLine (gtype, RenderLineVMCallback);
		}

		static void OverrideRenderLine (GLib.GType gtype, RenderLineNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderLine = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderLineNativeDelegate (IntPtr inst, IntPtr cr, double x0, double y0, double x1, double y1);

		static void RenderLine_cb (IntPtr inst, IntPtr cr, double x0, double y0, double x1, double y1)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderLine (mycr, x0, y0, x1, y1);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderLine")]
		protected virtual void OnRenderLine (Cairo.Context cr, double x0, double y0, double x1, double y1)
		{
			InternalRenderLine (cr, x0, y0, x1, y1);
		}

		private void InternalRenderLine (Cairo.Context cr, double x0, double y0, double x1, double y1)
		{
			RenderLineNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderLine;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, x0, y0, x1, y1);
		}

		static RenderBackgroundNativeDelegate RenderBackground_cb_delegate;
		static RenderBackgroundNativeDelegate RenderBackgroundVMCallback {
			get {
				if (RenderBackground_cb_delegate == null)
					RenderBackground_cb_delegate = new RenderBackgroundNativeDelegate (RenderBackground_cb);
				return RenderBackground_cb_delegate;
			}
		}

		static void OverrideRenderBackground (GLib.GType gtype)
		{
			OverrideRenderBackground (gtype, RenderBackgroundVMCallback);
		}

		static void OverrideRenderBackground (GLib.GType gtype, RenderBackgroundNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderBackground = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderBackgroundNativeDelegate (IntPtr inst, IntPtr cr, double x, double y, double width, double height);

		static void RenderBackground_cb (IntPtr inst, IntPtr cr, double x, double y, double width, double height)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderBackground (mycr, x, y, width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderBackground")]
		protected virtual void OnRenderBackground (Cairo.Context cr, double x, double y, double width, double height)
		{
			InternalRenderBackground (cr, x, y, width, height);
		}

		private void InternalRenderBackground (Cairo.Context cr, double x, double y, double width, double height)
		{
			RenderBackgroundNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderBackground;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		static RenderFrameNativeDelegate RenderFrame_cb_delegate;
		static RenderFrameNativeDelegate RenderFrameVMCallback {
			get {
				if (RenderFrame_cb_delegate == null)
					RenderFrame_cb_delegate = new RenderFrameNativeDelegate (RenderFrame_cb);
				return RenderFrame_cb_delegate;
			}
		}

		static void OverrideRenderFrame (GLib.GType gtype)
		{
			OverrideRenderFrame (gtype, RenderFrameVMCallback);
		}

		static void OverrideRenderFrame (GLib.GType gtype, RenderFrameNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderFrame = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderFrameNativeDelegate (IntPtr inst, IntPtr cr, double x, double y, double width, double height);

		static void RenderFrame_cb (IntPtr inst, IntPtr cr, double x, double y, double width, double height)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderFrame (mycr, x, y, width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderFrame")]
		protected virtual void OnRenderFrame (Cairo.Context cr, double x, double y, double width, double height)
		{
			InternalRenderFrame (cr, x, y, width, height);
		}

		private void InternalRenderFrame (Cairo.Context cr, double x, double y, double width, double height)
		{
			RenderFrameNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderFrame;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		static RenderFrameGapNativeDelegate RenderFrameGap_cb_delegate;
		static RenderFrameGapNativeDelegate RenderFrameGapVMCallback {
			get {
				if (RenderFrameGap_cb_delegate == null)
					RenderFrameGap_cb_delegate = new RenderFrameGapNativeDelegate (RenderFrameGap_cb);
				return RenderFrameGap_cb_delegate;
			}
		}

		static void OverrideRenderFrameGap (GLib.GType gtype)
		{
			OverrideRenderFrameGap (gtype, RenderFrameGapVMCallback);
		}

		static void OverrideRenderFrameGap (GLib.GType gtype, RenderFrameGapNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderFrameGap = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderFrameGapNativeDelegate (IntPtr inst, IntPtr cr, double x, double y, double width, double height, int gap_side, double xy0_gap, double xy1_gap);

		static void RenderFrameGap_cb (IntPtr inst, IntPtr cr, double x, double y, double width, double height, int gap_side, double xy0_gap, double xy1_gap)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderFrameGap (mycr, x, y, width, height, (Gtk.PositionType) gap_side, xy0_gap, xy1_gap);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderFrameGap")]
		protected virtual void OnRenderFrameGap (Cairo.Context cr, double x, double y, double width, double height, Gtk.PositionType gap_side, double xy0_gap, double xy1_gap)
		{
			InternalRenderFrameGap (cr, x, y, width, height, gap_side, xy0_gap, xy1_gap);
		}

		private void InternalRenderFrameGap (Cairo.Context cr, double x, double y, double width, double height, Gtk.PositionType gap_side, double xy0_gap, double xy1_gap)
		{
			RenderFrameGapNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderFrameGap;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height, (int) gap_side, xy0_gap, xy1_gap);
		}

		static RenderExtensionNativeDelegate RenderExtension_cb_delegate;
		static RenderExtensionNativeDelegate RenderExtensionVMCallback {
			get {
				if (RenderExtension_cb_delegate == null)
					RenderExtension_cb_delegate = new RenderExtensionNativeDelegate (RenderExtension_cb);
				return RenderExtension_cb_delegate;
			}
		}

		static void OverrideRenderExtension (GLib.GType gtype)
		{
			OverrideRenderExtension (gtype, RenderExtensionVMCallback);
		}

		static void OverrideRenderExtension (GLib.GType gtype, RenderExtensionNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderExtension = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderExtensionNativeDelegate (IntPtr inst, IntPtr cr, double x, double y, double width, double height, int gap_side);

		static void RenderExtension_cb (IntPtr inst, IntPtr cr, double x, double y, double width, double height, int gap_side)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderExtension (mycr, x, y, width, height, (Gtk.PositionType) gap_side);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderExtension")]
		protected virtual void OnRenderExtension (Cairo.Context cr, double x, double y, double width, double height, Gtk.PositionType gap_side)
		{
			InternalRenderExtension (cr, x, y, width, height, gap_side);
		}

		private void InternalRenderExtension (Cairo.Context cr, double x, double y, double width, double height, Gtk.PositionType gap_side)
		{
			RenderExtensionNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderExtension;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height, (int) gap_side);
		}

		static RenderCheckNativeDelegate RenderCheck_cb_delegate;
		static RenderCheckNativeDelegate RenderCheckVMCallback {
			get {
				if (RenderCheck_cb_delegate == null)
					RenderCheck_cb_delegate = new RenderCheckNativeDelegate (RenderCheck_cb);
				return RenderCheck_cb_delegate;
			}
		}

		static void OverrideRenderCheck (GLib.GType gtype)
		{
			OverrideRenderCheck (gtype, RenderCheckVMCallback);
		}

		static void OverrideRenderCheck (GLib.GType gtype, RenderCheckNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderCheck = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderCheckNativeDelegate (IntPtr inst, IntPtr cr, double x, double y, double width, double height);

		static void RenderCheck_cb (IntPtr inst, IntPtr cr, double x, double y, double width, double height)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderCheck (mycr, x, y, width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderCheck")]
		protected virtual void OnRenderCheck (Cairo.Context cr, double x, double y, double width, double height)
		{
			InternalRenderCheck (cr, x, y, width, height);
		}

		private void InternalRenderCheck (Cairo.Context cr, double x, double y, double width, double height)
		{
			RenderCheckNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderCheck;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		static RenderOptionNativeDelegate RenderOption_cb_delegate;
		static RenderOptionNativeDelegate RenderOptionVMCallback {
			get {
				if (RenderOption_cb_delegate == null)
					RenderOption_cb_delegate = new RenderOptionNativeDelegate (RenderOption_cb);
				return RenderOption_cb_delegate;
			}
		}

		static void OverrideRenderOption (GLib.GType gtype)
		{
			OverrideRenderOption (gtype, RenderOptionVMCallback);
		}

		static void OverrideRenderOption (GLib.GType gtype, RenderOptionNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderOption = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderOptionNativeDelegate (IntPtr inst, IntPtr cr, double x, double y, double width, double height);

		static void RenderOption_cb (IntPtr inst, IntPtr cr, double x, double y, double width, double height)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderOption (mycr, x, y, width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderOption")]
		protected virtual void OnRenderOption (Cairo.Context cr, double x, double y, double width, double height)
		{
			InternalRenderOption (cr, x, y, width, height);
		}

		private void InternalRenderOption (Cairo.Context cr, double x, double y, double width, double height)
		{
			RenderOptionNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderOption;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		static RenderArrowNativeDelegate RenderArrow_cb_delegate;
		static RenderArrowNativeDelegate RenderArrowVMCallback {
			get {
				if (RenderArrow_cb_delegate == null)
					RenderArrow_cb_delegate = new RenderArrowNativeDelegate (RenderArrow_cb);
				return RenderArrow_cb_delegate;
			}
		}

		static void OverrideRenderArrow (GLib.GType gtype)
		{
			OverrideRenderArrow (gtype, RenderArrowVMCallback);
		}

		static void OverrideRenderArrow (GLib.GType gtype, RenderArrowNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderArrow = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderArrowNativeDelegate (IntPtr inst, IntPtr cr, double angle, double x, double y, double size);

		static void RenderArrow_cb (IntPtr inst, IntPtr cr, double angle, double x, double y, double size)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderArrow (mycr, angle, x, y, size);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderArrow")]
		protected virtual void OnRenderArrow (Cairo.Context cr, double angle, double x, double y, double size)
		{
			InternalRenderArrow (cr, angle, x, y, size);
		}

		private void InternalRenderArrow (Cairo.Context cr, double angle, double x, double y, double size)
		{
			RenderArrowNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderArrow;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, angle, x, y, size);
		}

		static RenderExpanderNativeDelegate RenderExpander_cb_delegate;
		static RenderExpanderNativeDelegate RenderExpanderVMCallback {
			get {
				if (RenderExpander_cb_delegate == null)
					RenderExpander_cb_delegate = new RenderExpanderNativeDelegate (RenderExpander_cb);
				return RenderExpander_cb_delegate;
			}
		}

		static void OverrideRenderExpander (GLib.GType gtype)
		{
			OverrideRenderExpander (gtype, RenderExpanderVMCallback);
		}

		static void OverrideRenderExpander (GLib.GType gtype, RenderExpanderNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderExpander = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderExpanderNativeDelegate (IntPtr inst, IntPtr cr, double x, double y, double width, double height);

		static void RenderExpander_cb (IntPtr inst, IntPtr cr, double x, double y, double width, double height)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderExpander (mycr, x, y, width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderExpander")]
		protected virtual void OnRenderExpander (Cairo.Context cr, double x, double y, double width, double height)
		{
			InternalRenderExpander (cr, x, y, width, height);
		}

		private void InternalRenderExpander (Cairo.Context cr, double x, double y, double width, double height)
		{
			RenderExpanderNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderExpander;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		static RenderFocusNativeDelegate RenderFocus_cb_delegate;
		static RenderFocusNativeDelegate RenderFocusVMCallback {
			get {
				if (RenderFocus_cb_delegate == null)
					RenderFocus_cb_delegate = new RenderFocusNativeDelegate (RenderFocus_cb);
				return RenderFocus_cb_delegate;
			}
		}

		static void OverrideRenderFocus (GLib.GType gtype)
		{
			OverrideRenderFocus (gtype, RenderFocusVMCallback);
		}

		static void OverrideRenderFocus (GLib.GType gtype, RenderFocusNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderFocus = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderFocusNativeDelegate (IntPtr inst, IntPtr cr, double x, double y, double width, double height);

		static void RenderFocus_cb (IntPtr inst, IntPtr cr, double x, double y, double width, double height)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderFocus (mycr, x, y, width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderFocus")]
		protected virtual void OnRenderFocus (Cairo.Context cr, double x, double y, double width, double height)
		{
			InternalRenderFocus (cr, x, y, width, height);
		}

		private void InternalRenderFocus (Cairo.Context cr, double x, double y, double width, double height)
		{
			RenderFocusNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderFocus;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		static RenderLayoutNativeDelegate RenderLayout_cb_delegate;
		static RenderLayoutNativeDelegate RenderLayoutVMCallback {
			get {
				if (RenderLayout_cb_delegate == null)
					RenderLayout_cb_delegate = new RenderLayoutNativeDelegate (RenderLayout_cb);
				return RenderLayout_cb_delegate;
			}
		}

		static void OverrideRenderLayout (GLib.GType gtype)
		{
			OverrideRenderLayout (gtype, RenderLayoutVMCallback);
		}

		static void OverrideRenderLayout (GLib.GType gtype, RenderLayoutNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderLayout = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderLayoutNativeDelegate (IntPtr inst, IntPtr cr, double x, double y, IntPtr layout);

		static void RenderLayout_cb (IntPtr inst, IntPtr cr, double x, double y, IntPtr layout)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderLayout (mycr, x, y, GLib.Object.GetObject(layout) as Pango.Layout);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderLayout")]
		protected virtual void OnRenderLayout (Cairo.Context cr, double x, double y, Pango.Layout layout)
		{
			InternalRenderLayout (cr, x, y, layout);
		}

		private void InternalRenderLayout (Cairo.Context cr, double x, double y, Pango.Layout layout)
		{
			RenderLayoutNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderLayout;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, layout == null ? IntPtr.Zero : layout.Handle);
		}

		static RenderSliderNativeDelegate RenderSlider_cb_delegate;
		static RenderSliderNativeDelegate RenderSliderVMCallback {
			get {
				if (RenderSlider_cb_delegate == null)
					RenderSlider_cb_delegate = new RenderSliderNativeDelegate (RenderSlider_cb);
				return RenderSlider_cb_delegate;
			}
		}

		static void OverrideRenderSlider (GLib.GType gtype)
		{
			OverrideRenderSlider (gtype, RenderSliderVMCallback);
		}

		static void OverrideRenderSlider (GLib.GType gtype, RenderSliderNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderSlider = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderSliderNativeDelegate (IntPtr inst, IntPtr cr, double x, double y, double width, double height, int orientation);

		static void RenderSlider_cb (IntPtr inst, IntPtr cr, double x, double y, double width, double height, int orientation)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderSlider (mycr, x, y, width, height, (Gtk.Orientation) orientation);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderSlider")]
		protected virtual void OnRenderSlider (Cairo.Context cr, double x, double y, double width, double height, Gtk.Orientation orientation)
		{
			InternalRenderSlider (cr, x, y, width, height, orientation);
		}

		private void InternalRenderSlider (Cairo.Context cr, double x, double y, double width, double height, Gtk.Orientation orientation)
		{
			RenderSliderNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderSlider;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height, (int) orientation);
		}

		static RenderHandleNativeDelegate RenderHandle_cb_delegate;
		static RenderHandleNativeDelegate RenderHandleVMCallback {
			get {
				if (RenderHandle_cb_delegate == null)
					RenderHandle_cb_delegate = new RenderHandleNativeDelegate (RenderHandle_cb);
				return RenderHandle_cb_delegate;
			}
		}

		static void OverrideRenderHandle (GLib.GType gtype)
		{
			OverrideRenderHandle (gtype, RenderHandleVMCallback);
		}

		static void OverrideRenderHandle (GLib.GType gtype, RenderHandleNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderHandle = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderHandleNativeDelegate (IntPtr inst, IntPtr cr, double x, double y, double width, double height);

		static void RenderHandle_cb (IntPtr inst, IntPtr cr, double x, double y, double width, double height)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderHandle (mycr, x, y, width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderHandle")]
		protected virtual void OnRenderHandle (Cairo.Context cr, double x, double y, double width, double height)
		{
			InternalRenderHandle (cr, x, y, width, height);
		}

		private void InternalRenderHandle (Cairo.Context cr, double x, double y, double width, double height)
		{
			RenderHandleNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderHandle;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		static RenderActivityNativeDelegate RenderActivity_cb_delegate;
		static RenderActivityNativeDelegate RenderActivityVMCallback {
			get {
				if (RenderActivity_cb_delegate == null)
					RenderActivity_cb_delegate = new RenderActivityNativeDelegate (RenderActivity_cb);
				return RenderActivity_cb_delegate;
			}
		}

		static void OverrideRenderActivity (GLib.GType gtype)
		{
			OverrideRenderActivity (gtype, RenderActivityVMCallback);
		}

		static void OverrideRenderActivity (GLib.GType gtype, RenderActivityNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderActivity = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderActivityNativeDelegate (IntPtr inst, IntPtr cr, double x, double y, double width, double height);

		static void RenderActivity_cb (IntPtr inst, IntPtr cr, double x, double y, double width, double height)
		{
			Cairo.Context mycr = null;

			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRenderActivity (mycr, x, y, width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderActivity")]
		protected virtual void OnRenderActivity (Cairo.Context cr, double x, double y, double width, double height)
		{
			InternalRenderActivity (cr, x, y, width, height);
		}

		private void InternalRenderActivity (Cairo.Context cr, double x, double y, double width, double height)
		{
			RenderActivityNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderActivity;
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		static RenderIconPixbufNativeDelegate RenderIconPixbuf_cb_delegate;
		static RenderIconPixbufNativeDelegate RenderIconPixbufVMCallback {
			get {
				if (RenderIconPixbuf_cb_delegate == null)
					RenderIconPixbuf_cb_delegate = new RenderIconPixbufNativeDelegate (RenderIconPixbuf_cb);
				return RenderIconPixbuf_cb_delegate;
			}
		}

		static void OverrideRenderIconPixbuf (GLib.GType gtype)
		{
			OverrideRenderIconPixbuf (gtype, RenderIconPixbufVMCallback);
		}

		static void OverrideRenderIconPixbuf (GLib.GType gtype, RenderIconPixbufNativeDelegate callback)
		{
			GtkThemingEngineClass class_iface = GetClassStruct (gtype, false);
			class_iface.RenderIconPixbuf = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr RenderIconPixbufNativeDelegate (IntPtr inst, IntPtr source, int size);

		static IntPtr RenderIconPixbuf_cb (IntPtr inst, IntPtr source, int size)
		{
			try {
				ThemingEngine __obj = GLib.Object.GetObject (inst, false) as ThemingEngine;
				Gdk.Pixbuf __result;
				__result = __obj.OnRenderIconPixbuf (source == IntPtr.Zero ? null : (Gtk.IconSource) GLib.Opaque.GetOpaque (source, typeof (Gtk.IconSource), false), (Gtk.IconSize) size);
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ThemingEngine), ConnectionMethod="OverrideRenderIconPixbuf")]
		protected virtual Gdk.Pixbuf OnRenderIconPixbuf (Gtk.IconSource source, Gtk.IconSize size)
		{
			return InternalRenderIconPixbuf (source, size);
		}

		private Gdk.Pixbuf InternalRenderIconPixbuf (Gtk.IconSource source, Gtk.IconSize size)
		{
			RenderIconPixbufNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RenderIconPixbuf;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle, source == null ? IntPtr.Zero : source.Handle, (int) size);
			return GLib.Object.GetObject(__result) as Gdk.Pixbuf;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkThemingEngineClass {
			public RenderLineNativeDelegate RenderLine;
			public RenderBackgroundNativeDelegate RenderBackground;
			public RenderFrameNativeDelegate RenderFrame;
			public RenderFrameGapNativeDelegate RenderFrameGap;
			public RenderExtensionNativeDelegate RenderExtension;
			public RenderCheckNativeDelegate RenderCheck;
			public RenderOptionNativeDelegate RenderOption;
			public RenderArrowNativeDelegate RenderArrow;
			public RenderExpanderNativeDelegate RenderExpander;
			public RenderFocusNativeDelegate RenderFocus;
			public RenderLayoutNativeDelegate RenderLayout;
			public RenderSliderNativeDelegate RenderSlider;
			public RenderHandleNativeDelegate RenderHandle;
			public RenderActivityNativeDelegate RenderActivity;
			public RenderIconPixbufNativeDelegate RenderIconPixbuf;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=16)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkThemingEngineClass> class_structs;

		static GtkThemingEngineClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkThemingEngineClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkThemingEngineClass class_struct = (GtkThemingEngineClass) Marshal.PtrToStructure (class_ptr, typeof (GtkThemingEngineClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkThemingEngineClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_theming_engine_get_background_color(IntPtr raw, int state, IntPtr color);

		public void GetBackgroundColor(Gtk.StateFlags state, Gdk.RGBA color) {
			IntPtr native_color = GLib.Marshaller.StructureToPtrAlloc (color);
			gtk_theming_engine_get_background_color(Handle, (int) state, native_color);
			color = Gdk.RGBA.New (native_color);
			Marshal.FreeHGlobal (native_color);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_theming_engine_get_border(IntPtr raw, int state, IntPtr border);

		public void GetBorder(Gtk.StateFlags state, Gtk.Border border) {
			IntPtr native_border = GLib.Marshaller.StructureToPtrAlloc (border);
			gtk_theming_engine_get_border(Handle, (int) state, native_border);
			border = Gtk.Border.New (native_border);
			Marshal.FreeHGlobal (native_border);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_theming_engine_get_border_color(IntPtr raw, int state, IntPtr color);

		public void GetBorderColor(Gtk.StateFlags state, Gdk.RGBA color) {
			IntPtr native_color = GLib.Marshaller.StructureToPtrAlloc (color);
			gtk_theming_engine_get_border_color(Handle, (int) state, native_color);
			color = Gdk.RGBA.New (native_color);
			Marshal.FreeHGlobal (native_color);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_theming_engine_get_color(IntPtr raw, int state, IntPtr color);

		public void GetColor(Gtk.StateFlags state, Gdk.RGBA color) {
			IntPtr native_color = GLib.Marshaller.StructureToPtrAlloc (color);
			gtk_theming_engine_get_color(Handle, (int) state, native_color);
			color = Gdk.RGBA.New (native_color);
			Marshal.FreeHGlobal (native_color);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_theming_engine_get_direction(IntPtr raw);

		public Gtk.TextDirection Direction { 
			get {
				int raw_ret = gtk_theming_engine_get_direction(Handle);
				Gtk.TextDirection ret = (Gtk.TextDirection) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_theming_engine_get_font(IntPtr raw, int state);

		public Pango.FontDescription GetFont(Gtk.StateFlags state) {
			IntPtr raw_ret = gtk_theming_engine_get_font(Handle, (int) state);
			Pango.FontDescription ret = raw_ret == IntPtr.Zero ? null : (Pango.FontDescription) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.FontDescription), false);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_theming_engine_get_junction_sides(IntPtr raw);

		public Gtk.JunctionSides JunctionSides { 
			get {
				int raw_ret = gtk_theming_engine_get_junction_sides(Handle);
				Gtk.JunctionSides ret = (Gtk.JunctionSides) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_theming_engine_get_margin(IntPtr raw, int state, IntPtr margin);

		public void GetMargin(Gtk.StateFlags state, Gtk.Border margin) {
			IntPtr native_margin = GLib.Marshaller.StructureToPtrAlloc (margin);
			gtk_theming_engine_get_margin(Handle, (int) state, native_margin);
			margin = Gtk.Border.New (native_margin);
			Marshal.FreeHGlobal (native_margin);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_theming_engine_get_padding(IntPtr raw, int state, IntPtr padding);

		public void GetPadding(Gtk.StateFlags state, Gtk.Border padding) {
			IntPtr native_padding = GLib.Marshaller.StructureToPtrAlloc (padding);
			gtk_theming_engine_get_padding(Handle, (int) state, native_padding);
			padding = Gtk.Border.New (native_padding);
			Marshal.FreeHGlobal (native_padding);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_theming_engine_get_path(IntPtr raw);

		public Gtk.WidgetPath Path { 
			get {
				IntPtr raw_ret = gtk_theming_engine_get_path(Handle);
				Gtk.WidgetPath ret = raw_ret == IntPtr.Zero ? null : (Gtk.WidgetPath) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.WidgetPath), false);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_theming_engine_get_property(IntPtr raw, IntPtr property, int state, IntPtr value);

		public void GetProperty(string property, Gtk.StateFlags state, GLib.Value value) {
			IntPtr native_property = GLib.Marshaller.StringToPtrGStrdup (property);
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			gtk_theming_engine_get_property(Handle, native_property, (int) state, native_value);
			GLib.Marshaller.Free (native_property);
			value = (GLib.Value) Marshal.PtrToStructure (native_value, typeof (GLib.Value));
			Marshal.FreeHGlobal (native_value);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_theming_engine_get_screen(IntPtr raw);

		public Gdk.Screen Screen { 
			get {
				IntPtr raw_ret = gtk_theming_engine_get_screen(Handle);
				Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_theming_engine_get_state(IntPtr raw);

		public Gtk.StateFlags State { 
			get {
				int raw_ret = gtk_theming_engine_get_state(Handle);
				Gtk.StateFlags ret = (Gtk.StateFlags) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_theming_engine_get_style_property(IntPtr raw, IntPtr property_name, IntPtr value);

		public void GetStyleProperty(string property_name, GLib.Value value) {
			IntPtr native_property_name = GLib.Marshaller.StringToPtrGStrdup (property_name);
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			gtk_theming_engine_get_style_property(Handle, native_property_name, native_value);
			GLib.Marshaller.Free (native_property_name);
			value = (GLib.Value) Marshal.PtrToStructure (native_value, typeof (GLib.Value));
			Marshal.FreeHGlobal (native_value);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_theming_engine_get_style_valist(IntPtr raw, IntPtr args);

		public void GetStyleValist(IntPtr args) {
			gtk_theming_engine_get_style_valist(Handle, args);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_theming_engine_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_theming_engine_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_theming_engine_get_valist(IntPtr raw, int state, IntPtr args);

		public void GetValist(Gtk.StateFlags state, IntPtr args) {
			gtk_theming_engine_get_valist(Handle, (int) state, args);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_theming_engine_has_class(IntPtr raw, IntPtr style_class);

		public bool HasClass(string style_class) {
			IntPtr native_style_class = GLib.Marshaller.StringToPtrGStrdup (style_class);
			bool raw_ret = gtk_theming_engine_has_class(Handle, native_style_class);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_style_class);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_theming_engine_has_region(IntPtr raw, IntPtr style_region, out int flags);

		public bool HasRegion(string style_region, out Gtk.RegionFlags flags) {
			IntPtr native_style_region = GLib.Marshaller.StringToPtrGStrdup (style_region);
			int native_flags;
			bool raw_ret = gtk_theming_engine_has_region(Handle, native_style_region, out native_flags);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_style_region);
			flags = (Gtk.RegionFlags) native_flags;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_theming_engine_load(IntPtr name);

		public static Gtk.ThemingEngine Load(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gtk_theming_engine_load(native_name);
			Gtk.ThemingEngine ret = GLib.Object.GetObject(raw_ret) as Gtk.ThemingEngine;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_theming_engine_lookup_color(IntPtr raw, IntPtr color_name, IntPtr color);

		public bool LookupColor(string color_name, Gdk.RGBA color) {
			IntPtr native_color_name = GLib.Marshaller.StringToPtrGStrdup (color_name);
			IntPtr native_color = GLib.Marshaller.StructureToPtrAlloc (color);
			bool raw_ret = gtk_theming_engine_lookup_color(Handle, native_color_name, native_color);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_color_name);
			color = Gdk.RGBA.New (native_color);
			Marshal.FreeHGlobal (native_color);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_theming_engine_register_property(IntPtr name_space, GtkSharp.StylePropertyParserNative parse_func, IntPtr pspec);

		public static void RegisterProperty(string name_space, Gtk.StylePropertyParser parse_func, IntPtr pspec) {
			IntPtr native_name_space = GLib.Marshaller.StringToPtrGStrdup (name_space);
			GtkSharp.StylePropertyParserWrapper parse_func_wrapper = new GtkSharp.StylePropertyParserWrapper (parse_func);
			gtk_theming_engine_register_property(native_name_space, parse_func_wrapper.NativeDelegate, pspec);
			GLib.Marshaller.Free (native_name_space);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_theming_engine_state_is_running(IntPtr raw, int state, out double progress);

		public bool StateIsRunning(Gtk.StateType state, out double progress) {
			bool raw_ret = gtk_theming_engine_state_is_running(Handle, (int) state, out progress);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
