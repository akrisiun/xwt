// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ScrolledWindow : Gtk.Bin {

		public ScrolledWindow (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrolled_window_new(IntPtr hadjustment, IntPtr vadjustment);

		public ScrolledWindow (Gtk.Adjustment hadjustment, Gtk.Adjustment vadjustment) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ScrolledWindow)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (hadjustment != null) {
					names.Add ("hadjustment");
					vals.Add (new GLib.Value (hadjustment));
				}
				if (vadjustment != null) {
					names.Add ("vadjustment");
					vals.Add (new GLib.Value (vadjustment));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_scrolled_window_new(hadjustment == null ? IntPtr.Zero : hadjustment.Handle, vadjustment == null ? IntPtr.Zero : vadjustment.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrolled_window_get_hadjustment(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_set_hadjustment(IntPtr raw, IntPtr hadjustment);

		[GLib.Property ("hadjustment")]
		public Gtk.Adjustment Hadjustment {
			get  {
				IntPtr raw_ret = gtk_scrolled_window_get_hadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				gtk_scrolled_window_set_hadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrolled_window_get_vadjustment(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_set_vadjustment(IntPtr raw, IntPtr vadjustment);

		[GLib.Property ("vadjustment")]
		public Gtk.Adjustment Vadjustment {
			get  {
				IntPtr raw_ret = gtk_scrolled_window_get_vadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				gtk_scrolled_window_set_vadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.Property ("hscrollbar-policy")]
		public Gtk.PolicyType HscrollbarPolicy {
			get {
				GLib.Value val = GetProperty ("hscrollbar-policy");
				Gtk.PolicyType ret = (Gtk.PolicyType) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("hscrollbar-policy", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("vscrollbar-policy")]
		public Gtk.PolicyType VscrollbarPolicy {
			get {
				GLib.Value val = GetProperty ("vscrollbar-policy");
				Gtk.PolicyType ret = (Gtk.PolicyType) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("vscrollbar-policy", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("window-placement")]
		public Gtk.CornerType WindowPlacement {
			get {
				GLib.Value val = GetProperty ("window-placement");
				Gtk.CornerType ret = (Gtk.CornerType) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("window-placement", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("window-placement-set")]
		public bool WindowPlacementSet {
			get {
				GLib.Value val = GetProperty ("window-placement-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("window-placement-set", val);
				val.Dispose ();
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scrolled_window_get_shadow_type(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_set_shadow_type(IntPtr raw, int type);

		[GLib.Property ("shadow-type")]
		public Gtk.ShadowType ShadowType {
			get  {
				int raw_ret = gtk_scrolled_window_get_shadow_type(Handle);
				Gtk.ShadowType ret = (Gtk.ShadowType) raw_ret;
				return ret;
			}
			set  {
				gtk_scrolled_window_set_shadow_type(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scrolled_window_get_min_content_width(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_set_min_content_width(IntPtr raw, int width);

		[GLib.Property ("min-content-width")]
		public int MinContentWidth {
			get  {
				int raw_ret = gtk_scrolled_window_get_min_content_width(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_scrolled_window_set_min_content_width(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scrolled_window_get_min_content_height(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_set_min_content_height(IntPtr raw, int height);

		[GLib.Property ("min-content-height")]
		public int MinContentHeight {
			get  {
				int raw_ret = gtk_scrolled_window_get_min_content_height(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_scrolled_window_set_min_content_height(Handle, value);
			}
		}

		[GLib.Signal("scroll-child")]
		public event Gtk.ScrollChildHandler ScrollChild {
			add {
				this.AddSignalHandler ("scroll-child", value, typeof (Gtk.ScrollChildArgs));
			}
			remove {
				this.RemoveSignalHandler ("scroll-child", value);
			}
		}

		[GLib.Signal("move-focus-out")]
		public event Gtk.MoveFocusOutHandler MoveFocusOut {
			add {
				this.AddSignalHandler ("move-focus-out", value, typeof (Gtk.MoveFocusOutArgs));
			}
			remove {
				this.RemoveSignalHandler ("move-focus-out", value);
			}
		}

		static ScrollChildNativeDelegate ScrollChild_cb_delegate;
		static ScrollChildNativeDelegate ScrollChildVMCallback {
			get {
				if (ScrollChild_cb_delegate == null)
					ScrollChild_cb_delegate = new ScrollChildNativeDelegate (ScrollChild_cb);
				return ScrollChild_cb_delegate;
			}
		}

		static void OverrideScrollChild (GLib.GType gtype)
		{
			OverrideScrollChild (gtype, ScrollChildVMCallback);
		}

		static void OverrideScrollChild (GLib.GType gtype, ScrollChildNativeDelegate callback)
		{
			GtkScrolledWindowClass class_iface = GetClassStruct (gtype, false);
			class_iface.ScrollChild = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ScrollChildNativeDelegate (IntPtr inst, int scroll, bool horizontal);

		static void ScrollChild_cb (IntPtr inst, int scroll, bool horizontal)
		{
			try {
				ScrolledWindow __obj = GLib.Object.GetObject (inst, false) as ScrolledWindow;
				__obj.OnScrollChild ((Gtk.ScrollType) scroll, horizontal);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ScrolledWindow), ConnectionMethod="OverrideScrollChild")]
		protected virtual void OnScrollChild (Gtk.ScrollType scroll, bool horizontal)
		{
			InternalScrollChild (scroll, horizontal);
		}

		private void InternalScrollChild (Gtk.ScrollType scroll, bool horizontal)
		{
			ScrollChildNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ScrollChild;
			if (unmanaged == null) return;

			unmanaged (this.Handle, (int) scroll, horizontal);
		}

		static MoveFocusOutNativeDelegate MoveFocusOut_cb_delegate;
		static MoveFocusOutNativeDelegate MoveFocusOutVMCallback {
			get {
				if (MoveFocusOut_cb_delegate == null)
					MoveFocusOut_cb_delegate = new MoveFocusOutNativeDelegate (MoveFocusOut_cb);
				return MoveFocusOut_cb_delegate;
			}
		}

		static void OverrideMoveFocusOut (GLib.GType gtype)
		{
			OverrideMoveFocusOut (gtype, MoveFocusOutVMCallback);
		}

		static void OverrideMoveFocusOut (GLib.GType gtype, MoveFocusOutNativeDelegate callback)
		{
			GtkScrolledWindowClass class_iface = GetClassStruct (gtype, false);
			class_iface.MoveFocusOut = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveFocusOutNativeDelegate (IntPtr inst, int direction);

		static void MoveFocusOut_cb (IntPtr inst, int direction)
		{
			try {
				ScrolledWindow __obj = GLib.Object.GetObject (inst, false) as ScrolledWindow;
				__obj.OnMoveFocusOut ((Gtk.DirectionType) direction);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ScrolledWindow), ConnectionMethod="OverrideMoveFocusOut")]
		protected virtual void OnMoveFocusOut (Gtk.DirectionType direction)
		{
			InternalMoveFocusOut (direction);
		}

		private void InternalMoveFocusOut (Gtk.DirectionType direction)
		{
			MoveFocusOutNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).MoveFocusOut;
			if (unmanaged == null) return;

			unmanaged (this.Handle, (int) direction);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkScrolledWindowClass {
			public int ScrollbarSpacing;
			public ScrollChildNativeDelegate ScrollChild;
			public MoveFocusOutNativeDelegate MoveFocusOut;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Bin)).GetClassSize ();
		static Dictionary<GLib.GType, GtkScrolledWindowClass> class_structs;

		static GtkScrolledWindowClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkScrolledWindowClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkScrolledWindowClass class_struct = (GtkScrolledWindowClass) Marshal.PtrToStructure (class_ptr, typeof (GtkScrolledWindowClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkScrolledWindowClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_add_with_viewport(IntPtr raw, IntPtr child);

		public void AddWithViewport(Gtk.Widget child) {
			gtk_scrolled_window_add_with_viewport(Handle, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrolled_window_get_hscrollbar(IntPtr raw);

		public Gtk.Widget HScrollbar { 
			get {
				IntPtr raw_ret = gtk_scrolled_window_get_hscrollbar(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scrolled_window_get_placement(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_set_placement(IntPtr raw, int window_placement);

		public Gtk.CornerType Placement { 
			get {
				int raw_ret = gtk_scrolled_window_get_placement(Handle);
				Gtk.CornerType ret = (Gtk.CornerType) raw_ret;
				return ret;
			}
			set {
				gtk_scrolled_window_set_placement(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_get_policy(IntPtr raw, out int hscrollbar_policy, out int vscrollbar_policy);

		public void GetPolicy(out Gtk.PolicyType hscrollbar_policy, out Gtk.PolicyType vscrollbar_policy) {
			int native_hscrollbar_policy;
			int native_vscrollbar_policy;
			gtk_scrolled_window_get_policy(Handle, out native_hscrollbar_policy, out native_vscrollbar_policy);
			hscrollbar_policy = (Gtk.PolicyType) native_hscrollbar_policy;
			vscrollbar_policy = (Gtk.PolicyType) native_vscrollbar_policy;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrolled_window_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_scrolled_window_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrolled_window_get_vscrollbar(IntPtr raw);

		public Gtk.Widget VScrollbar { 
			get {
				IntPtr raw_ret = gtk_scrolled_window_get_vscrollbar(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_set_policy(IntPtr raw, int hscrollbar_policy, int vscrollbar_policy);

		public void SetPolicy(Gtk.PolicyType hscrollbar_policy, Gtk.PolicyType vscrollbar_policy) {
			gtk_scrolled_window_set_policy(Handle, (int) hscrollbar_policy, (int) vscrollbar_policy);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_unset_placement(IntPtr raw);

		public void UnsetPlacement() {
			gtk_scrolled_window_unset_placement(Handle);
		}

#endregion
	}
}
