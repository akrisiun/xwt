// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Credentials : GLib.Object {

		public Credentials (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_credentials_new();

		public Credentials () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Credentials)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = g_credentials_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GCredentialsClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GCredentialsClass> class_structs;

		static GCredentialsClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GCredentialsClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GCredentialsClass class_struct = (GCredentialsClass) Marshal.PtrToStructure (class_ptr, typeof (GCredentialsClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GCredentialsClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_credentials_get_native(IntPtr raw, int native_type);

		public IntPtr GetNative(GLib.CredentialsType native_type) {
			IntPtr raw_ret = g_credentials_get_native(Handle, (int) native_type);
			IntPtr ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_credentials_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_credentials_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_credentials_is_same_user(IntPtr raw, IntPtr other_credentials, out IntPtr error);

		public unsafe bool IsSameUser(GLib.Credentials other_credentials) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_credentials_is_same_user(Handle, other_credentials == null ? IntPtr.Zero : other_credentials.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_credentials_set_native(IntPtr raw, int native_type, IntPtr native);

		public void SetNative(GLib.CredentialsType native_type, IntPtr native) {
			g_credentials_set_native(Handle, (int) native_type, native);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_credentials_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = g_credentials_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

#endregion
	}
}
