// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DisplayManager : GLib.Object {

		public DisplayManager (IntPtr raw) : base(raw) {}

		protected DisplayManager() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_manager_get_default_display(IntPtr raw);

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_manager_set_default_display(IntPtr raw, IntPtr display);

		[GLib.Property ("default-display")]
		public Gdk.Display DefaultDisplay {
			get  {
				IntPtr raw_ret = gdk_display_manager_get_default_display(Handle);
				Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
				return ret;
			}
			set  {
				gdk_display_manager_set_default_display(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.Signal("display-opened")]
		public event Gdk.DisplayOpenedHandler DisplayOpened {
			add {
				this.AddSignalHandler ("display-opened", value, typeof (Gdk.DisplayOpenedArgs));
			}
			remove {
				this.RemoveSignalHandler ("display-opened", value);
			}
		}

		static ListDisplaysNativeDelegate ListDisplays_cb_delegate;
		static ListDisplaysNativeDelegate ListDisplaysVMCallback {
			get {
				if (ListDisplays_cb_delegate == null)
					ListDisplays_cb_delegate = new ListDisplaysNativeDelegate (ListDisplays_cb);
				return ListDisplays_cb_delegate;
			}
		}

		static void OverrideListDisplays (GLib.GType gtype)
		{
			OverrideListDisplays (gtype, ListDisplaysVMCallback);
		}

		static void OverrideListDisplays (GLib.GType gtype, ListDisplaysNativeDelegate callback)
		{
			GdkDisplayManagerClass class_iface = GetClassStruct (gtype, false);
			class_iface.ListDisplays = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr ListDisplaysNativeDelegate (IntPtr inst);

		static IntPtr ListDisplays_cb (IntPtr inst)
		{
			try {
				DisplayManager __obj = GLib.Object.GetObject (inst, false) as DisplayManager;
				GLib.SList __result;
				__result = __obj.OnListDisplays ();
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.DisplayManager), ConnectionMethod="OverrideListDisplays")]
		protected virtual GLib.SList OnListDisplays ()
		{
			return InternalListDisplays ();
		}

		private GLib.SList InternalListDisplays ()
		{
			ListDisplaysNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ListDisplays;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return new GLib.SList(__result);
		}

		static GetDefaultDisplayNativeDelegate GetDefaultDisplay_cb_delegate;
		static GetDefaultDisplayNativeDelegate GetDefaultDisplayVMCallback {
			get {
				if (GetDefaultDisplay_cb_delegate == null)
					GetDefaultDisplay_cb_delegate = new GetDefaultDisplayNativeDelegate (GetDefaultDisplay_cb);
				return GetDefaultDisplay_cb_delegate;
			}
		}

		static void OverrideGetDefaultDisplay (GLib.GType gtype)
		{
			OverrideGetDefaultDisplay (gtype, GetDefaultDisplayVMCallback);
		}

		static void OverrideGetDefaultDisplay (GLib.GType gtype, GetDefaultDisplayNativeDelegate callback)
		{
			GdkDisplayManagerClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetDefaultDisplay = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetDefaultDisplayNativeDelegate (IntPtr inst);

		static IntPtr GetDefaultDisplay_cb (IntPtr inst)
		{
			try {
				DisplayManager __obj = GLib.Object.GetObject (inst, false) as DisplayManager;
				Gdk.Display __result;
				__result = __obj.OnGetDefaultDisplay ();
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.DisplayManager), ConnectionMethod="OverrideGetDefaultDisplay")]
		protected virtual Gdk.Display OnGetDefaultDisplay ()
		{
			return InternalGetDefaultDisplay ();
		}

		private Gdk.Display InternalGetDefaultDisplay ()
		{
			GetDefaultDisplayNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetDefaultDisplay;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return GLib.Object.GetObject(__result) as Gdk.Display;
		}

		static SetDefaultDisplayNativeDelegate SetDefaultDisplay_cb_delegate;
		static SetDefaultDisplayNativeDelegate SetDefaultDisplayVMCallback {
			get {
				if (SetDefaultDisplay_cb_delegate == null)
					SetDefaultDisplay_cb_delegate = new SetDefaultDisplayNativeDelegate (SetDefaultDisplay_cb);
				return SetDefaultDisplay_cb_delegate;
			}
		}

		static void OverrideSetDefaultDisplay (GLib.GType gtype)
		{
			OverrideSetDefaultDisplay (gtype, SetDefaultDisplayVMCallback);
		}

		static void OverrideSetDefaultDisplay (GLib.GType gtype, SetDefaultDisplayNativeDelegate callback)
		{
			GdkDisplayManagerClass class_iface = GetClassStruct (gtype, false);
			class_iface.SetDefaultDisplay = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetDefaultDisplayNativeDelegate (IntPtr inst, IntPtr display);

		static void SetDefaultDisplay_cb (IntPtr inst, IntPtr display)
		{
			try {
				DisplayManager __obj = GLib.Object.GetObject (inst, false) as DisplayManager;
				__obj.OnSetDefaultDisplay (GLib.Object.GetObject(display) as Gdk.Display);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.DisplayManager), ConnectionMethod="OverrideSetDefaultDisplay")]
		protected virtual void OnSetDefaultDisplay (Gdk.Display display)
		{
			InternalSetDefaultDisplay (display);
		}

		private void InternalSetDefaultDisplay (Gdk.Display display)
		{
			SetDefaultDisplayNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SetDefaultDisplay;
			if (unmanaged == null) return;

			unmanaged (this.Handle, display == null ? IntPtr.Zero : display.Handle);
		}

		static OpenDisplayNativeDelegate OpenDisplay_cb_delegate;
		static OpenDisplayNativeDelegate OpenDisplayVMCallback {
			get {
				if (OpenDisplay_cb_delegate == null)
					OpenDisplay_cb_delegate = new OpenDisplayNativeDelegate (OpenDisplay_cb);
				return OpenDisplay_cb_delegate;
			}
		}

		static void OverrideOpenDisplay (GLib.GType gtype)
		{
			OverrideOpenDisplay (gtype, OpenDisplayVMCallback);
		}

		static void OverrideOpenDisplay (GLib.GType gtype, OpenDisplayNativeDelegate callback)
		{
			GdkDisplayManagerClass class_iface = GetClassStruct (gtype, false);
			class_iface.OpenDisplay = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr OpenDisplayNativeDelegate (IntPtr inst, IntPtr name);

		static IntPtr OpenDisplay_cb (IntPtr inst, IntPtr name)
		{
			try {
				DisplayManager __obj = GLib.Object.GetObject (inst, false) as DisplayManager;
				Gdk.Display __result;
				__result = __obj.OnOpenDisplay (GLib.Marshaller.Utf8PtrToString (name));
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.DisplayManager), ConnectionMethod="OverrideOpenDisplay")]
		protected virtual Gdk.Display OnOpenDisplay (string name)
		{
			return InternalOpenDisplay (name);
		}

		private Gdk.Display InternalOpenDisplay (string name)
		{
			OpenDisplayNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).OpenDisplay;
			if (unmanaged == null) return null;

			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr __result = unmanaged (this.Handle, native_name);
			GLib.Marshaller.Free (native_name);
			return GLib.Object.GetObject(__result) as Gdk.Display;
		}

		static AtomInternNativeDelegate AtomIntern_cb_delegate;
		static AtomInternNativeDelegate AtomInternVMCallback {
			get {
				if (AtomIntern_cb_delegate == null)
					AtomIntern_cb_delegate = new AtomInternNativeDelegate (AtomIntern_cb);
				return AtomIntern_cb_delegate;
			}
		}

		static void OverrideAtomIntern (GLib.GType gtype)
		{
			OverrideAtomIntern (gtype, AtomInternVMCallback);
		}

		static void OverrideAtomIntern (GLib.GType gtype, AtomInternNativeDelegate callback)
		{
			GdkDisplayManagerClass class_iface = GetClassStruct (gtype, false);
			class_iface.AtomIntern = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr AtomInternNativeDelegate (IntPtr inst, IntPtr atom_name, bool copy_name);

		static IntPtr AtomIntern_cb (IntPtr inst, IntPtr atom_name, bool copy_name)
		{
			try {
				DisplayManager __obj = GLib.Object.GetObject (inst, false) as DisplayManager;
				Gdk.Atom __result;
				__result = __obj.OnAtomIntern (GLib.Marshaller.Utf8PtrToString (atom_name), copy_name);
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.DisplayManager), ConnectionMethod="OverrideAtomIntern")]
		protected virtual Gdk.Atom OnAtomIntern (string atom_name, bool copy_name)
		{
			return InternalAtomIntern (atom_name, copy_name);
		}

		private Gdk.Atom InternalAtomIntern (string atom_name, bool copy_name)
		{
			AtomInternNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).AtomIntern;
			if (unmanaged == null) return null;

			IntPtr native_atom_name = GLib.Marshaller.StringToPtrGStrdup (atom_name);
			IntPtr __result = unmanaged (this.Handle, native_atom_name, copy_name);
			GLib.Marshaller.Free (native_atom_name);
			return __result == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (__result, typeof (Gdk.Atom), false);
		}

		static GetAtomNameNativeDelegate GetAtomName_cb_delegate;
		static GetAtomNameNativeDelegate GetAtomNameVMCallback {
			get {
				if (GetAtomName_cb_delegate == null)
					GetAtomName_cb_delegate = new GetAtomNameNativeDelegate (GetAtomName_cb);
				return GetAtomName_cb_delegate;
			}
		}

		static void OverrideGetAtomName (GLib.GType gtype)
		{
			OverrideGetAtomName (gtype, GetAtomNameVMCallback);
		}

		static void OverrideGetAtomName (GLib.GType gtype, GetAtomNameNativeDelegate callback)
		{
			GdkDisplayManagerClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetAtomName = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetAtomNameNativeDelegate (IntPtr inst, IntPtr atom);

		static IntPtr GetAtomName_cb (IntPtr inst, IntPtr atom)
		{
			try {
				DisplayManager __obj = GLib.Object.GetObject (inst, false) as DisplayManager;
				string __result;
				__result = __obj.OnGetAtomName (atom == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (atom, typeof (Gdk.Atom), false));
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.DisplayManager), ConnectionMethod="OverrideGetAtomName")]
		protected virtual string OnGetAtomName (Gdk.Atom atom)
		{
			return InternalGetAtomName (atom);
		}

		private string InternalGetAtomName (Gdk.Atom atom)
		{
			GetAtomNameNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetAtomName;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle, atom == null ? IntPtr.Zero : atom.Handle);
			return GLib.Marshaller.PtrToStringGFree(__result);
		}

		static LookupKeyvalNativeDelegate LookupKeyval_cb_delegate;
		static LookupKeyvalNativeDelegate LookupKeyvalVMCallback {
			get {
				if (LookupKeyval_cb_delegate == null)
					LookupKeyval_cb_delegate = new LookupKeyvalNativeDelegate (LookupKeyval_cb);
				return LookupKeyval_cb_delegate;
			}
		}

		static void OverrideLookupKeyval (GLib.GType gtype)
		{
			OverrideLookupKeyval (gtype, LookupKeyvalVMCallback);
		}

		static void OverrideLookupKeyval (GLib.GType gtype, LookupKeyvalNativeDelegate callback)
		{
			GdkDisplayManagerClass class_iface = GetClassStruct (gtype, false);
			class_iface.LookupKeyval = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint LookupKeyvalNativeDelegate (IntPtr inst, IntPtr name);

		static uint LookupKeyval_cb (IntPtr inst, IntPtr name)
		{
			try {
				DisplayManager __obj = GLib.Object.GetObject (inst, false) as DisplayManager;
				uint __result;
				__result = __obj.OnLookupKeyval (GLib.Marshaller.Utf8PtrToString (name));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.DisplayManager), ConnectionMethod="OverrideLookupKeyval")]
		protected virtual uint OnLookupKeyval (string name)
		{
			return InternalLookupKeyval (name);
		}

		private uint InternalLookupKeyval (string name)
		{
			LookupKeyvalNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).LookupKeyval;
			if (unmanaged == null) return 0;

			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			uint __result = unmanaged (this.Handle, native_name);
			GLib.Marshaller.Free (native_name);
			return __result;
		}

		static GetKeyvalNameNativeDelegate GetKeyvalName_cb_delegate;
		static GetKeyvalNameNativeDelegate GetKeyvalNameVMCallback {
			get {
				if (GetKeyvalName_cb_delegate == null)
					GetKeyvalName_cb_delegate = new GetKeyvalNameNativeDelegate (GetKeyvalName_cb);
				return GetKeyvalName_cb_delegate;
			}
		}

		static void OverrideGetKeyvalName (GLib.GType gtype)
		{
			OverrideGetKeyvalName (gtype, GetKeyvalNameVMCallback);
		}

		static void OverrideGetKeyvalName (GLib.GType gtype, GetKeyvalNameNativeDelegate callback)
		{
			GdkDisplayManagerClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetKeyvalName = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetKeyvalNameNativeDelegate (IntPtr inst, uint keyval);

		static IntPtr GetKeyvalName_cb (IntPtr inst, uint keyval)
		{
			try {
				DisplayManager __obj = GLib.Object.GetObject (inst, false) as DisplayManager;
				string __result;
				__result = __obj.OnGetKeyvalName (keyval);
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.DisplayManager), ConnectionMethod="OverrideGetKeyvalName")]
		protected virtual string OnGetKeyvalName (uint keyval)
		{
			return InternalGetKeyvalName (keyval);
		}

		private string InternalGetKeyvalName (uint keyval)
		{
			GetKeyvalNameNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetKeyvalName;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle, keyval);
			return GLib.Marshaller.PtrToStringGFree(__result);
		}

		static KeyvalConvertCaseNativeDelegate KeyvalConvertCase_cb_delegate;
		static KeyvalConvertCaseNativeDelegate KeyvalConvertCaseVMCallback {
			get {
				if (KeyvalConvertCase_cb_delegate == null)
					KeyvalConvertCase_cb_delegate = new KeyvalConvertCaseNativeDelegate (KeyvalConvertCase_cb);
				return KeyvalConvertCase_cb_delegate;
			}
		}

		static void OverrideKeyvalConvertCase (GLib.GType gtype)
		{
			OverrideKeyvalConvertCase (gtype, KeyvalConvertCaseVMCallback);
		}

		static void OverrideKeyvalConvertCase (GLib.GType gtype, KeyvalConvertCaseNativeDelegate callback)
		{
			GdkDisplayManagerClass class_iface = GetClassStruct (gtype, false);
			class_iface.KeyvalConvertCase = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void KeyvalConvertCaseNativeDelegate (IntPtr inst, uint keyval, out uint lower, out uint upper);

		static void KeyvalConvertCase_cb (IntPtr inst, uint keyval, out uint lower, out uint upper)
		{
			try {
				DisplayManager __obj = GLib.Object.GetObject (inst, false) as DisplayManager;
				__obj.OnKeyvalConvertCase (keyval, out lower, out upper);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.DisplayManager), ConnectionMethod="OverrideKeyvalConvertCase")]
		protected virtual void OnKeyvalConvertCase (uint keyval, out uint lower, out uint upper)
		{
			InternalKeyvalConvertCase (keyval, out lower, out upper);
		}

		private void InternalKeyvalConvertCase (uint keyval, out uint lower, out uint upper)
		{
			KeyvalConvertCaseNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).KeyvalConvertCase;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			unmanaged (this.Handle, keyval, out lower, out upper);
		}

		static DisplayOpenedNativeDelegate DisplayOpened_cb_delegate;
		static DisplayOpenedNativeDelegate DisplayOpenedVMCallback {
			get {
				if (DisplayOpened_cb_delegate == null)
					DisplayOpened_cb_delegate = new DisplayOpenedNativeDelegate (DisplayOpened_cb);
				return DisplayOpened_cb_delegate;
			}
		}

		static void OverrideDisplayOpened (GLib.GType gtype)
		{
			OverrideDisplayOpened (gtype, DisplayOpenedVMCallback);
		}

		static void OverrideDisplayOpened (GLib.GType gtype, DisplayOpenedNativeDelegate callback)
		{
			GdkDisplayManagerClass class_iface = GetClassStruct (gtype, false);
			class_iface.DisplayOpened = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DisplayOpenedNativeDelegate (IntPtr inst, IntPtr display);

		static void DisplayOpened_cb (IntPtr inst, IntPtr display)
		{
			try {
				DisplayManager __obj = GLib.Object.GetObject (inst, false) as DisplayManager;
				__obj.OnDisplayOpened (GLib.Object.GetObject(display) as Gdk.Display);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.DisplayManager), ConnectionMethod="OverrideDisplayOpened")]
		protected virtual void OnDisplayOpened (Gdk.Display display)
		{
			InternalDisplayOpened (display);
		}

		private void InternalDisplayOpened (Gdk.Display display)
		{
			DisplayOpenedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).DisplayOpened;
			if (unmanaged == null) return;

			unmanaged (this.Handle, display == null ? IntPtr.Zero : display.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GdkDisplayManagerClass {
			public ListDisplaysNativeDelegate ListDisplays;
			public GetDefaultDisplayNativeDelegate GetDefaultDisplay;
			public SetDefaultDisplayNativeDelegate SetDefaultDisplay;
			public OpenDisplayNativeDelegate OpenDisplay;
			public AtomInternNativeDelegate AtomIntern;
			public GetAtomNameNativeDelegate GetAtomName;
			public LookupKeyvalNativeDelegate LookupKeyval;
			public GetKeyvalNameNativeDelegate GetKeyvalName;
			public KeyvalConvertCaseNativeDelegate KeyvalConvertCase;
			public DisplayOpenedNativeDelegate DisplayOpened;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GdkDisplayManagerClass> class_structs;

		static GdkDisplayManagerClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GdkDisplayManagerClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GdkDisplayManagerClass class_struct = (GdkDisplayManagerClass) Marshal.PtrToStructure (class_ptr, typeof (GdkDisplayManagerClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GdkDisplayManagerClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_manager_get();

		public static Gdk.DisplayManager Get() {
			IntPtr raw_ret = gdk_display_manager_get();
			Gdk.DisplayManager ret = GLib.Object.GetObject(raw_ret) as Gdk.DisplayManager;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_manager_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdk_display_manager_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_manager_open_display(IntPtr raw, IntPtr name);

		public Gdk.Display OpenDisplay(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gdk_display_manager_open_display(Handle, native_name);
			Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

#endregion
	}
}
