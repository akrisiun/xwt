// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLibSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate void DBusSignalCallbackNative(IntPtr connection, IntPtr sender_name, IntPtr object_path, IntPtr interface_name, IntPtr signal_name, IntPtr parameters, IntPtr user_data);

	internal class DBusSignalCallbackInvoker {

		DBusSignalCallbackNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~DBusSignalCallbackInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal DBusSignalCallbackInvoker (DBusSignalCallbackNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal DBusSignalCallbackInvoker (DBusSignalCallbackNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal DBusSignalCallbackInvoker (DBusSignalCallbackNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal GLib.DBusSignalCallback Handler {
			get {
				return new GLib.DBusSignalCallback(InvokeNative);
			}
		}

		void InvokeNative (GLib.DBusConnection connection, string sender_name, string object_path, string interface_name, string signal_name, GLib.Variant parameters)
		{
			IntPtr native_sender_name = GLib.Marshaller.StringToPtrGStrdup (sender_name);
			IntPtr native_object_path = GLib.Marshaller.StringToPtrGStrdup (object_path);
			IntPtr native_interface_name = GLib.Marshaller.StringToPtrGStrdup (interface_name);
			IntPtr native_signal_name = GLib.Marshaller.StringToPtrGStrdup (signal_name);
			native_cb (connection == null ? IntPtr.Zero : connection.Handle, native_sender_name, native_object_path, native_interface_name, native_signal_name, parameters == null ? IntPtr.Zero : parameters.Handle, __data);
			GLib.Marshaller.Free (native_sender_name);
			GLib.Marshaller.Free (native_object_path);
			GLib.Marshaller.Free (native_interface_name);
			GLib.Marshaller.Free (native_signal_name);
		}
	}

	internal class DBusSignalCallbackWrapper {

		public void NativeCallback (IntPtr connection, IntPtr sender_name, IntPtr object_path, IntPtr interface_name, IntPtr signal_name, IntPtr parameters, IntPtr user_data)
		{
			try {
				managed (GLib.Object.GetObject(connection) as GLib.DBusConnection, GLib.Marshaller.Utf8PtrToString (sender_name), GLib.Marshaller.Utf8PtrToString (object_path), GLib.Marshaller.Utf8PtrToString (interface_name), GLib.Marshaller.Utf8PtrToString (signal_name), new GLib.Variant(parameters));
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal DBusSignalCallbackNative NativeDelegate;
		GLib.DBusSignalCallback managed;

		public DBusSignalCallbackWrapper (GLib.DBusSignalCallback managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new DBusSignalCallbackNative (NativeCallback);
		}

		public static GLib.DBusSignalCallback GetManagedDelegate (DBusSignalCallbackNative native)
		{
			if (native == null)
				return null;
			DBusSignalCallbackWrapper wrapper = (DBusSignalCallbackWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
