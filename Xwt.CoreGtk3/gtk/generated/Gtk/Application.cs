// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Application : GLib.Application {

		public Application (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_application_new(IntPtr application_id, int flags);

		public Application (string application_id, GLib.ApplicationFlags flags) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Application)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("application_id");
				vals.Add (new GLib.Value (application_id));
				names.Add ("flags");
				vals.Add (new GLib.Value (flags));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_application_id = GLib.Marshaller.StringToPtrGStrdup (application_id);
			Raw = gtk_application_new(native_application_id, (int) flags);
			GLib.Marshaller.Free (native_application_id);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkApplicationClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=16)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Application)).GetClassSize ();
		static Dictionary<GLib.GType, GtkApplicationClass> class_structs;

		static GtkApplicationClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkApplicationClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkApplicationClass class_struct = (GtkApplicationClass) Marshal.PtrToStructure (class_ptr, typeof (GtkApplicationClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkApplicationClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_application_add_window(IntPtr raw, IntPtr window);

		public void AddWindow(Gtk.Window window) {
			gtk_application_add_window(Handle, window == null ? IntPtr.Zero : window.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_application_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_application_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_application_get_windows(IntPtr raw);

		public Gtk.Window[] Windows { 
			get {
				IntPtr raw_ret = gtk_application_get_windows(Handle);
				Gtk.Window[] ret = (Gtk.Window[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), false, false, typeof(Gtk.Window));
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_application_remove_window(IntPtr raw, IntPtr window);

		public void RemoveWindow(Gtk.Window window) {
			gtk_application_remove_window(Handle, window == null ? IntPtr.Zero : window.Handle);
		}

#endregion
	}
}
