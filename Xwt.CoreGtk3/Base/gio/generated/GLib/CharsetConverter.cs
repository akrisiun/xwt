// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class CharsetConverter : GLib.Object, GLib.IConverter, GLib.IInitable {

		public CharsetConverter (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_charset_converter_new(IntPtr to_charset, IntPtr from_charset, out IntPtr error);

		public unsafe CharsetConverter (string to_charset, string from_charset) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (CharsetConverter)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_to_charset = GLib.Marshaller.StringToPtrGStrdup (to_charset);
			IntPtr native_from_charset = GLib.Marshaller.StringToPtrGStrdup (from_charset);
			IntPtr error = IntPtr.Zero;
			Raw = g_charset_converter_new(native_to_charset, native_from_charset, out error);
			GLib.Marshaller.Free (native_to_charset);
			GLib.Marshaller.Free (native_from_charset);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[GLib.Property ("to-charset")]
		public string ToCharset {
			get {
				GLib.Value val = GetProperty ("to-charset");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("from-charset")]
		public string FromCharset {
			get {
				GLib.Value val = GetProperty ("from-charset");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_charset_converter_get_use_fallback(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_charset_converter_set_use_fallback(IntPtr raw, bool use_fallback);

		[GLib.Property ("use-fallback")]
		public bool UseFallback {
			get  {
				bool raw_ret = g_charset_converter_get_use_fallback(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				g_charset_converter_set_use_fallback(Handle, value);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GCharsetConverterClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GCharsetConverterClass> class_structs;

		static GCharsetConverterClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GCharsetConverterClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GCharsetConverterClass class_struct = (GCharsetConverterClass) Marshal.PtrToStructure (class_ptr, typeof (GCharsetConverterClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GCharsetConverterClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint g_charset_converter_get_num_fallbacks(IntPtr raw);

		public uint NumFallbacks { 
			get {
				uint raw_ret = g_charset_converter_get_num_fallbacks(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_charset_converter_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_charset_converter_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_converter_convert(IntPtr raw, IntPtr inbuf, UIntPtr inbuf_size, IntPtr outbuf, UIntPtr outbuf_size, int flags, out UIntPtr bytes_read, out UIntPtr bytes_written, out IntPtr error);

		public GLib.ConverterResult Convert(IntPtr inbuf, ulong inbuf_size, IntPtr outbuf, ulong outbuf_size, GLib.ConverterFlags flags, out ulong bytes_read, out ulong bytes_written) {
			UIntPtr native_bytes_read;
			UIntPtr native_bytes_written;
			IntPtr error = IntPtr.Zero;
			int raw_ret = g_converter_convert(Handle, inbuf, new UIntPtr (inbuf_size), outbuf, new UIntPtr (outbuf_size), (int) flags, out native_bytes_read, out native_bytes_written, out error);
			GLib.ConverterResult ret = (GLib.ConverterResult) raw_ret;
			bytes_read = (ulong) native_bytes_read;
			bytes_written = (ulong) native_bytes_written;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_converter_reset(IntPtr raw);

		public void Reset() {
			g_converter_reset(Handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_initable_init(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public bool Init(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_initable_init(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
