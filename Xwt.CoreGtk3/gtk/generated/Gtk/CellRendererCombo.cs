// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class CellRendererCombo : Gtk.CellRendererText {

		public CellRendererCombo (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_renderer_combo_new();

		public CellRendererCombo () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (CellRendererCombo)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_cell_renderer_combo_new();
		}

		[GLib.Property ("model")]
		public Gtk.ITreeModel Model {
			get {
				GLib.Value val = GetProperty ("model");
				Gtk.ITreeModel ret = Gtk.TreeModelAdapter.GetObject ((GLib.Object) val);
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("model", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("text-column")]
		public int TextColumn {
			get {
				GLib.Value val = GetProperty ("text-column");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("text-column", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("has-entry")]
		public bool HasEntry {
			get {
				GLib.Value val = GetProperty ("has-entry");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("has-entry", val);
				val.Dispose ();
			}
		}

		[GLib.Signal("changed")]
		public event Gtk.ChangedHandler Changed {
			add {
				this.AddSignalHandler ("changed", value, typeof (Gtk.ChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("changed", value);
			}
		}

		static ChangedNativeDelegate Changed_cb_delegate;
		static ChangedNativeDelegate ChangedVMCallback {
			get {
				if (Changed_cb_delegate == null)
					Changed_cb_delegate = new ChangedNativeDelegate (Changed_cb);
				return Changed_cb_delegate;
			}
		}

		static void OverrideChanged (GLib.GType gtype)
		{
			OverrideChanged (gtype, ChangedVMCallback);
		}

		static void OverrideChanged (GLib.GType gtype, ChangedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "changed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedNativeDelegate (IntPtr inst, IntPtr p0, IntPtr p1);

		static void Changed_cb (IntPtr inst, IntPtr p0, IntPtr p1)
		{
			try {
				CellRendererCombo __obj = GLib.Object.GetObject (inst, false) as CellRendererCombo;
				__obj.OnChanged (GLib.Marshaller.PtrToStringGFree(p0), Gtk.TreeIter.New (p1));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellRendererCombo), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged (string p0, Gtk.TreeIter p1)
		{
			InternalChanged (p0, p1);
		}

		private void InternalChanged (string p0, Gtk.TreeIter p1)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (p0);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (p1);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkCellRendererComboClass {
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.CellRendererText)).GetClassSize ();
		static Dictionary<GLib.GType, GtkCellRendererComboClass> class_structs;

		static GtkCellRendererComboClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkCellRendererComboClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkCellRendererComboClass class_struct = (GtkCellRendererComboClass) Marshal.PtrToStructure (class_ptr, typeof (GtkCellRendererComboClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkCellRendererComboClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_renderer_combo_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_cell_renderer_combo_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
