// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class RadioAction : Gtk.ToggleAction {

		public RadioAction (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_action_new(IntPtr name, IntPtr label, IntPtr tooltip, IntPtr stock_id, int value);

		public RadioAction (string name, string label, string tooltip, string stock_id, int value) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RadioAction)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("name");
				vals.Add (new GLib.Value (name));
				names.Add ("label");
				vals.Add (new GLib.Value (label));
				names.Add ("tooltip");
				vals.Add (new GLib.Value (tooltip));
				names.Add ("stock_id");
				vals.Add (new GLib.Value (stock_id));
				names.Add ("value");
				vals.Add (new GLib.Value (value));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			IntPtr native_tooltip = GLib.Marshaller.StringToPtrGStrdup (tooltip);
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			Raw = gtk_radio_action_new(native_name, native_label, native_tooltip, native_stock_id, value);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_label);
			GLib.Marshaller.Free (native_tooltip);
			GLib.Marshaller.Free (native_stock_id);
		}

		[GLib.Property ("value")]
		public int Value {
			get {
				GLib.Value val = GetProperty ("value");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("value", val);
				val.Dispose ();
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_radio_action_get_current_value(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_radio_action_set_current_value(IntPtr raw, int current_value);

		[GLib.Property ("current-value")]
		public int CurrentValue {
			get  {
				int raw_ret = gtk_radio_action_get_current_value(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_radio_action_set_current_value(Handle, value);
			}
		}

		[GLib.Signal("changed")]
		public event Gtk.ChangedHandler Changed {
			add {
				this.AddSignalHandler ("changed", value, typeof (Gtk.ChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("changed", value);
			}
		}

		static ChangedNativeDelegate Changed_cb_delegate;
		static ChangedNativeDelegate ChangedVMCallback {
			get {
				if (Changed_cb_delegate == null)
					Changed_cb_delegate = new ChangedNativeDelegate (Changed_cb);
				return Changed_cb_delegate;
			}
		}

		static void OverrideChanged (GLib.GType gtype)
		{
			OverrideChanged (gtype, ChangedVMCallback);
		}

		static void OverrideChanged (GLib.GType gtype, ChangedNativeDelegate callback)
		{
			GtkRadioActionClass class_iface = GetClassStruct (gtype, false);
			class_iface.Changed = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedNativeDelegate (IntPtr inst, IntPtr current);

		static void Changed_cb (IntPtr inst, IntPtr current)
		{
			try {
				RadioAction __obj = GLib.Object.GetObject (inst, false) as RadioAction;
				__obj.OnChanged (GLib.Object.GetObject(current) as Gtk.RadioAction);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.RadioAction), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged (Gtk.RadioAction current)
		{
			InternalChanged (current);
		}

		private void InternalChanged (Gtk.RadioAction current)
		{
			ChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Changed;
			if (unmanaged == null) return;

			unmanaged (this.Handle, current == null ? IntPtr.Zero : current.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkRadioActionClass {
			public ChangedNativeDelegate Changed;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.ToggleAction)).GetClassSize ();
		static Dictionary<GLib.GType, GtkRadioActionClass> class_structs;

		static GtkRadioActionClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkRadioActionClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkRadioActionClass class_struct = (GtkRadioActionClass) Marshal.PtrToStructure (class_ptr, typeof (GtkRadioActionClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkRadioActionClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_action_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_radio_action_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_radio_action_join_group(IntPtr raw, IntPtr group_source);

		public void JoinGroup(Gtk.RadioAction group_source) {
			gtk_radio_action_join_group(Handle, group_source == null ? IntPtr.Zero : group_source.Handle);
		}

#endregion
	}
}
