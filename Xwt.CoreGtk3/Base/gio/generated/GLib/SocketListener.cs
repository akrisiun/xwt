// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SocketListener : GLib.Object {

		public SocketListener (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_socket_listener_new();

		public SocketListener () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SocketListener)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = g_socket_listener_new();
		}

		[GLib.Property ("listen-backlog")]
		public int ListenBacklog {
			get {
				GLib.Value val = GetProperty ("listen-backlog");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("listen-backlog", val);
				val.Dispose ();
			}
		}

		static ChangedNativeDelegate Changed_cb_delegate;
		static ChangedNativeDelegate ChangedVMCallback {
			get {
				if (Changed_cb_delegate == null)
					Changed_cb_delegate = new ChangedNativeDelegate (Changed_cb);
				return Changed_cb_delegate;
			}
		}

		static void OverrideChanged (GLib.GType gtype)
		{
			OverrideChanged (gtype, ChangedVMCallback);
		}

		static void OverrideChanged (GLib.GType gtype, ChangedNativeDelegate callback)
		{
			GSocketListenerClass class_iface = GetClassStruct (gtype, false);
			class_iface.Changed = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedNativeDelegate (IntPtr inst);

		static void Changed_cb (IntPtr inst)
		{
			try {
				SocketListener __obj = GLib.Object.GetObject (inst, false) as SocketListener;
				__obj.OnChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.SocketListener), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged ()
		{
			InternalChanged ();
		}

		private void InternalChanged ()
		{
			ChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Changed;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GSocketListenerClass {
			public ChangedNativeDelegate Changed;
			IntPtr GReserved1;
			IntPtr GReserved2;
			IntPtr GReserved3;
			IntPtr GReserved4;
			IntPtr GReserved5;
			IntPtr GReserved6;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GSocketListenerClass> class_structs;

		static GSocketListenerClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GSocketListenerClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GSocketListenerClass class_struct = (GSocketListenerClass) Marshal.PtrToStructure (class_ptr, typeof (GSocketListenerClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GSocketListenerClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_listener_accept(IntPtr raw, IntPtr source_object, IntPtr cancellable, out IntPtr error);

		public unsafe GLib.SocketConnection Accept(GLib.Object source_object, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_listener_accept(Handle, source_object == null ? IntPtr.Zero : source_object.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.SocketConnection ret = GLib.Object.GetObject(raw_ret) as GLib.SocketConnection;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_socket_listener_accept_async(IntPtr raw, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void AcceptAsync(GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_socket_listener_accept_async(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_listener_accept_finish(IntPtr raw, IntPtr result, IntPtr source_object, out IntPtr error);

		public unsafe GLib.SocketConnection AcceptFinish(GLib.IAsyncResult result, GLib.Object source_object) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_listener_accept_finish(Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), source_object == null ? IntPtr.Zero : source_object.Handle, out error);
			GLib.SocketConnection ret = GLib.Object.GetObject(raw_ret) as GLib.SocketConnection;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_listener_accept_socket(IntPtr raw, IntPtr source_object, IntPtr cancellable, out IntPtr error);

		public unsafe GLib.Socket AcceptSocket(GLib.Object source_object, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_listener_accept_socket(Handle, source_object == null ? IntPtr.Zero : source_object.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.Socket ret = GLib.Object.GetObject(raw_ret) as GLib.Socket;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_socket_listener_accept_socket_async(IntPtr raw, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void AcceptSocketAsync(GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_socket_listener_accept_socket_async(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_listener_accept_socket_finish(IntPtr raw, IntPtr result, IntPtr source_object, out IntPtr error);

		public unsafe GLib.Socket AcceptSocketFinish(GLib.IAsyncResult result, GLib.Object source_object) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_listener_accept_socket_finish(Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), source_object == null ? IntPtr.Zero : source_object.Handle, out error);
			GLib.Socket ret = GLib.Object.GetObject(raw_ret) as GLib.Socket;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_socket_listener_add_address(IntPtr raw, IntPtr address, int type, int protocol, IntPtr source_object, IntPtr effective_address, out IntPtr error);

		public unsafe bool AddAddress(GLib.SocketAddress address, GLib.SocketType type, GLib.SocketProtocol protocol, GLib.Object source_object, GLib.SocketAddress effective_address) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_socket_listener_add_address(Handle, address == null ? IntPtr.Zero : address.Handle, (int) type, (int) protocol, source_object == null ? IntPtr.Zero : source_object.Handle, effective_address == null ? IntPtr.Zero : effective_address.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe ushort g_socket_listener_add_any_inet_port(IntPtr raw, IntPtr source_object, out IntPtr error);

		public unsafe ushort AddAnyInetPort(GLib.Object source_object) {
			IntPtr error = IntPtr.Zero;
			ushort raw_ret = g_socket_listener_add_any_inet_port(Handle, source_object == null ? IntPtr.Zero : source_object.Handle, out error);
			ushort ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_socket_listener_add_inet_port(IntPtr raw, ushort port, IntPtr source_object, out IntPtr error);

		public unsafe bool AddInetPort(ushort port, GLib.Object source_object) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_socket_listener_add_inet_port(Handle, port, source_object == null ? IntPtr.Zero : source_object.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_socket_listener_add_socket(IntPtr raw, IntPtr socket, IntPtr source_object, out IntPtr error);

		public unsafe bool AddSocket(GLib.Socket socket, GLib.Object source_object) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_socket_listener_add_socket(Handle, socket == null ? IntPtr.Zero : socket.Handle, source_object == null ? IntPtr.Zero : source_object.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_socket_listener_close(IntPtr raw);

		public void Close() {
			g_socket_listener_close(Handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_socket_listener_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_socket_listener_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_socket_listener_set_backlog(IntPtr raw, int listen_backlog);

		public int Backlog { 
			set {
				g_socket_listener_set_backlog(Handle, value);
			}
		}

#endregion
	}
}
