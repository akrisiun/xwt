// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DBusMessage : GLib.Object {

		public DBusMessage (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_new();

		public DBusMessage () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusMessage)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = g_dbus_message_new();
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_message_new_from_blob(out byte blob, UIntPtr blob_len, int capabilities, out IntPtr error);

		public unsafe DBusMessage (out byte blob, ulong blob_len, GLib.DBusCapabilityFlags capabilities) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusMessage)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr error = IntPtr.Zero;
			Raw = g_dbus_message_new_from_blob(out blob, new UIntPtr (blob_len), (int) capabilities, out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_new_method_call(IntPtr name, IntPtr path, IntPtr interface_, IntPtr method);

		public DBusMessage (string name, string path, string interface_, string method) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusMessage)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr native_interface_ = GLib.Marshaller.StringToPtrGStrdup (interface_);
			IntPtr native_method = GLib.Marshaller.StringToPtrGStrdup (method);
			Raw = g_dbus_message_new_method_call(native_name, native_path, native_interface_, native_method);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_path);
			GLib.Marshaller.Free (native_interface_);
			GLib.Marshaller.Free (native_method);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_new_method_error_literal(IntPtr method_call_message, IntPtr error_name, IntPtr error_message);

		public DBusMessage (GLib.DBusMessage method_call_message, string error_name, string error_message) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusMessage)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_error_name = GLib.Marshaller.StringToPtrGStrdup (error_name);
			IntPtr native_error_message = GLib.Marshaller.StringToPtrGStrdup (error_message);
			Raw = g_dbus_message_new_method_error_literal(method_call_message == null ? IntPtr.Zero : method_call_message.Handle, native_error_name, native_error_message);
			GLib.Marshaller.Free (native_error_name);
			GLib.Marshaller.Free (native_error_message);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_new_method_error_valist(IntPtr method_call_message, IntPtr error_name, IntPtr error_message_format, IntPtr var_args);

		public DBusMessage (GLib.DBusMessage method_call_message, string error_name, string error_message_format, IntPtr var_args) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusMessage)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_error_name = GLib.Marshaller.StringToPtrGStrdup (error_name);
			IntPtr native_error_message_format = GLib.Marshaller.StringToPtrGStrdup (error_message_format);
			Raw = g_dbus_message_new_method_error_valist(method_call_message == null ? IntPtr.Zero : method_call_message.Handle, native_error_name, native_error_message_format, var_args);
			GLib.Marshaller.Free (native_error_name);
			GLib.Marshaller.Free (native_error_message_format);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_new_method_reply(IntPtr method_call_message);

		public DBusMessage (GLib.DBusMessage method_call_message) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusMessage)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = g_dbus_message_new_method_reply(method_call_message == null ? IntPtr.Zero : method_call_message.Handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_new_signal(IntPtr path, IntPtr interface_, IntPtr signal);

		public DBusMessage (string path, string interface_, string signal) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DBusMessage)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr native_interface_ = GLib.Marshaller.StringToPtrGStrdup (interface_);
			IntPtr native_signal = GLib.Marshaller.StringToPtrGStrdup (signal);
			Raw = g_dbus_message_new_signal(native_path, native_interface_, native_signal);
			GLib.Marshaller.Free (native_path);
			GLib.Marshaller.Free (native_interface_);
			GLib.Marshaller.Free (native_signal);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_dbus_message_get_locked(IntPtr raw);

		[GLib.Property ("locked")]
		public bool Locked {
			get  {
				bool raw_ret = g_dbus_message_get_locked(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GDBusMessageClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GDBusMessageClass> class_structs;

		static GDBusMessageClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GDBusMessageClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GDBusMessageClass class_struct = (GDBusMessageClass) Marshal.PtrToStructure (class_ptr, typeof (GDBusMessageClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GDBusMessageClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_message_bytes_needed(out byte blob, UIntPtr blob_len, out IntPtr error);

		public static unsafe long BytesNeeded(out byte blob, ulong blob_len) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_dbus_message_bytes_needed(out blob, new UIntPtr (blob_len), out error);
			long ret = (long) raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_message_copy(IntPtr raw, out IntPtr error);

		public unsafe GLib.DBusMessage Copy() {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_dbus_message_copy(Handle, out error);
			GLib.DBusMessage ret = GLib.Object.GetObject(raw_ret, true) as GLib.DBusMessage;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_get_arg0(IntPtr raw);

		public string Arg0 { 
			get {
				IntPtr raw_ret = g_dbus_message_get_arg0(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_get_body(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_body(IntPtr raw, IntPtr body);

		public GLib.Variant Body { 
			get {
				IntPtr raw_ret = g_dbus_message_get_body(Handle);
				GLib.Variant ret = new GLib.Variant(raw_ret);
				return ret;
			}
			set {
				g_dbus_message_set_body(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_dbus_message_get_byte_order(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_byte_order(IntPtr raw, int byte_order);

		public GLib.DBusMessageByteOrder ByteOrder { 
			get {
				int raw_ret = g_dbus_message_get_byte_order(Handle);
				GLib.DBusMessageByteOrder ret = (GLib.DBusMessageByteOrder) raw_ret;
				return ret;
			}
			set {
				g_dbus_message_set_byte_order(Handle, (int) value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_get_destination(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_destination(IntPtr raw, IntPtr value);

		public string Destination { 
			get {
				IntPtr raw_ret = g_dbus_message_get_destination(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				g_dbus_message_set_destination(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_get_error_name(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_error_name(IntPtr raw, IntPtr value);

		public string ErrorName { 
			get {
				IntPtr raw_ret = g_dbus_message_get_error_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				g_dbus_message_set_error_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_dbus_message_get_flags(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_flags(IntPtr raw, int flags);

		public GLib.DBusMessageFlags Flags { 
			get {
				int raw_ret = g_dbus_message_get_flags(Handle);
				GLib.DBusMessageFlags ret = (GLib.DBusMessageFlags) raw_ret;
				return ret;
			}
			set {
				g_dbus_message_set_flags(Handle, (int) value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_get_header(IntPtr raw, int header_field);

		public GLib.Variant GetHeader(GLib.DBusMessageHeaderField header_field) {
			IntPtr raw_ret = g_dbus_message_get_header(Handle, (int) header_field);
			GLib.Variant ret = new GLib.Variant(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern byte g_dbus_message_get_header_fields(IntPtr raw);

		public byte HeaderFields { 
			get {
				byte raw_ret = g_dbus_message_get_header_fields(Handle);
				byte ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_get_interface(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_interface(IntPtr raw, IntPtr value);

		public string Interface { 
			get {
				IntPtr raw_ret = g_dbus_message_get_interface(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				g_dbus_message_set_interface(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_get_member(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_member(IntPtr raw, IntPtr value);

		public string Member { 
			get {
				IntPtr raw_ret = g_dbus_message_get_member(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				g_dbus_message_set_member(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_dbus_message_get_message_type(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_message_type(IntPtr raw, int type);

		public GLib.DBusMessageType MessageType { 
			get {
				int raw_ret = g_dbus_message_get_message_type(Handle);
				GLib.DBusMessageType ret = (GLib.DBusMessageType) raw_ret;
				return ret;
			}
			set {
				g_dbus_message_set_message_type(Handle, (int) value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint g_dbus_message_get_num_unix_fds(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_num_unix_fds(IntPtr raw, uint value);

		public uint NumUnixFds { 
			get {
				uint raw_ret = g_dbus_message_get_num_unix_fds(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set {
				g_dbus_message_set_num_unix_fds(Handle, value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_get_path(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_path(IntPtr raw, IntPtr value);

		public string Path { 
			get {
				IntPtr raw_ret = g_dbus_message_get_path(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				g_dbus_message_set_path(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint g_dbus_message_get_reply_serial(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_reply_serial(IntPtr raw, uint value);

		public uint ReplySerial { 
			get {
				uint raw_ret = g_dbus_message_get_reply_serial(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set {
				g_dbus_message_set_reply_serial(Handle, value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_get_sender(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_sender(IntPtr raw, IntPtr value);

		public string Sender { 
			get {
				IntPtr raw_ret = g_dbus_message_get_sender(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				g_dbus_message_set_sender(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint g_dbus_message_get_serial(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_serial(IntPtr raw, uint serial);

		public uint Serial { 
			get {
				uint raw_ret = g_dbus_message_get_serial(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set {
				g_dbus_message_set_serial(Handle, value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_get_signature(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_signature(IntPtr raw, IntPtr value);

		public string Signature { 
			get {
				IntPtr raw_ret = g_dbus_message_get_signature(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				g_dbus_message_set_signature(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_dbus_message_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_get_unix_fd_list(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_unix_fd_list(IntPtr raw, IntPtr fd_list);

		public GLib.UnixFDList UnixFdList { 
			get {
				IntPtr raw_ret = g_dbus_message_get_unix_fd_list(Handle);
				GLib.UnixFDList ret = GLib.Object.GetObject(raw_ret) as GLib.UnixFDList;
				return ret;
			}
			set {
				g_dbus_message_set_unix_fd_list(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_lock(IntPtr raw);

		public void Lock() {
			g_dbus_message_lock(Handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_message_print(IntPtr raw, uint indent);

		public string Print(uint indent) {
			IntPtr raw_ret = g_dbus_message_print(Handle, indent);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_message_set_header(IntPtr raw, int header_field, IntPtr value);

		public void SetHeader(GLib.DBusMessageHeaderField header_field, GLib.Variant value) {
			g_dbus_message_set_header(Handle, (int) header_field, value == null ? IntPtr.Zero : value.Handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe byte g_dbus_message_to_blob(IntPtr raw, out UIntPtr out_size, int capabilities, out IntPtr error);

		public unsafe byte ToBlob(out ulong out_size, GLib.DBusCapabilityFlags capabilities) {
			UIntPtr native_out_size;
			IntPtr error = IntPtr.Zero;
			byte raw_ret = g_dbus_message_to_blob(Handle, out native_out_size, (int) capabilities, out error);
			byte ret = raw_ret;
			out_size = (ulong) native_out_size;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_dbus_message_to_gerror(IntPtr raw, out IntPtr error);

		public unsafe bool ToGerror() {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_dbus_message_to_gerror(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
