// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class FilenameCompleter : GLib.Object {

		public FilenameCompleter (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_filename_completer_new();

		public FilenameCompleter () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FilenameCompleter)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = g_filename_completer_new();
		}

		[GLib.Signal("got-completion-data")]
		public event System.EventHandler GotCompletionData {
			add {
				this.AddSignalHandler ("got-completion-data", value);
			}
			remove {
				this.RemoveSignalHandler ("got-completion-data", value);
			}
		}

		static GotCompletionDataNativeDelegate GotCompletionData_cb_delegate;
		static GotCompletionDataNativeDelegate GotCompletionDataVMCallback {
			get {
				if (GotCompletionData_cb_delegate == null)
					GotCompletionData_cb_delegate = new GotCompletionDataNativeDelegate (GotCompletionData_cb);
				return GotCompletionData_cb_delegate;
			}
		}

		static void OverrideGotCompletionData (GLib.GType gtype)
		{
			OverrideGotCompletionData (gtype, GotCompletionDataVMCallback);
		}

		static void OverrideGotCompletionData (GLib.GType gtype, GotCompletionDataNativeDelegate callback)
		{
			GFilenameCompleterClass class_iface = GetClassStruct (gtype, false);
			class_iface.GotCompletionData = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GotCompletionDataNativeDelegate (IntPtr inst);

		static void GotCompletionData_cb (IntPtr inst)
		{
			try {
				FilenameCompleter __obj = GLib.Object.GetObject (inst, false) as FilenameCompleter;
				__obj.OnGotCompletionData ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.FilenameCompleter), ConnectionMethod="OverrideGotCompletionData")]
		protected virtual void OnGotCompletionData ()
		{
			InternalGotCompletionData ();
		}

		private void InternalGotCompletionData ()
		{
			GotCompletionDataNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GotCompletionData;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GFilenameCompleterClass {
			public GotCompletionDataNativeDelegate GotCompletionData;
			IntPtr GReserved1;
			IntPtr GReserved2;
			IntPtr GReserved3;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GFilenameCompleterClass> class_structs;

		static GFilenameCompleterClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GFilenameCompleterClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GFilenameCompleterClass class_struct = (GFilenameCompleterClass) Marshal.PtrToStructure (class_ptr, typeof (GFilenameCompleterClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GFilenameCompleterClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_filename_completer_get_completion_suffix(IntPtr raw, IntPtr initial_text);

		public string GetCompletionSuffix(string initial_text) {
			IntPtr native_initial_text = GLib.Marshaller.StringToPtrGStrdup (initial_text);
			IntPtr raw_ret = g_filename_completer_get_completion_suffix(Handle, native_initial_text);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_initial_text);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_filename_completer_get_completions(IntPtr raw, IntPtr initial_text);

		public string GetCompletions(string initial_text) {
			IntPtr native_initial_text = GLib.Marshaller.StringToPtrGStrdup (initial_text);
			IntPtr raw_ret = g_filename_completer_get_completions(Handle, native_initial_text);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_initial_text);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_filename_completer_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_filename_completer_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_filename_completer_set_dirs_only(IntPtr raw, bool dirs_only);

		public bool DirsOnly { 
			set {
				g_filename_completer_set_dirs_only(Handle, value);
			}
		}

#endregion
	}
}
