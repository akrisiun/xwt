// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TextView : Gtk.Container, Gtk.IScrollable {

		public TextView (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_view_new();

		public TextView () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TextView)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_text_view_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_view_get_pixels_above_lines(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_pixels_above_lines(IntPtr raw, int pixels_above_lines);

		[GLib.Property ("pixels-above-lines")]
		public int PixelsAboveLines {
			get  {
				int raw_ret = gtk_text_view_get_pixels_above_lines(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_text_view_set_pixels_above_lines(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_view_get_pixels_below_lines(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_pixels_below_lines(IntPtr raw, int pixels_below_lines);

		[GLib.Property ("pixels-below-lines")]
		public int PixelsBelowLines {
			get  {
				int raw_ret = gtk_text_view_get_pixels_below_lines(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_text_view_set_pixels_below_lines(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_view_get_pixels_inside_wrap(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_pixels_inside_wrap(IntPtr raw, int pixels_inside_wrap);

		[GLib.Property ("pixels-inside-wrap")]
		public int PixelsInsideWrap {
			get  {
				int raw_ret = gtk_text_view_get_pixels_inside_wrap(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_text_view_set_pixels_inside_wrap(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_get_editable(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_editable(IntPtr raw, bool setting);

		[GLib.Property ("editable")]
		public bool Editable {
			get  {
				bool raw_ret = gtk_text_view_get_editable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_text_view_set_editable(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_view_get_wrap_mode(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_wrap_mode(IntPtr raw, int wrap_mode);

		[GLib.Property ("wrap-mode")]
		public Gtk.WrapMode WrapMode {
			get  {
				int raw_ret = gtk_text_view_get_wrap_mode(Handle);
				Gtk.WrapMode ret = (Gtk.WrapMode) raw_ret;
				return ret;
			}
			set  {
				gtk_text_view_set_wrap_mode(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_view_get_justification(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_justification(IntPtr raw, int justification);

		[GLib.Property ("justification")]
		public Gtk.Justification Justification {
			get  {
				int raw_ret = gtk_text_view_get_justification(Handle);
				Gtk.Justification ret = (Gtk.Justification) raw_ret;
				return ret;
			}
			set  {
				gtk_text_view_set_justification(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_view_get_left_margin(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_left_margin(IntPtr raw, int left_margin);

		[GLib.Property ("left-margin")]
		public int LeftMargin {
			get  {
				int raw_ret = gtk_text_view_get_left_margin(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_text_view_set_left_margin(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_view_get_right_margin(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_right_margin(IntPtr raw, int right_margin);

		[GLib.Property ("right-margin")]
		public int RightMargin {
			get  {
				int raw_ret = gtk_text_view_get_right_margin(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_text_view_set_right_margin(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_view_get_indent(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_indent(IntPtr raw, int indent);

		[GLib.Property ("indent")]
		public int Indent {
			get  {
				int raw_ret = gtk_text_view_get_indent(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_text_view_set_indent(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_view_get_tabs(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_tabs(IntPtr raw, IntPtr tabs);

		[GLib.Property ("tabs")]
		public Pango.TabArray Tabs {
			get  {
				IntPtr raw_ret = gtk_text_view_get_tabs(Handle);
				Pango.TabArray ret = raw_ret == IntPtr.Zero ? null : (Pango.TabArray) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.TabArray), false);
				return ret;
			}
			set  {
				gtk_text_view_set_tabs(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_get_cursor_visible(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_cursor_visible(IntPtr raw, bool setting);

		[GLib.Property ("cursor-visible")]
		public bool CursorVisible {
			get  {
				bool raw_ret = gtk_text_view_get_cursor_visible(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_text_view_set_cursor_visible(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_view_get_buffer(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_buffer(IntPtr raw, IntPtr buffer);

		[GLib.Property ("buffer")]
		public Gtk.TextBuffer Buffer {
			get  {
				IntPtr raw_ret = gtk_text_view_get_buffer(Handle);
				Gtk.TextBuffer ret = GLib.Object.GetObject(raw_ret) as Gtk.TextBuffer;
				return ret;
			}
			set  {
				gtk_text_view_set_buffer(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_get_overwrite(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_overwrite(IntPtr raw, bool overwrite);

		[GLib.Property ("overwrite")]
		public bool Overwrite {
			get  {
				bool raw_ret = gtk_text_view_get_overwrite(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_text_view_set_overwrite(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_get_accepts_tab(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_accepts_tab(IntPtr raw, bool accepts_tab);

		[GLib.Property ("accepts-tab")]
		public bool AcceptsTab {
			get  {
				bool raw_ret = gtk_text_view_get_accepts_tab(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_text_view_set_accepts_tab(Handle, value);
			}
		}

		[GLib.Property ("im-module")]
		public string ImModule {
			get {
				GLib.Value val = GetProperty ("im-module");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("im-module", val);
				val.Dispose ();
			}
		}

		[GLib.Signal("preedit-changed")]
		public event Gtk.PreeditChangedHandler PreeditChanged {
			add {
				this.AddSignalHandler ("preedit-changed", value, typeof (Gtk.PreeditChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("preedit-changed", value);
			}
		}

		[GLib.Signal("move-cursor")]
		public event Gtk.MoveCursorHandler MoveCursor {
			add {
				this.AddSignalHandler ("move-cursor", value, typeof (Gtk.MoveCursorArgs));
			}
			remove {
				this.RemoveSignalHandler ("move-cursor", value);
			}
		}

		[GLib.Signal("move-viewport")]
		public event Gtk.MoveViewportHandler MoveViewport {
			add {
				this.AddSignalHandler ("move-viewport", value, typeof (Gtk.MoveViewportArgs));
			}
			remove {
				this.RemoveSignalHandler ("move-viewport", value);
			}
		}

		[GLib.Signal("copy-clipboard")]
		public event System.EventHandler CopyClipboard {
			add {
				this.AddSignalHandler ("copy-clipboard", value);
			}
			remove {
				this.RemoveSignalHandler ("copy-clipboard", value);
			}
		}

		[GLib.Signal("cut-clipboard")]
		public event System.EventHandler CutClipboard {
			add {
				this.AddSignalHandler ("cut-clipboard", value);
			}
			remove {
				this.RemoveSignalHandler ("cut-clipboard", value);
			}
		}

		[GLib.Signal("toggle-cursor-visible")]
		public event System.EventHandler ToggleCursorVisible {
			add {
				this.AddSignalHandler ("toggle-cursor-visible", value);
			}
			remove {
				this.RemoveSignalHandler ("toggle-cursor-visible", value);
			}
		}

		[GLib.Signal("delete-from-cursor")]
		public event Gtk.DeleteFromCursorHandler DeleteFromCursor {
			add {
				this.AddSignalHandler ("delete-from-cursor", value, typeof (Gtk.DeleteFromCursorArgs));
			}
			remove {
				this.RemoveSignalHandler ("delete-from-cursor", value);
			}
		}

		[GLib.Signal("select-all")]
		public event Gtk.SelectAllHandler SelectAll {
			add {
				this.AddSignalHandler ("select-all", value, typeof (Gtk.SelectAllArgs));
			}
			remove {
				this.RemoveSignalHandler ("select-all", value);
			}
		}

		[GLib.Signal("backspace")]
		public event System.EventHandler Backspace {
			add {
				this.AddSignalHandler ("backspace", value);
			}
			remove {
				this.RemoveSignalHandler ("backspace", value);
			}
		}

		[GLib.Signal("toggle-overwrite")]
		public event System.EventHandler ToggleOverwrite {
			add {
				this.AddSignalHandler ("toggle-overwrite", value);
			}
			remove {
				this.RemoveSignalHandler ("toggle-overwrite", value);
			}
		}

		[GLib.Signal("populate-popup")]
		public event Gtk.PopulatePopupHandler PopulatePopup {
			add {
				this.AddSignalHandler ("populate-popup", value, typeof (Gtk.PopulatePopupArgs));
			}
			remove {
				this.RemoveSignalHandler ("populate-popup", value);
			}
		}

		[GLib.Signal("set-anchor")]
		public event System.EventHandler SetAnchor {
			add {
				this.AddSignalHandler ("set-anchor", value);
			}
			remove {
				this.RemoveSignalHandler ("set-anchor", value);
			}
		}

		[GLib.Signal("insert-at-cursor")]
		public event Gtk.InsertAtCursorHandler InsertAtCursor {
			add {
				this.AddSignalHandler ("insert-at-cursor", value, typeof (Gtk.InsertAtCursorArgs));
			}
			remove {
				this.RemoveSignalHandler ("insert-at-cursor", value);
			}
		}

		[GLib.Signal("paste-clipboard")]
		public event System.EventHandler PasteClipboard {
			add {
				this.AddSignalHandler ("paste-clipboard", value);
			}
			remove {
				this.RemoveSignalHandler ("paste-clipboard", value);
			}
		}

		static MoveViewportNativeDelegate MoveViewport_cb_delegate;
		static MoveViewportNativeDelegate MoveViewportVMCallback {
			get {
				if (MoveViewport_cb_delegate == null)
					MoveViewport_cb_delegate = new MoveViewportNativeDelegate (MoveViewport_cb);
				return MoveViewport_cb_delegate;
			}
		}

		static void OverrideMoveViewport (GLib.GType gtype)
		{
			OverrideMoveViewport (gtype, MoveViewportVMCallback);
		}

		static void OverrideMoveViewport (GLib.GType gtype, MoveViewportNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "move-viewport", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveViewportNativeDelegate (IntPtr inst, int p0, int p1);

		static void MoveViewport_cb (IntPtr inst, int p0, int p1)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnMoveViewport ((Gtk.ScrollStep) p0, p1);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverrideMoveViewport")]
		protected virtual void OnMoveViewport (Gtk.ScrollStep p0, int p1)
		{
			InternalMoveViewport (p0, p1);
		}

		private void InternalMoveViewport (Gtk.ScrollStep p0, int p1)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (p0);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (p1);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static SelectAllNativeDelegate SelectAll_cb_delegate;
		static SelectAllNativeDelegate SelectAllVMCallback {
			get {
				if (SelectAll_cb_delegate == null)
					SelectAll_cb_delegate = new SelectAllNativeDelegate (SelectAll_cb);
				return SelectAll_cb_delegate;
			}
		}

		static void OverrideSelectAll (GLib.GType gtype)
		{
			OverrideSelectAll (gtype, SelectAllVMCallback);
		}

		static void OverrideSelectAll (GLib.GType gtype, SelectAllNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "select-all", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectAllNativeDelegate (IntPtr inst, bool p0);

		static void SelectAll_cb (IntPtr inst, bool p0)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnSelectAll (p0);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverrideSelectAll")]
		protected virtual void OnSelectAll (bool p0)
		{
			InternalSelectAll (p0);
		}

		private void InternalSelectAll (bool p0)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (p0);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static ToggleCursorVisibleNativeDelegate ToggleCursorVisible_cb_delegate;
		static ToggleCursorVisibleNativeDelegate ToggleCursorVisibleVMCallback {
			get {
				if (ToggleCursorVisible_cb_delegate == null)
					ToggleCursorVisible_cb_delegate = new ToggleCursorVisibleNativeDelegate (ToggleCursorVisible_cb);
				return ToggleCursorVisible_cb_delegate;
			}
		}

		static void OverrideToggleCursorVisible (GLib.GType gtype)
		{
			OverrideToggleCursorVisible (gtype, ToggleCursorVisibleVMCallback);
		}

		static void OverrideToggleCursorVisible (GLib.GType gtype, ToggleCursorVisibleNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "toggle-cursor-visible", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggleCursorVisibleNativeDelegate (IntPtr inst);

		static void ToggleCursorVisible_cb (IntPtr inst)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnToggleCursorVisible ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverrideToggleCursorVisible")]
		protected virtual void OnToggleCursorVisible ()
		{
			InternalToggleCursorVisible ();
		}

		private void InternalToggleCursorVisible ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static PreeditChangedNativeDelegate PreeditChanged_cb_delegate;
		static PreeditChangedNativeDelegate PreeditChangedVMCallback {
			get {
				if (PreeditChanged_cb_delegate == null)
					PreeditChanged_cb_delegate = new PreeditChangedNativeDelegate (PreeditChanged_cb);
				return PreeditChanged_cb_delegate;
			}
		}

		static void OverridePreeditChanged (GLib.GType gtype)
		{
			OverridePreeditChanged (gtype, PreeditChangedVMCallback);
		}

		static void OverridePreeditChanged (GLib.GType gtype, PreeditChangedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "preedit-changed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PreeditChangedNativeDelegate (IntPtr inst, IntPtr p0);

		static void PreeditChanged_cb (IntPtr inst, IntPtr p0)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnPreeditChanged (GLib.Marshaller.PtrToStringGFree(p0));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverridePreeditChanged")]
		protected virtual void OnPreeditChanged (string p0)
		{
			InternalPreeditChanged (p0);
		}

		private void InternalPreeditChanged (string p0)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (p0);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static PopulatePopupNativeDelegate PopulatePopup_cb_delegate;
		static PopulatePopupNativeDelegate PopulatePopupVMCallback {
			get {
				if (PopulatePopup_cb_delegate == null)
					PopulatePopup_cb_delegate = new PopulatePopupNativeDelegate (PopulatePopup_cb);
				return PopulatePopup_cb_delegate;
			}
		}

		static void OverridePopulatePopup (GLib.GType gtype)
		{
			OverridePopulatePopup (gtype, PopulatePopupVMCallback);
		}

		static void OverridePopulatePopup (GLib.GType gtype, PopulatePopupNativeDelegate callback)
		{
			GtkTextViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.PopulatePopup = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PopulatePopupNativeDelegate (IntPtr inst, IntPtr menu);

		static void PopulatePopup_cb (IntPtr inst, IntPtr menu)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnPopulatePopup (GLib.Object.GetObject(menu) as Gtk.Menu);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverridePopulatePopup")]
		protected virtual void OnPopulatePopup (Gtk.Menu menu)
		{
			InternalPopulatePopup (menu);
		}

		private void InternalPopulatePopup (Gtk.Menu menu)
		{
			PopulatePopupNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).PopulatePopup;
			if (unmanaged == null) return;

			unmanaged (this.Handle, menu == null ? IntPtr.Zero : menu.Handle);
		}

		static MoveCursorNativeDelegate MoveCursor_cb_delegate;
		static MoveCursorNativeDelegate MoveCursorVMCallback {
			get {
				if (MoveCursor_cb_delegate == null)
					MoveCursor_cb_delegate = new MoveCursorNativeDelegate (MoveCursor_cb);
				return MoveCursor_cb_delegate;
			}
		}

		static void OverrideMoveCursor (GLib.GType gtype)
		{
			OverrideMoveCursor (gtype, MoveCursorVMCallback);
		}

		static void OverrideMoveCursor (GLib.GType gtype, MoveCursorNativeDelegate callback)
		{
			GtkTextViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.MoveCursor = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveCursorNativeDelegate (IntPtr inst, int step, int count, bool extend_selection);

		static void MoveCursor_cb (IntPtr inst, int step, int count, bool extend_selection)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnMoveCursor ((Gtk.MovementStep) step, count, extend_selection);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverrideMoveCursor")]
		protected virtual void OnMoveCursor (Gtk.MovementStep step, int count, bool extend_selection)
		{
			InternalMoveCursor (step, count, extend_selection);
		}

		private void InternalMoveCursor (Gtk.MovementStep step, int count, bool extend_selection)
		{
			MoveCursorNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).MoveCursor;
			if (unmanaged == null) return;

			unmanaged (this.Handle, (int) step, count, extend_selection);
		}

		static SetAnchorNativeDelegate SetAnchor_cb_delegate;
		static SetAnchorNativeDelegate SetAnchorVMCallback {
			get {
				if (SetAnchor_cb_delegate == null)
					SetAnchor_cb_delegate = new SetAnchorNativeDelegate (SetAnchor_cb);
				return SetAnchor_cb_delegate;
			}
		}

		static void OverrideSetAnchor (GLib.GType gtype)
		{
			OverrideSetAnchor (gtype, SetAnchorVMCallback);
		}

		static void OverrideSetAnchor (GLib.GType gtype, SetAnchorNativeDelegate callback)
		{
			GtkTextViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.SetAnchor = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetAnchorNativeDelegate (IntPtr inst);

		static void SetAnchor_cb (IntPtr inst)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnSetAnchor ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverrideSetAnchor")]
		protected virtual void OnSetAnchor ()
		{
			InternalSetAnchor ();
		}

		private void InternalSetAnchor ()
		{
			SetAnchorNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SetAnchor;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static InsertAtCursorNativeDelegate InsertAtCursor_cb_delegate;
		static InsertAtCursorNativeDelegate InsertAtCursorVMCallback {
			get {
				if (InsertAtCursor_cb_delegate == null)
					InsertAtCursor_cb_delegate = new InsertAtCursorNativeDelegate (InsertAtCursor_cb);
				return InsertAtCursor_cb_delegate;
			}
		}

		static void OverrideInsertAtCursor (GLib.GType gtype)
		{
			OverrideInsertAtCursor (gtype, InsertAtCursorVMCallback);
		}

		static void OverrideInsertAtCursor (GLib.GType gtype, InsertAtCursorNativeDelegate callback)
		{
			GtkTextViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.InsertAtCursor = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void InsertAtCursorNativeDelegate (IntPtr inst, IntPtr str);

		static void InsertAtCursor_cb (IntPtr inst, IntPtr str)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnInsertAtCursor (GLib.Marshaller.Utf8PtrToString (str));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverrideInsertAtCursor")]
		protected virtual void OnInsertAtCursor (string str)
		{
			InternalInsertAtCursor (str);
		}

		private void InternalInsertAtCursor (string str)
		{
			InsertAtCursorNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).InsertAtCursor;
			if (unmanaged == null) return;

			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			unmanaged (this.Handle, native_str);
			GLib.Marshaller.Free (native_str);
		}

		static DeleteFromCursorNativeDelegate DeleteFromCursor_cb_delegate;
		static DeleteFromCursorNativeDelegate DeleteFromCursorVMCallback {
			get {
				if (DeleteFromCursor_cb_delegate == null)
					DeleteFromCursor_cb_delegate = new DeleteFromCursorNativeDelegate (DeleteFromCursor_cb);
				return DeleteFromCursor_cb_delegate;
			}
		}

		static void OverrideDeleteFromCursor (GLib.GType gtype)
		{
			OverrideDeleteFromCursor (gtype, DeleteFromCursorVMCallback);
		}

		static void OverrideDeleteFromCursor (GLib.GType gtype, DeleteFromCursorNativeDelegate callback)
		{
			GtkTextViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.DeleteFromCursor = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DeleteFromCursorNativeDelegate (IntPtr inst, int type, int count);

		static void DeleteFromCursor_cb (IntPtr inst, int type, int count)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnDeleteFromCursor ((Gtk.DeleteType) type, count);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverrideDeleteFromCursor")]
		protected virtual void OnDeleteFromCursor (Gtk.DeleteType type, int count)
		{
			InternalDeleteFromCursor (type, count);
		}

		private void InternalDeleteFromCursor (Gtk.DeleteType type, int count)
		{
			DeleteFromCursorNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).DeleteFromCursor;
			if (unmanaged == null) return;

			unmanaged (this.Handle, (int) type, count);
		}

		static BackspaceNativeDelegate Backspace_cb_delegate;
		static BackspaceNativeDelegate BackspaceVMCallback {
			get {
				if (Backspace_cb_delegate == null)
					Backspace_cb_delegate = new BackspaceNativeDelegate (Backspace_cb);
				return Backspace_cb_delegate;
			}
		}

		static void OverrideBackspace (GLib.GType gtype)
		{
			OverrideBackspace (gtype, BackspaceVMCallback);
		}

		static void OverrideBackspace (GLib.GType gtype, BackspaceNativeDelegate callback)
		{
			GtkTextViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.Backspace = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void BackspaceNativeDelegate (IntPtr inst);

		static void Backspace_cb (IntPtr inst)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnBackspace ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverrideBackspace")]
		protected virtual void OnBackspace ()
		{
			InternalBackspace ();
		}

		private void InternalBackspace ()
		{
			BackspaceNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Backspace;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static CutClipboardNativeDelegate CutClipboard_cb_delegate;
		static CutClipboardNativeDelegate CutClipboardVMCallback {
			get {
				if (CutClipboard_cb_delegate == null)
					CutClipboard_cb_delegate = new CutClipboardNativeDelegate (CutClipboard_cb);
				return CutClipboard_cb_delegate;
			}
		}

		static void OverrideCutClipboard (GLib.GType gtype)
		{
			OverrideCutClipboard (gtype, CutClipboardVMCallback);
		}

		static void OverrideCutClipboard (GLib.GType gtype, CutClipboardNativeDelegate callback)
		{
			GtkTextViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.CutClipboard = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CutClipboardNativeDelegate (IntPtr inst);

		static void CutClipboard_cb (IntPtr inst)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnCutClipboard ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverrideCutClipboard")]
		protected virtual void OnCutClipboard ()
		{
			InternalCutClipboard ();
		}

		private void InternalCutClipboard ()
		{
			CutClipboardNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).CutClipboard;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static CopyClipboardNativeDelegate CopyClipboard_cb_delegate;
		static CopyClipboardNativeDelegate CopyClipboardVMCallback {
			get {
				if (CopyClipboard_cb_delegate == null)
					CopyClipboard_cb_delegate = new CopyClipboardNativeDelegate (CopyClipboard_cb);
				return CopyClipboard_cb_delegate;
			}
		}

		static void OverrideCopyClipboard (GLib.GType gtype)
		{
			OverrideCopyClipboard (gtype, CopyClipboardVMCallback);
		}

		static void OverrideCopyClipboard (GLib.GType gtype, CopyClipboardNativeDelegate callback)
		{
			GtkTextViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.CopyClipboard = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CopyClipboardNativeDelegate (IntPtr inst);

		static void CopyClipboard_cb (IntPtr inst)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnCopyClipboard ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverrideCopyClipboard")]
		protected virtual void OnCopyClipboard ()
		{
			InternalCopyClipboard ();
		}

		private void InternalCopyClipboard ()
		{
			CopyClipboardNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).CopyClipboard;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static PasteClipboardNativeDelegate PasteClipboard_cb_delegate;
		static PasteClipboardNativeDelegate PasteClipboardVMCallback {
			get {
				if (PasteClipboard_cb_delegate == null)
					PasteClipboard_cb_delegate = new PasteClipboardNativeDelegate (PasteClipboard_cb);
				return PasteClipboard_cb_delegate;
			}
		}

		static void OverridePasteClipboard (GLib.GType gtype)
		{
			OverridePasteClipboard (gtype, PasteClipboardVMCallback);
		}

		static void OverridePasteClipboard (GLib.GType gtype, PasteClipboardNativeDelegate callback)
		{
			GtkTextViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.PasteClipboard = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PasteClipboardNativeDelegate (IntPtr inst);

		static void PasteClipboard_cb (IntPtr inst)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnPasteClipboard ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverridePasteClipboard")]
		protected virtual void OnPasteClipboard ()
		{
			InternalPasteClipboard ();
		}

		private void InternalPasteClipboard ()
		{
			PasteClipboardNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).PasteClipboard;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static ToggleOverwriteNativeDelegate ToggleOverwrite_cb_delegate;
		static ToggleOverwriteNativeDelegate ToggleOverwriteVMCallback {
			get {
				if (ToggleOverwrite_cb_delegate == null)
					ToggleOverwrite_cb_delegate = new ToggleOverwriteNativeDelegate (ToggleOverwrite_cb);
				return ToggleOverwrite_cb_delegate;
			}
		}

		static void OverrideToggleOverwrite (GLib.GType gtype)
		{
			OverrideToggleOverwrite (gtype, ToggleOverwriteVMCallback);
		}

		static void OverrideToggleOverwrite (GLib.GType gtype, ToggleOverwriteNativeDelegate callback)
		{
			GtkTextViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.ToggleOverwrite = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggleOverwriteNativeDelegate (IntPtr inst);

		static void ToggleOverwrite_cb (IntPtr inst)
		{
			try {
				TextView __obj = GLib.Object.GetObject (inst, false) as TextView;
				__obj.OnToggleOverwrite ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextView), ConnectionMethod="OverrideToggleOverwrite")]
		protected virtual void OnToggleOverwrite ()
		{
			InternalToggleOverwrite ();
		}

		private void InternalToggleOverwrite ()
		{
			ToggleOverwriteNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ToggleOverwrite;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkTextViewClass {
			public PopulatePopupNativeDelegate PopulatePopup;
			public MoveCursorNativeDelegate MoveCursor;
			public SetAnchorNativeDelegate SetAnchor;
			public InsertAtCursorNativeDelegate InsertAtCursor;
			public DeleteFromCursorNativeDelegate DeleteFromCursor;
			public BackspaceNativeDelegate Backspace;
			public CutClipboardNativeDelegate CutClipboard;
			public CopyClipboardNativeDelegate CopyClipboard;
			public PasteClipboardNativeDelegate PasteClipboard;
			public ToggleOverwriteNativeDelegate ToggleOverwrite;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
			IntPtr GtkReserved5;
			IntPtr GtkReserved6;
			IntPtr GtkReserved7;
			IntPtr GtkReserved8;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Container)).GetClassSize ();
		static Dictionary<GLib.GType, GtkTextViewClass> class_structs;

		static GtkTextViewClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkTextViewClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkTextViewClass class_struct = (GtkTextViewClass) Marshal.PtrToStructure (class_ptr, typeof (GtkTextViewClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkTextViewClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_add_child_at_anchor(IntPtr raw, IntPtr child, IntPtr anchor);

		public void AddChildAtAnchor(Gtk.Widget child, Gtk.TextChildAnchor anchor) {
			gtk_text_view_add_child_at_anchor(Handle, child == null ? IntPtr.Zero : child.Handle, anchor == null ? IntPtr.Zero : anchor.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_add_child_in_window(IntPtr raw, IntPtr child, int which_window, int xpos, int ypos);

		public void AddChildInWindow(Gtk.Widget child, Gtk.TextWindowType which_window, int xpos, int ypos) {
			gtk_text_view_add_child_in_window(Handle, child == null ? IntPtr.Zero : child.Handle, (int) which_window, xpos, ypos);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_backward_display_line(IntPtr raw, IntPtr iter);

		public bool BackwardDisplayLine(ref Gtk.TextIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			bool raw_ret = gtk_text_view_backward_display_line(Handle, native_iter);
			bool ret = raw_ret;
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_backward_display_line_start(IntPtr raw, IntPtr iter);

		public bool BackwardDisplayLineStart(ref Gtk.TextIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			bool raw_ret = gtk_text_view_backward_display_line_start(Handle, native_iter);
			bool ret = raw_ret;
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_buffer_to_window_coords(IntPtr raw, int win, int buffer_x, int buffer_y, out int window_x, out int window_y);

		public void BufferToWindowCoords(Gtk.TextWindowType win, int buffer_x, int buffer_y, out int window_x, out int window_y) {
			gtk_text_view_buffer_to_window_coords(Handle, (int) win, buffer_x, buffer_y, out window_x, out window_y);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_forward_display_line(IntPtr raw, IntPtr iter);

		public bool ForwardDisplayLine(ref Gtk.TextIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			bool raw_ret = gtk_text_view_forward_display_line(Handle, native_iter);
			bool ret = raw_ret;
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_forward_display_line_end(IntPtr raw, IntPtr iter);

		public bool ForwardDisplayLineEnd(ref Gtk.TextIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			bool raw_ret = gtk_text_view_forward_display_line_end(Handle, native_iter);
			bool ret = raw_ret;
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_view_get_border_window_size(IntPtr raw, int type);

		public int GetBorderWindowSize(Gtk.TextWindowType type) {
			int raw_ret = gtk_text_view_get_border_window_size(Handle, (int) type);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_get_cursor_locations(IntPtr raw, IntPtr iter, IntPtr strong, IntPtr weak);

		public void GetCursorLocations(Gtk.TextIter iter, Gdk.Rectangle strong, Gdk.Rectangle weak) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			IntPtr native_strong = GLib.Marshaller.StructureToPtrAlloc (strong);
			IntPtr native_weak = GLib.Marshaller.StructureToPtrAlloc (weak);
			gtk_text_view_get_cursor_locations(Handle, native_iter, native_strong, native_weak);
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			strong = (Gdk.Rectangle) Marshal.PtrToStructure (native_strong, typeof (Gdk.Rectangle));
			Marshal.FreeHGlobal (native_strong);
			weak = (Gdk.Rectangle) Marshal.PtrToStructure (native_weak, typeof (Gdk.Rectangle));
			Marshal.FreeHGlobal (native_weak);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_view_get_default_attributes(IntPtr raw);

		public Gtk.TextAttributes DefaultAttributes { 
			get {
				IntPtr raw_ret = gtk_text_view_get_default_attributes(Handle);
				Gtk.TextAttributes ret = raw_ret == IntPtr.Zero ? null : (Gtk.TextAttributes) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TextAttributes), true);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_get_iter_at_location(IntPtr raw, IntPtr iter, int x, int y);

		public Gtk.TextIter GetIterAtLocation(int x, int y) {
			Gtk.TextIter iter;
			IntPtr native_iter = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gtk.TextIter)));
			gtk_text_view_get_iter_at_location(Handle, native_iter, x, y);
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return iter;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_get_iter_at_position(IntPtr raw, IntPtr iter, out int trailing, int x, int y);

		public int GetIterAtPosition(Gtk.TextIter iter, int x, int y) {
			int trailing;
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			gtk_text_view_get_iter_at_position(Handle, native_iter, out trailing, x, y);
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return trailing;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_get_iter_location(IntPtr raw, IntPtr iter, IntPtr location);

		public Gdk.Rectangle GetIterLocation(Gtk.TextIter iter) {
			Gdk.Rectangle location;
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			IntPtr native_location = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gdk.Rectangle)));
			gtk_text_view_get_iter_location(Handle, native_iter, native_location);
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			location = (Gdk.Rectangle) Marshal.PtrToStructure (native_location, typeof (Gdk.Rectangle));
			Marshal.FreeHGlobal (native_location);
			return location;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_get_line_at_y(IntPtr raw, IntPtr target_iter, int y, out int line_top);

		public void GetLineAtY(out Gtk.TextIter target_iter, int y, out int line_top) {
			IntPtr native_target_iter = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gtk.TextIter)));
			gtk_text_view_get_line_at_y(Handle, native_target_iter, y, out line_top);
			target_iter = Gtk.TextIter.New (native_target_iter);
			Marshal.FreeHGlobal (native_target_iter);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_get_line_yrange(IntPtr raw, IntPtr iter, out int y, out int height);

		public void GetLineYrange(Gtk.TextIter iter, out int y, out int height) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			gtk_text_view_get_line_yrange(Handle, native_iter, out y, out height);
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_view_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_text_view_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_get_visible_rect(IntPtr raw, IntPtr visible_rect);

		public Gdk.Rectangle VisibleRect { 
			get {
				Gdk.Rectangle visible_rect;
				IntPtr native_visible_rect = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gdk.Rectangle)));
				gtk_text_view_get_visible_rect(Handle, native_visible_rect);
				visible_rect = (Gdk.Rectangle) Marshal.PtrToStructure (native_visible_rect, typeof (Gdk.Rectangle));
				Marshal.FreeHGlobal (native_visible_rect);
				return visible_rect;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_view_get_window(IntPtr raw, int win);

		public Gdk.Window GetWindow(Gtk.TextWindowType win) {
			IntPtr raw_ret = gtk_text_view_get_window(Handle, (int) win);
			Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_view_get_window_type(IntPtr raw, IntPtr window);

		public Gtk.TextWindowType GetWindowType(Gdk.Window window) {
			int raw_ret = gtk_text_view_get_window_type(Handle, window == null ? IntPtr.Zero : window.Handle);
			Gtk.TextWindowType ret = (Gtk.TextWindowType) raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_im_context_filter_keypress(IntPtr raw, IntPtr evnt);

		public bool ImContextFilterKeypress(Gdk.EventKey evnt) {
			bool raw_ret = gtk_text_view_im_context_filter_keypress(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_move_child(IntPtr raw, IntPtr child, int xpos, int ypos);

		public void MoveChild(Gtk.Widget child, int xpos, int ypos) {
			gtk_text_view_move_child(Handle, child == null ? IntPtr.Zero : child.Handle, xpos, ypos);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_move_mark_onscreen(IntPtr raw, IntPtr mark);

		public bool MoveMarkOnscreen(Gtk.TextMark mark) {
			bool raw_ret = gtk_text_view_move_mark_onscreen(Handle, mark == null ? IntPtr.Zero : mark.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_move_visually(IntPtr raw, IntPtr iter, int count);

		public bool MoveVisually(ref Gtk.TextIter iter, int count) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			bool raw_ret = gtk_text_view_move_visually(Handle, native_iter, count);
			bool ret = raw_ret;
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_place_cursor_onscreen(IntPtr raw);

		public bool PlaceCursorOnscreen() {
			bool raw_ret = gtk_text_view_place_cursor_onscreen(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_reset_im_context(IntPtr raw);

		public void ResetImContext() {
			gtk_text_view_reset_im_context(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_scroll_mark_onscreen(IntPtr raw, IntPtr mark);

		public void ScrollMarkOnscreen(Gtk.TextMark mark) {
			gtk_text_view_scroll_mark_onscreen(Handle, mark == null ? IntPtr.Zero : mark.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_scroll_to_iter(IntPtr raw, IntPtr iter, double within_margin, bool use_align, double xalign, double yalign);

		public bool ScrollToIter(Gtk.TextIter iter, double within_margin, bool use_align, double xalign, double yalign) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			bool raw_ret = gtk_text_view_scroll_to_iter(Handle, native_iter, within_margin, use_align, xalign, yalign);
			bool ret = raw_ret;
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_scroll_to_mark(IntPtr raw, IntPtr mark, double within_margin, bool use_align, double xalign, double yalign);

		public void ScrollToMark(Gtk.TextMark mark, double within_margin, bool use_align, double xalign, double yalign) {
			gtk_text_view_scroll_to_mark(Handle, mark == null ? IntPtr.Zero : mark.Handle, within_margin, use_align, xalign, yalign);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_set_border_window_size(IntPtr raw, int type, int size);

		public void SetBorderWindowSize(Gtk.TextWindowType type, int size) {
			gtk_text_view_set_border_window_size(Handle, (int) type, size);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_view_starts_display_line(IntPtr raw, IntPtr iter);

		public bool StartsDisplayLine(Gtk.TextIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			bool raw_ret = gtk_text_view_starts_display_line(Handle, native_iter);
			bool ret = raw_ret;
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_view_window_to_buffer_coords(IntPtr raw, int win, int window_x, int window_y, out int buffer_x, out int buffer_y);

		public void WindowToBufferCoords(Gtk.TextWindowType win, int window_x, int window_y, out int buffer_x, out int buffer_y) {
			gtk_text_view_window_to_buffer_coords(Handle, (int) win, window_x, window_y, out buffer_x, out buffer_y);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrollable_get_hadjustment(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrollable_set_hadjustment(IntPtr raw, IntPtr hadjustment);

		[GLib.Property ("hadjustment")]
		public Gtk.Adjustment Hadjustment {
			get  {
				IntPtr raw_ret = gtk_scrollable_get_hadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				gtk_scrollable_set_hadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrollable_get_vadjustment(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrollable_set_vadjustment(IntPtr raw, IntPtr vadjustment);

		[GLib.Property ("vadjustment")]
		public Gtk.Adjustment Vadjustment {
			get  {
				IntPtr raw_ret = gtk_scrollable_get_vadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				gtk_scrollable_set_vadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scrollable_get_hscroll_policy(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrollable_set_hscroll_policy(IntPtr raw, int policy);

		[GLib.Property ("hscroll-policy")]
		public Gtk.ScrollablePolicy HscrollPolicy {
			get  {
				int raw_ret = gtk_scrollable_get_hscroll_policy(Handle);
				Gtk.ScrollablePolicy ret = (Gtk.ScrollablePolicy) raw_ret;
				return ret;
			}
			set  {
				gtk_scrollable_set_hscroll_policy(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scrollable_get_vscroll_policy(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrollable_set_vscroll_policy(IntPtr raw, int policy);

		[GLib.Property ("vscroll-policy")]
		public Gtk.ScrollablePolicy VscrollPolicy {
			get  {
				int raw_ret = gtk_scrollable_get_vscroll_policy(Handle);
				Gtk.ScrollablePolicy ret = (Gtk.ScrollablePolicy) raw_ret;
				return ret;
			}
			set  {
				gtk_scrollable_set_vscroll_policy(Handle, (int) value);
			}
		}

#endregion
	}
}
