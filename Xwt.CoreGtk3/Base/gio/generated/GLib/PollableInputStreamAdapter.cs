// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class PollableInputStreamAdapter : GLib.GInterfaceAdapter, GLib.IPollableInputStream {

		[StructLayout (LayoutKind.Sequential)]
		struct GPollableInputStreamInterface {
			public CanPollNativeDelegate CanPoll;
			public IsReadableNativeDelegate IsReadable;
			public CreateSourceNativeDelegate CreateSource;
			public ReadNonblockingNativeDelegate ReadNonblocking;
		}

		static GPollableInputStreamInterface iface;

		static PollableInputStreamAdapter ()
		{
			GLib.GType.Register (_gtype, typeof (PollableInputStreamAdapter));
			iface.CanPoll = new CanPollNativeDelegate (CanPoll_cb);
			iface.IsReadable = new IsReadableNativeDelegate (IsReadable_cb);
			iface.CreateSource = new CreateSourceNativeDelegate (CreateSource_cb);
			iface.ReadNonblocking = new ReadNonblockingNativeDelegate (ReadNonblocking_cb);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool CanPollNativeDelegate (IntPtr inst);

		static bool CanPoll_cb (IntPtr inst)
		{
			try {
				IPollableInputStreamImplementor __obj = GLib.Object.GetObject (inst, false) as IPollableInputStreamImplementor;
				bool __result;
				__result = __obj.CanPoll ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool IsReadableNativeDelegate (IntPtr inst);

		static bool IsReadable_cb (IntPtr inst)
		{
			try {
				IPollableInputStreamImplementor __obj = GLib.Object.GetObject (inst, false) as IPollableInputStreamImplementor;
				bool __result;
				__result = __obj.IsReadable;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr CreateSourceNativeDelegate (IntPtr inst, IntPtr cancellable);

		static IntPtr CreateSource_cb (IntPtr inst, IntPtr cancellable)
		{
			try {
				IPollableInputStreamImplementor __obj = GLib.Object.GetObject (inst, false) as IPollableInputStreamImplementor;
				GLib.Source __result;
				__result = __obj.CreateSource (GLib.Object.GetObject(cancellable) as GLib.Cancellable);
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr ReadNonblockingNativeDelegate (IntPtr inst, IntPtr buffer, UIntPtr size, out IntPtr error);

		static IntPtr ReadNonblocking_cb (IntPtr inst, IntPtr buffer, UIntPtr size, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				IPollableInputStreamImplementor __obj = GLib.Object.GetObject (inst, false) as IPollableInputStreamImplementor;
				long __result;
				__result = __obj.ReadNonblocking (buffer, (ulong) size);
				return new IntPtr (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		static int class_offset = 2 * IntPtr.Size;

		static void Initialize (IntPtr ptr, IntPtr data)
		{
			IntPtr ifaceptr = new IntPtr (ptr.ToInt64 () + class_offset);
			GPollableInputStreamInterface native_iface = (GPollableInputStreamInterface) Marshal.PtrToStructure (ifaceptr, typeof (GPollableInputStreamInterface));
			native_iface.CanPoll = iface.CanPoll;
			native_iface.IsReadable = iface.IsReadable;
			native_iface.CreateSource = iface.CreateSource;
			native_iface.ReadNonblocking = iface.ReadNonblocking;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
		}

		GLib.Object implementor;

		public PollableInputStreamAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public PollableInputStreamAdapter (IPollableInputStreamImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			else if (!(implementor is GLib.Object))
				throw new ArgumentException ("implementor must be a subclass of GLib.Object");
			this.implementor = implementor as GLib.Object;
		}

		public PollableInputStreamAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = GLib.Object.GetObject (handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_pollable_input_stream_get_type();

		private static GLib.GType _gtype = new GLib.GType (g_pollable_input_stream_get_type ());

		public static GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override GLib.GType GInterfaceGType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static IPollableInputStream GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static IPollableInputStream GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is IPollableInputStreamImplementor)
				return new PollableInputStreamAdapter (obj as IPollableInputStreamImplementor);
			else if (obj as IPollableInputStream == null)
				return new PollableInputStreamAdapter (obj.Handle);
			else
				return obj as IPollableInputStream;
		}

		public IPollableInputStreamImplementor Implementor {
			get {
				return implementor as IPollableInputStreamImplementor;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_pollable_input_stream_can_poll(IntPtr raw);

		public bool CanPoll() {
			bool raw_ret = g_pollable_input_stream_can_poll(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_pollable_input_stream_create_source(IntPtr raw, IntPtr cancellable);

		public GLib.Source CreateSource(GLib.Cancellable cancellable) {
			IntPtr raw_ret = g_pollable_input_stream_create_source(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle);
			GLib.Source ret = new GLib.Source(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_pollable_input_stream_is_readable(IntPtr raw);

		public bool IsReadable { 
			get {
				bool raw_ret = g_pollable_input_stream_is_readable(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_pollable_input_stream_read_nonblocking(IntPtr raw, IntPtr buffer, UIntPtr size, IntPtr cancellable, out IntPtr error);

		public long ReadNonblocking(IntPtr buffer, ulong size, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_pollable_input_stream_read_nonblocking(Handle, buffer, new UIntPtr (size), cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			long ret = (long) raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
