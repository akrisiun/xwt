// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class WindowGroup : GLib.Object {

		public WindowGroup (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_group_new();

		public WindowGroup () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (WindowGroup)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_window_group_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkWindowGroupClass {
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkWindowGroupClass> class_structs;

		static GtkWindowGroupClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkWindowGroupClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkWindowGroupClass class_struct = (GtkWindowGroupClass) Marshal.PtrToStructure (class_ptr, typeof (GtkWindowGroupClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkWindowGroupClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_group_add_window(IntPtr raw, IntPtr window);

		public void AddWindow(Gtk.Window window) {
			gtk_window_group_add_window(Handle, window == null ? IntPtr.Zero : window.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_group_get_current_device_grab(IntPtr raw, IntPtr device);

		public Gtk.Widget GetCurrentDeviceGrab(Gdk.Device device) {
			IntPtr raw_ret = gtk_window_group_get_current_device_grab(Handle, device == null ? IntPtr.Zero : device.Handle);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_group_get_current_grab(IntPtr raw);

		public Gtk.Widget CurrentGrab { 
			get {
				IntPtr raw_ret = gtk_window_group_get_current_grab(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_group_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_window_group_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_group_list_windows(IntPtr raw);

		public Gtk.Window[] ListWindows() {
			IntPtr raw_ret = gtk_window_group_list_windows(Handle);
			Gtk.Window[] ret = (Gtk.Window[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, false, typeof(Gtk.Window));
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_group_remove_window(IntPtr raw, IntPtr window);

		public void RemoveWindow(Gtk.Window window) {
			gtk_window_group_remove_window(Handle, window == null ? IntPtr.Zero : window.Handle);
		}

#endregion
	}
}
