// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ColorSelectionDialog : Gtk.Dialog {

		public ColorSelectionDialog (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_color_selection_dialog_new(IntPtr title);

		public ColorSelectionDialog (string title) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ColorSelectionDialog)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("title");
				vals.Add (new GLib.Value (title));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_title = GLib.Marshaller.StringToPtrGStrdup (title);
			Raw = gtk_color_selection_dialog_new(native_title);
			GLib.Marshaller.Free (native_title);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_color_selection_dialog_get_color_selection(IntPtr raw);

		[GLib.Property ("color-selection")]
		public Gtk.ColorSelection ColorSelection {
			get  {
				IntPtr raw_ret = gtk_color_selection_dialog_get_color_selection(Handle);
				Gtk.ColorSelection ret = GLib.Object.GetObject(raw_ret) as Gtk.ColorSelection;
				return ret;
			}
		}

		[GLib.Property ("ok-button")]
		public Gtk.Button OkButton {
			get {
				GLib.Value val = GetProperty ("ok-button");
				Gtk.Button ret = (Gtk.Button) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("cancel-button")]
		public Gtk.Button CancelButton {
			get {
				GLib.Value val = GetProperty ("cancel-button");
				Gtk.Button ret = (Gtk.Button) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("help-button")]
		public Gtk.Button HelpButton {
			get {
				GLib.Value val = GetProperty ("help-button");
				Gtk.Button ret = (Gtk.Button) val;
				val.Dispose ();
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkColorSelectionDialogClass {
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Dialog)).GetClassSize ();
		static Dictionary<GLib.GType, GtkColorSelectionDialogClass> class_structs;

		static GtkColorSelectionDialogClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkColorSelectionDialogClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkColorSelectionDialogClass class_struct = (GtkColorSelectionDialogClass) Marshal.PtrToStructure (class_ptr, typeof (GtkColorSelectionDialogClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkColorSelectionDialogClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_color_selection_dialog_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_color_selection_dialog_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
