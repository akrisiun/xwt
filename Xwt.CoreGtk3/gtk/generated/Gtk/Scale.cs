// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Scale : Gtk.Range {

		public Scale (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scale_new(int orientation, IntPtr adjustment);

		public Scale (Gtk.Orientation orientation, Gtk.Adjustment adjustment) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Scale)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = gtk_scale_new((int) orientation, adjustment == null ? IntPtr.Zero : adjustment.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scale_new_with_range(int orientation, double min, double max, double step);

		public Scale (Gtk.Orientation orientation, double min, double max, double step) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Scale)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = gtk_scale_new_with_range((int) orientation, min, max, step);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scale_get_digits(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scale_set_digits(IntPtr raw, int digits);

		[GLib.Property ("digits")]
		public int Digits {
			get  {
				int raw_ret = gtk_scale_get_digits(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_scale_set_digits(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_scale_get_draw_value(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scale_set_draw_value(IntPtr raw, bool draw_value);

		[GLib.Property ("draw-value")]
		public bool DrawValue {
			get  {
				bool raw_ret = gtk_scale_get_draw_value(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_scale_set_draw_value(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scale_get_value_pos(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scale_set_value_pos(IntPtr raw, int pos);

		[GLib.Property ("value-pos")]
		public Gtk.PositionType ValuePos {
			get  {
				int raw_ret = gtk_scale_get_value_pos(Handle);
				Gtk.PositionType ret = (Gtk.PositionType) raw_ret;
				return ret;
			}
			set  {
				gtk_scale_set_value_pos(Handle, (int) value);
			}
		}

		[GLib.Signal("format-value")]
		public event Gtk.FormatValueHandler FormatValue {
			add {
				this.AddSignalHandler ("format-value", value, typeof (Gtk.FormatValueArgs));
			}
			remove {
				this.RemoveSignalHandler ("format-value", value);
			}
		}

		static FormatValueNativeDelegate FormatValue_cb_delegate;
		static FormatValueNativeDelegate FormatValueVMCallback {
			get {
				if (FormatValue_cb_delegate == null)
					FormatValue_cb_delegate = new FormatValueNativeDelegate (FormatValue_cb);
				return FormatValue_cb_delegate;
			}
		}

		static void OverrideFormatValue (GLib.GType gtype)
		{
			OverrideFormatValue (gtype, FormatValueVMCallback);
		}

		static void OverrideFormatValue (GLib.GType gtype, FormatValueNativeDelegate callback)
		{
			GtkScaleClass class_iface = GetClassStruct (gtype, false);
			class_iface.FormatValue = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr FormatValueNativeDelegate (IntPtr inst, double value);

		static IntPtr FormatValue_cb (IntPtr inst, double value)
		{
			try {
				Scale __obj = GLib.Object.GetObject (inst, false) as Scale;
				string __result;
				__result = __obj.OnFormatValue (value);
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Scale), ConnectionMethod="OverrideFormatValue")]
		protected virtual string OnFormatValue (double value)
		{
			return InternalFormatValue (value);
		}

		private string InternalFormatValue (double value)
		{
			FormatValueNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).FormatValue;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle, value);
			return GLib.Marshaller.PtrToStringGFree(__result);
		}

		static DrawValueNativeDelegate DrawValue_cb_delegate;
		static DrawValueNativeDelegate DrawValueVMCallback {
			get {
				if (DrawValue_cb_delegate == null)
					DrawValue_cb_delegate = new DrawValueNativeDelegate (DrawValue_cb);
				return DrawValue_cb_delegate;
			}
		}

		static void OverrideDrawValue (GLib.GType gtype)
		{
			OverrideDrawValue (gtype, DrawValueVMCallback);
		}

		static void OverrideDrawValue (GLib.GType gtype, DrawValueNativeDelegate callback)
		{
			GtkScaleClass class_iface = GetClassStruct (gtype, false);
			class_iface.DrawValue = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DrawValueNativeDelegate (IntPtr inst);

		static void DrawValue_cb (IntPtr inst)
		{
			try {
				Scale __obj = GLib.Object.GetObject (inst, false) as Scale;
				__obj.OnDrawValue ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Scale), ConnectionMethod="OverrideDrawValue")]
		protected virtual void OnDrawValue ()
		{
			InternalDrawValue ();
		}

		private void InternalDrawValue ()
		{
			DrawValueNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).DrawValue;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static GetLayoutOffsetsNativeDelegate GetLayoutOffsets_cb_delegate;
		static GetLayoutOffsetsNativeDelegate GetLayoutOffsetsVMCallback {
			get {
				if (GetLayoutOffsets_cb_delegate == null)
					GetLayoutOffsets_cb_delegate = new GetLayoutOffsetsNativeDelegate (GetLayoutOffsets_cb);
				return GetLayoutOffsets_cb_delegate;
			}
		}

		static void OverrideGetLayoutOffsets (GLib.GType gtype)
		{
			OverrideGetLayoutOffsets (gtype, GetLayoutOffsetsVMCallback);
		}

		static void OverrideGetLayoutOffsets (GLib.GType gtype, GetLayoutOffsetsNativeDelegate callback)
		{
			GtkScaleClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetLayoutOffsets = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetLayoutOffsetsNativeDelegate (IntPtr inst, out int x, out int y);

		static void GetLayoutOffsets_cb (IntPtr inst, out int x, out int y)
		{
			try {
				Scale __obj = GLib.Object.GetObject (inst, false) as Scale;
				__obj.OnGetLayoutOffsets (out x, out y);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Scale), ConnectionMethod="OverrideGetLayoutOffsets")]
		protected virtual void OnGetLayoutOffsets (out int x, out int y)
		{
			InternalGetLayoutOffsets (out x, out y);
		}

		private void InternalGetLayoutOffsets (out int x, out int y)
		{
			GetLayoutOffsetsNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetLayoutOffsets;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			unmanaged (this.Handle, out x, out y);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkScaleClass {
			public FormatValueNativeDelegate FormatValue;
			public DrawValueNativeDelegate DrawValue;
			public GetLayoutOffsetsNativeDelegate GetLayoutOffsets;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Range)).GetClassSize ();
		static Dictionary<GLib.GType, GtkScaleClass> class_structs;

		static GtkScaleClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkScaleClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkScaleClass class_struct = (GtkScaleClass) Marshal.PtrToStructure (class_ptr, typeof (GtkScaleClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkScaleClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scale_add_mark(IntPtr raw, double value, int position, IntPtr markup);

		public void AddMark(double value, Gtk.PositionType position, string markup) {
			IntPtr native_markup = GLib.Marshaller.StringToPtrGStrdup (markup);
			gtk_scale_add_mark(Handle, value, (int) position, native_markup);
			GLib.Marshaller.Free (native_markup);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scale_clear_marks(IntPtr raw);

		public void ClearMarks() {
			gtk_scale_clear_marks(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scale_get_layout(IntPtr raw);

		public Pango.Layout Layout { 
			get {
				IntPtr raw_ret = gtk_scale_get_layout(Handle);
				Pango.Layout ret = GLib.Object.GetObject(raw_ret) as Pango.Layout;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scale_get_layout_offsets(IntPtr raw, out int x, out int y);

		public void GetLayoutOffsets(out int x, out int y) {
			gtk_scale_get_layout_offsets(Handle, out x, out y);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scale_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_scale_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
