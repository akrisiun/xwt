// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DBusNodeInfo : GLib.Opaque {

		[DllImport ("giosharpglue-3")]
		extern static uint glibsharp_glib_dbusnodeinfo_get_ref_count_offset ();

		static uint ref_count_offset = glibsharp_glib_dbusnodeinfo_get_ref_count_offset ();
		public int RefCount {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + ref_count_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + ref_count_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("giosharpglue-3")]
		extern static uint glibsharp_glib_dbusnodeinfo_get_path_offset ();

		static uint path_offset = glibsharp_glib_dbusnodeinfo_get_path_offset ();
		public string Path {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + path_offset);
					return GLib.Marshaller.Utf8PtrToString ((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + path_offset);
					*raw_ptr = GLib.Marshaller.StringToPtrGStrdup (value);
				}
			}
		}

		[DllImport ("giosharpglue-3")]
		extern static uint glibsharp_glib_dbusnodeinfo_get_interfaces_offset ();

		static uint interfaces_offset = glibsharp_glib_dbusnodeinfo_get_interfaces_offset ();
		public GLib.DBusInterfaceInfo Interfaces {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + interfaces_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (GLib.DBusInterfaceInfo) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (GLib.DBusInterfaceInfo), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + interfaces_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("giosharpglue-3")]
		extern static uint glibsharp_glib_dbusnodeinfo_get_nodes_offset ();

		static uint nodes_offset = glibsharp_glib_dbusnodeinfo_get_nodes_offset ();
		public GLib.DBusNodeInfo Nodes {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + nodes_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (GLib.DBusNodeInfo) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (GLib.DBusNodeInfo), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + nodes_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("giosharpglue-3")]
		extern static uint glibsharp_glib_dbusnodeinfo_get_annotations_offset ();

		static uint annotations_offset = glibsharp_glib_dbusnodeinfo_get_annotations_offset ();
		public GLib.DBusAnnotationInfo Annotations {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + annotations_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (GLib.DBusAnnotationInfo) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (GLib.DBusAnnotationInfo), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + annotations_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_node_info_generate_xml(IntPtr raw, uint indent, IntPtr string_builder);

		public void GenerateXml(uint indent, string string_builder) {
			g_dbus_node_info_generate_xml(Handle, indent, new GLib.GString (string_builder).Handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_node_info_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = g_dbus_node_info_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_node_info_lookup_interface(IntPtr raw, IntPtr name);

		public GLib.DBusInterfaceInfo LookupInterface(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = g_dbus_node_info_lookup_interface(Handle, native_name);
			GLib.DBusInterfaceInfo ret = raw_ret == IntPtr.Zero ? null : (GLib.DBusInterfaceInfo) GLib.Opaque.GetOpaque (raw_ret, typeof (GLib.DBusInterfaceInfo), false);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		public DBusNodeInfo(IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_dbus_node_info_new_for_xml(IntPtr xml_data, out IntPtr error);

		public unsafe DBusNodeInfo (string xml_data) 
		{
			IntPtr native_xml_data = GLib.Marshaller.StringToPtrGStrdup (xml_data);
			IntPtr error = IntPtr.Zero;
			Raw = g_dbus_node_info_new_for_xml(native_xml_data, out error);
			GLib.Marshaller.Free (native_xml_data);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_dbus_node_info_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				g_dbus_node_info_ref (raw);
				Owned = true;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_dbus_node_info_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				g_dbus_node_info_unref (raw);
				Owned = false;
			}
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				g_dbus_node_info_unref (handle);
				return false;
			}
		}

		~DBusNodeInfo ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
