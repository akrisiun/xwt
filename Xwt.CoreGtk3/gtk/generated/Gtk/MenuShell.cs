// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class MenuShell : Gtk.Container {

		public MenuShell (IntPtr raw) : base(raw) {}

		protected MenuShell() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_menu_shell_get_take_focus(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_set_take_focus(IntPtr raw, bool take_focus);

		[GLib.Property ("take-focus")]
		public bool TakeFocus {
			get  {
				bool raw_ret = gtk_menu_shell_get_take_focus(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_menu_shell_set_take_focus(Handle, value);
			}
		}

		[GLib.Signal("deactivate")]
		public event System.EventHandler Deactivated {
			add {
				this.AddSignalHandler ("deactivate", value);
			}
			remove {
				this.RemoveSignalHandler ("deactivate", value);
			}
		}

		[GLib.Signal("cycle-focus")]
		public event Gtk.CycleFocusHandler CycleFocus {
			add {
				this.AddSignalHandler ("cycle-focus", value, typeof (Gtk.CycleFocusArgs));
			}
			remove {
				this.RemoveSignalHandler ("cycle-focus", value);
			}
		}

		[GLib.Signal("move-selected")]
		public event Gtk.MoveSelectedHandler MoveSelected {
			add {
				this.AddSignalHandler ("move-selected", value, typeof (Gtk.MoveSelectedArgs));
			}
			remove {
				this.RemoveSignalHandler ("move-selected", value);
			}
		}

		[GLib.Signal("cancel")]
		public event System.EventHandler Canceled {
			add {
				this.AddSignalHandler ("cancel", value);
			}
			remove {
				this.RemoveSignalHandler ("cancel", value);
			}
		}

		[GLib.Signal("move-current")]
		public event Gtk.MoveCurrentHandler MoveCurrent {
			add {
				this.AddSignalHandler ("move-current", value, typeof (Gtk.MoveCurrentArgs));
			}
			remove {
				this.RemoveSignalHandler ("move-current", value);
			}
		}

		[GLib.Signal("activate-current")]
		public event Gtk.ActivateCurrentHandler ActivateCurrent {
			add {
				this.AddSignalHandler ("activate-current", value, typeof (Gtk.ActivateCurrentArgs));
			}
			remove {
				this.RemoveSignalHandler ("activate-current", value);
			}
		}

		[GLib.Signal("selection-done")]
		public event System.EventHandler SelectionDone {
			add {
				this.AddSignalHandler ("selection-done", value);
			}
			remove {
				this.RemoveSignalHandler ("selection-done", value);
			}
		}

		static CycleFocusNativeDelegate CycleFocus_cb_delegate;
		static CycleFocusNativeDelegate CycleFocusVMCallback {
			get {
				if (CycleFocus_cb_delegate == null)
					CycleFocus_cb_delegate = new CycleFocusNativeDelegate (CycleFocus_cb);
				return CycleFocus_cb_delegate;
			}
		}

		static void OverrideCycleFocus (GLib.GType gtype)
		{
			OverrideCycleFocus (gtype, CycleFocusVMCallback);
		}

		static void OverrideCycleFocus (GLib.GType gtype, CycleFocusNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "cycle-focus", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CycleFocusNativeDelegate (IntPtr inst, int p0);

		static void CycleFocus_cb (IntPtr inst, int p0)
		{
			try {
				MenuShell __obj = GLib.Object.GetObject (inst, false) as MenuShell;
				__obj.OnCycleFocus ((Gtk.DirectionType) p0);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideCycleFocus")]
		protected virtual void OnCycleFocus (Gtk.DirectionType p0)
		{
			InternalCycleFocus (p0);
		}

		private void InternalCycleFocus (Gtk.DirectionType p0)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (p0);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_override_deactivate (IntPtr class_struct, DeactivatedNativeDelegate cb);

		static DeactivatedNativeDelegate Deactivated_cb_delegate;
		static DeactivatedNativeDelegate DeactivatedVMCallback {
			get {
				if (Deactivated_cb_delegate == null)
					Deactivated_cb_delegate = new DeactivatedNativeDelegate (Deactivated_cb);
				return Deactivated_cb_delegate;
			}
		}

		static void OverrideDeactivated (GLib.GType gtype)
		{
			OverrideDeactivated (gtype, DeactivatedVMCallback);
		}

		static void OverrideDeactivated (GLib.GType gtype, DeactivatedNativeDelegate callback)
		{
			gtksharp_menushell_override_deactivate (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DeactivatedNativeDelegate (IntPtr inst);

		static void Deactivated_cb (IntPtr inst)
		{
			try {
				MenuShell __obj = GLib.Object.GetObject (inst, false) as MenuShell;
				__obj.OnDeactivated ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_invoke_deactivate (IntPtr class_struct, IntPtr inst);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideDeactivated")]
		protected virtual void OnDeactivated ()
		{
			InternalDeactivated ();
		}

		private void InternalDeactivated ()
		{
			gtksharp_menushell_invoke_deactivate (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle);
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_override_selection_done (IntPtr class_struct, SelectionDoneNativeDelegate cb);

		static SelectionDoneNativeDelegate SelectionDone_cb_delegate;
		static SelectionDoneNativeDelegate SelectionDoneVMCallback {
			get {
				if (SelectionDone_cb_delegate == null)
					SelectionDone_cb_delegate = new SelectionDoneNativeDelegate (SelectionDone_cb);
				return SelectionDone_cb_delegate;
			}
		}

		static void OverrideSelectionDone (GLib.GType gtype)
		{
			OverrideSelectionDone (gtype, SelectionDoneVMCallback);
		}

		static void OverrideSelectionDone (GLib.GType gtype, SelectionDoneNativeDelegate callback)
		{
			gtksharp_menushell_override_selection_done (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectionDoneNativeDelegate (IntPtr inst);

		static void SelectionDone_cb (IntPtr inst)
		{
			try {
				MenuShell __obj = GLib.Object.GetObject (inst, false) as MenuShell;
				__obj.OnSelectionDone ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_invoke_selection_done (IntPtr class_struct, IntPtr inst);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideSelectionDone")]
		protected virtual void OnSelectionDone ()
		{
			InternalSelectionDone ();
		}

		private void InternalSelectionDone ()
		{
			gtksharp_menushell_invoke_selection_done (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle);
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_override_move_current (IntPtr class_struct, MoveCurrentNativeDelegate cb);

		static MoveCurrentNativeDelegate MoveCurrent_cb_delegate;
		static MoveCurrentNativeDelegate MoveCurrentVMCallback {
			get {
				if (MoveCurrent_cb_delegate == null)
					MoveCurrent_cb_delegate = new MoveCurrentNativeDelegate (MoveCurrent_cb);
				return MoveCurrent_cb_delegate;
			}
		}

		static void OverrideMoveCurrent (GLib.GType gtype)
		{
			OverrideMoveCurrent (gtype, MoveCurrentVMCallback);
		}

		static void OverrideMoveCurrent (GLib.GType gtype, MoveCurrentNativeDelegate callback)
		{
			gtksharp_menushell_override_move_current (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveCurrentNativeDelegate (IntPtr inst, int direction);

		static void MoveCurrent_cb (IntPtr inst, int direction)
		{
			try {
				MenuShell __obj = GLib.Object.GetObject (inst, false) as MenuShell;
				__obj.OnMoveCurrent ((Gtk.MenuDirectionType) direction);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_invoke_move_current (IntPtr class_struct, IntPtr inst, int direction);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideMoveCurrent")]
		protected virtual void OnMoveCurrent (Gtk.MenuDirectionType direction)
		{
			InternalMoveCurrent (direction);
		}

		private void InternalMoveCurrent (Gtk.MenuDirectionType direction)
		{
			gtksharp_menushell_invoke_move_current (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, (int) direction);
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_override_activate_current (IntPtr class_struct, ActivateCurrentNativeDelegate cb);

		static ActivateCurrentNativeDelegate ActivateCurrent_cb_delegate;
		static ActivateCurrentNativeDelegate ActivateCurrentVMCallback {
			get {
				if (ActivateCurrent_cb_delegate == null)
					ActivateCurrent_cb_delegate = new ActivateCurrentNativeDelegate (ActivateCurrent_cb);
				return ActivateCurrent_cb_delegate;
			}
		}

		static void OverrideActivateCurrent (GLib.GType gtype)
		{
			OverrideActivateCurrent (gtype, ActivateCurrentVMCallback);
		}

		static void OverrideActivateCurrent (GLib.GType gtype, ActivateCurrentNativeDelegate callback)
		{
			gtksharp_menushell_override_activate_current (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActivateCurrentNativeDelegate (IntPtr inst, bool force_hide);

		static void ActivateCurrent_cb (IntPtr inst, bool force_hide)
		{
			try {
				MenuShell __obj = GLib.Object.GetObject (inst, false) as MenuShell;
				__obj.OnActivateCurrent (force_hide);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_invoke_activate_current (IntPtr class_struct, IntPtr inst, bool force_hide);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideActivateCurrent")]
		protected virtual void OnActivateCurrent (bool force_hide)
		{
			InternalActivateCurrent (force_hide);
		}

		private void InternalActivateCurrent (bool force_hide)
		{
			gtksharp_menushell_invoke_activate_current (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, force_hide);
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_override_cancel (IntPtr class_struct, CanceledNativeDelegate cb);

		static CanceledNativeDelegate Canceled_cb_delegate;
		static CanceledNativeDelegate CanceledVMCallback {
			get {
				if (Canceled_cb_delegate == null)
					Canceled_cb_delegate = new CanceledNativeDelegate (Canceled_cb);
				return Canceled_cb_delegate;
			}
		}

		static void OverrideCanceled (GLib.GType gtype)
		{
			OverrideCanceled (gtype, CanceledVMCallback);
		}

		static void OverrideCanceled (GLib.GType gtype, CanceledNativeDelegate callback)
		{
			gtksharp_menushell_override_cancel (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CanceledNativeDelegate (IntPtr inst);

		static void Canceled_cb (IntPtr inst)
		{
			try {
				MenuShell __obj = GLib.Object.GetObject (inst, false) as MenuShell;
				__obj.OnCanceled ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_invoke_cancel (IntPtr class_struct, IntPtr inst);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideCanceled")]
		protected virtual void OnCanceled ()
		{
			InternalCanceled ();
		}

		private void InternalCanceled ()
		{
			gtksharp_menushell_invoke_cancel (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle);
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_override_select_item (IntPtr class_struct, SelectItemNativeDelegate cb);

		static SelectItemNativeDelegate SelectItem_cb_delegate;
		static SelectItemNativeDelegate SelectItemVMCallback {
			get {
				if (SelectItem_cb_delegate == null)
					SelectItem_cb_delegate = new SelectItemNativeDelegate (SelectItem_cb);
				return SelectItem_cb_delegate;
			}
		}

		static void OverrideSelectItem (GLib.GType gtype)
		{
			OverrideSelectItem (gtype, SelectItemVMCallback);
		}

		static void OverrideSelectItem (GLib.GType gtype, SelectItemNativeDelegate callback)
		{
			gtksharp_menushell_override_select_item (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectItemNativeDelegate (IntPtr inst, IntPtr menu_item);

		static void SelectItem_cb (IntPtr inst, IntPtr menu_item)
		{
			try {
				MenuShell __obj = GLib.Object.GetObject (inst, false) as MenuShell;
				__obj.OnSelectItem (GLib.Object.GetObject(menu_item) as Gtk.Widget);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_invoke_select_item (IntPtr class_struct, IntPtr inst, IntPtr menu_item);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideSelectItem")]
		protected virtual void OnSelectItem (Gtk.Widget menu_item)
		{
			InternalSelectItem (menu_item);
		}

		private void InternalSelectItem (Gtk.Widget menu_item)
		{
			gtksharp_menushell_invoke_select_item (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, menu_item == null ? IntPtr.Zero : menu_item.Handle);
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_override_insert (IntPtr class_struct, InsertNativeDelegate cb);

		static InsertNativeDelegate Insert_cb_delegate;
		static InsertNativeDelegate InsertVMCallback {
			get {
				if (Insert_cb_delegate == null)
					Insert_cb_delegate = new InsertNativeDelegate (Insert_cb);
				return Insert_cb_delegate;
			}
		}

		static void OverrideInsert (GLib.GType gtype)
		{
			OverrideInsert (gtype, InsertVMCallback);
		}

		static void OverrideInsert (GLib.GType gtype, InsertNativeDelegate callback)
		{
			gtksharp_menushell_override_insert (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void InsertNativeDelegate (IntPtr inst, IntPtr child, int position);

		static void Insert_cb (IntPtr inst, IntPtr child, int position)
		{
			try {
				MenuShell __obj = GLib.Object.GetObject (inst, false) as MenuShell;
				__obj.OnInsert (GLib.Object.GetObject(child) as Gtk.Widget, position);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_invoke_insert (IntPtr class_struct, IntPtr inst, IntPtr child, int position);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideInsert")]
		protected virtual void OnInsert (Gtk.Widget child, int position)
		{
			InternalInsert (child, position);
		}

		private void InternalInsert (Gtk.Widget child, int position)
		{
			gtksharp_menushell_invoke_insert (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, child == null ? IntPtr.Zero : child.Handle, position);
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_override_get_popup_delay (IntPtr class_struct, GetPopupDelayNativeDelegate cb);

		static GetPopupDelayNativeDelegate GetPopupDelay_cb_delegate;
		static GetPopupDelayNativeDelegate GetPopupDelayVMCallback {
			get {
				if (GetPopupDelay_cb_delegate == null)
					GetPopupDelay_cb_delegate = new GetPopupDelayNativeDelegate (GetPopupDelay_cb);
				return GetPopupDelay_cb_delegate;
			}
		}

		static void OverrideGetPopupDelay (GLib.GType gtype)
		{
			OverrideGetPopupDelay (gtype, GetPopupDelayVMCallback);
		}

		static void OverrideGetPopupDelay (GLib.GType gtype, GetPopupDelayNativeDelegate callback)
		{
			gtksharp_menushell_override_get_popup_delay (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetPopupDelayNativeDelegate (IntPtr inst);

		static int GetPopupDelay_cb (IntPtr inst)
		{
			try {
				MenuShell __obj = GLib.Object.GetObject (inst, false) as MenuShell;
				int __result;
				__result = __obj.OnGetPopupDelay ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[DllImport ("gtksharpglue-3")]
		static extern int gtksharp_menushell_invoke_get_popup_delay (IntPtr class_struct, IntPtr inst);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideGetPopupDelay")]
		protected virtual int OnGetPopupDelay ()
		{
			return InternalGetPopupDelay ();
		}

		private int InternalGetPopupDelay ()
		{
			int __result = gtksharp_menushell_invoke_get_popup_delay (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle);
			return __result;
		}

		[DllImport ("gtksharpglue-3")]
		static extern void gtksharp_menushell_override_move_selected (IntPtr class_struct, MoveSelectedNativeDelegate cb);

		static MoveSelectedNativeDelegate MoveSelected_cb_delegate;
		static MoveSelectedNativeDelegate MoveSelectedVMCallback {
			get {
				if (MoveSelected_cb_delegate == null)
					MoveSelected_cb_delegate = new MoveSelectedNativeDelegate (MoveSelected_cb);
				return MoveSelected_cb_delegate;
			}
		}

		static void OverrideMoveSelected (GLib.GType gtype)
		{
			OverrideMoveSelected (gtype, MoveSelectedVMCallback);
		}

		static void OverrideMoveSelected (GLib.GType gtype, MoveSelectedNativeDelegate callback)
		{
			gtksharp_menushell_override_move_selected (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool MoveSelectedNativeDelegate (IntPtr inst, int distance);

		static bool MoveSelected_cb (IntPtr inst, int distance)
		{
			try {
				MenuShell __obj = GLib.Object.GetObject (inst, false) as MenuShell;
				bool __result;
				__result = __obj.OnMoveSelected (distance);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[DllImport ("gtksharpglue-3")]
		static extern bool gtksharp_menushell_invoke_move_selected (IntPtr class_struct, IntPtr inst, int distance);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideMoveSelected")]
		protected virtual bool OnMoveSelected (int distance)
		{
			return InternalMoveSelected (distance);
		}

		private bool InternalMoveSelected (int distance)
		{
			bool __result = gtksharp_menushell_invoke_move_selected (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, distance);
			return __result;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_activate_item(IntPtr raw, IntPtr menu_item, bool force_deactivate);

		public void ActivateItem(Gtk.Widget menu_item, bool force_deactivate) {
			gtk_menu_shell_activate_item(Handle, menu_item == null ? IntPtr.Zero : menu_item.Handle, force_deactivate);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_append(IntPtr raw, IntPtr child);

		public void Append(Gtk.Widget child) {
			gtk_menu_shell_append(Handle, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_cancel(IntPtr raw);

		public void Cancel() {
			gtk_menu_shell_cancel(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_deactivate(IntPtr raw);

		public void Deactivate() {
			gtk_menu_shell_deactivate(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_deselect(IntPtr raw);

		public void Deselect() {
			gtk_menu_shell_deselect(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_shell_get_parent_shell(IntPtr raw);

		public Gtk.Widget ParentShell { 
			get {
				IntPtr raw_ret = gtk_menu_shell_get_parent_shell(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_shell_get_selected_item(IntPtr raw);

		public Gtk.Widget SelectedItem { 
			get {
				IntPtr raw_ret = gtk_menu_shell_get_selected_item(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_shell_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_menu_shell_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_insert(IntPtr raw, IntPtr child, int position);

		public void Insert(Gtk.Widget child, int position) {
			gtk_menu_shell_insert(Handle, child == null ? IntPtr.Zero : child.Handle, position);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_prepend(IntPtr raw, IntPtr child);

		public void Prepend(Gtk.Widget child) {
			gtk_menu_shell_prepend(Handle, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_select_first(IntPtr raw, bool search_sensitive);

		public void SelectFirst(bool search_sensitive) {
			gtk_menu_shell_select_first(Handle, search_sensitive);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_select_item(IntPtr raw, IntPtr menu_item);

		public void SelectItem(Gtk.Widget menu_item) {
			gtk_menu_shell_select_item(Handle, menu_item == null ? IntPtr.Zero : menu_item.Handle);
		}

#endregion
	}
}
