// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TrayIcon : Gtk.Plug {

		public TrayIcon (IntPtr raw) : base(raw) {}

		protected TrayIcon() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("orientation")]
		public Gtk.Orientation Orientation {
			get {
				GLib.Value val = GetProperty ("orientation");
				Gtk.Orientation ret = (Gtk.Orientation) (Enum) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("fg-color")]
		public Gdk.Color FgColor {
			get {
				GLib.Value val = GetProperty ("fg-color");
				Gdk.Color ret = (Gdk.Color) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("error-color")]
		public Gdk.Color ErrorColor {
			get {
				GLib.Value val = GetProperty ("error-color");
				Gdk.Color ret = (Gdk.Color) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("warning-color")]
		public Gdk.Color WarningColor {
			get {
				GLib.Value val = GetProperty ("warning-color");
				Gdk.Color ret = (Gdk.Color) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("success-color")]
		public Gdk.Color SuccessColor {
			get {
				GLib.Value val = GetProperty ("success-color");
				Gdk.Color ret = (Gdk.Color) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("padding")]
		public int Padding {
			get {
				GLib.Value val = GetProperty ("padding");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkTrayIconClass {
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Plug)).GetClassSize ();
		static Dictionary<GLib.GType, GtkTrayIconClass> class_structs;

		static GtkTrayIconClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkTrayIconClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkTrayIconClass class_struct = (GtkTrayIconClass) Marshal.PtrToStructure (class_ptr, typeof (GtkTrayIconClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkTrayIconClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tray_icon_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_tray_icon_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
