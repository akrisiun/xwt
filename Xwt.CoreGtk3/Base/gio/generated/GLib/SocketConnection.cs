// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SocketConnection : GLib.IOStream {

		public SocketConnection (IntPtr raw) : base(raw) {}

		protected SocketConnection() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_socket_connection_get_socket(IntPtr raw);

		[GLib.Property ("socket")]
		public GLib.Socket Socket {
			get  {
				IntPtr raw_ret = g_socket_connection_get_socket(Handle);
				GLib.Socket ret = GLib.Object.GetObject(raw_ret) as GLib.Socket;
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GSocketConnectionClass {
			IntPtr GReserved1;
			IntPtr GReserved2;
			IntPtr GReserved3;
			IntPtr GReserved4;
			IntPtr GReserved5;
			IntPtr GReserved6;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.IOStream)).GetClassSize ();
		static Dictionary<GLib.GType, GSocketConnectionClass> class_structs;

		static GSocketConnectionClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GSocketConnectionClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GSocketConnectionClass class_struct = (GSocketConnectionClass) Marshal.PtrToStructure (class_ptr, typeof (GSocketConnectionClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GSocketConnectionClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_socket_connection_factory_create_connection(IntPtr socket);

		public static GLib.SocketConnection FactoryCreateConnection(GLib.Socket socket) {
			IntPtr raw_ret = g_socket_connection_factory_create_connection(socket == null ? IntPtr.Zero : socket.Handle);
			GLib.SocketConnection ret = GLib.Object.GetObject(raw_ret) as GLib.SocketConnection;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_socket_connection_factory_lookup_type(int family, int type, int protocol_id);

		public static GLib.GType FactoryLookupType(GLib.SocketFamily family, GLib.SocketType type, int protocol_id) {
			IntPtr raw_ret = g_socket_connection_factory_lookup_type((int) family, (int) type, protocol_id);
			GLib.GType ret = new GLib.GType(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_socket_connection_factory_register_type(IntPtr g_type, int family, int type, int protocol);

		public static void FactoryRegisterType(GLib.GType g_type, GLib.SocketFamily family, GLib.SocketType type, int protocol) {
			g_socket_connection_factory_register_type(g_type.Val, (int) family, (int) type, protocol);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_connection_get_local_address(IntPtr raw, out IntPtr error);

		public unsafe GLib.SocketAddress GetLocalAddress() {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_connection_get_local_address(Handle, out error);
			GLib.SocketAddress ret = GLib.Object.GetObject(raw_ret) as GLib.SocketAddress;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_socket_connection_get_remote_address(IntPtr raw, out IntPtr error);

		public unsafe GLib.SocketAddress GetRemoteAddress() {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_socket_connection_get_remote_address(Handle, out error);
			GLib.SocketAddress ret = GLib.Object.GetObject(raw_ret) as GLib.SocketAddress;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_socket_connection_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_socket_connection_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
