// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Arrow : Gtk.Misc {

		public Arrow (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_arrow_new(int arrow_type, int shadow_type);

		public Arrow (Gtk.ArrowType arrow_type, Gtk.ShadowType shadow_type) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Arrow)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("arrow_type");
				vals.Add (new GLib.Value (arrow_type));
				names.Add ("shadow_type");
				vals.Add (new GLib.Value (shadow_type));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_arrow_new((int) arrow_type, (int) shadow_type);
		}

		[GLib.Property ("arrow-type")]
		public Gtk.ArrowType ArrowType {
			get {
				GLib.Value val = GetProperty ("arrow-type");
				Gtk.ArrowType ret = (Gtk.ArrowType) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("arrow-type", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("shadow-type")]
		public Gtk.ShadowType ShadowType {
			get {
				GLib.Value val = GetProperty ("shadow-type");
				Gtk.ShadowType ret = (Gtk.ShadowType) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("shadow-type", val);
				val.Dispose ();
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkArrowClass {
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Misc)).GetClassSize ();
		static Dictionary<GLib.GType, GtkArrowClass> class_structs;

		static GtkArrowClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkArrowClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkArrowClass class_struct = (GtkArrowClass) Marshal.PtrToStructure (class_ptr, typeof (GtkArrowClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkArrowClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_arrow_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_arrow_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
