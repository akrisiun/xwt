// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DBusInterfaceVTable : IEquatable<DBusInterfaceVTable> {

		private GLibSharp.DBusInterfaceMethodCallFuncNative method_call;
		public GLib.DBusInterfaceMethodCallFunc MethodCall {
			get {
				return GLibSharp.DBusInterfaceMethodCallFuncWrapper.GetManagedDelegate (method_call);
			}
		}
		private GLibSharp.DBusInterfaceGetPropertyFuncNative get_property;
		public GLib.DBusInterfaceGetPropertyFunc GetProperty {
			get {
				return GLibSharp.DBusInterfaceGetPropertyFuncWrapper.GetManagedDelegate (get_property);
			}
		}
		private GLibSharp.DBusInterfaceSetPropertyFuncNative set_property;
		public GLib.DBusInterfaceSetPropertyFunc SetProperty {
			get {
				return GLibSharp.DBusInterfaceSetPropertyFuncWrapper.GetManagedDelegate (set_property);
			}
		}
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=8)]
		private IntPtr[] Padding;

		public static GLib.DBusInterfaceVTable Zero = new GLib.DBusInterfaceVTable ();

		public static GLib.DBusInterfaceVTable New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return GLib.DBusInterfaceVTable.Zero;
			return (GLib.DBusInterfaceVTable) Marshal.PtrToStructure (raw, typeof (GLib.DBusInterfaceVTable));
		}

		public bool Equals (DBusInterfaceVTable other)
		{
			return true && MethodCall.Equals (other.MethodCall) && GetProperty.Equals (other.GetProperty) && SetProperty.Equals (other.SetProperty);
		}

		public override bool Equals (object other)
		{
			return other is DBusInterfaceVTable && Equals ((DBusInterfaceVTable) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ MethodCall.GetHashCode () ^ GetProperty.GetHashCode () ^ SetProperty.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
