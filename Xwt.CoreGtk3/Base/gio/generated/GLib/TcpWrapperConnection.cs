// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TcpWrapperConnection : GLib.TcpConnection {

		public TcpWrapperConnection (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_tcp_wrapper_connection_new(IntPtr base_io_stream, IntPtr socket);

		public TcpWrapperConnection (GLib.IOStream base_io_stream, GLib.Socket socket) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TcpWrapperConnection)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (base_io_stream != null) {
					names.Add ("base_io_stream");
					vals.Add (new GLib.Value (base_io_stream));
				}
				if (socket != null) {
					names.Add ("socket");
					vals.Add (new GLib.Value (socket));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = g_tcp_wrapper_connection_new(base_io_stream == null ? IntPtr.Zero : base_io_stream.Handle, socket == null ? IntPtr.Zero : socket.Handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_tcp_wrapper_connection_get_base_io_stream(IntPtr raw);

		[GLib.Property ("base-io-stream")]
		public GLib.IOStream BaseIoStream {
			get  {
				IntPtr raw_ret = g_tcp_wrapper_connection_get_base_io_stream(Handle);
				GLib.IOStream ret = GLib.Object.GetObject(raw_ret) as GLib.IOStream;
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GTcpWrapperConnectionClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.TcpConnection)).GetClassSize ();
		static Dictionary<GLib.GType, GTcpWrapperConnectionClass> class_structs;

		static GTcpWrapperConnectionClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GTcpWrapperConnectionClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GTcpWrapperConnectionClass class_struct = (GTcpWrapperConnectionClass) Marshal.PtrToStructure (class_ptr, typeof (GTcpWrapperConnectionClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GTcpWrapperConnectionClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_tcp_wrapper_connection_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_tcp_wrapper_connection_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
