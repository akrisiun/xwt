// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class NoOpObject : Atk.Object, Atk.IComponent, Atk.IAction, Atk.IEditableText, Atk.IImage, Atk.ISelection, Atk.ITable, Atk.IText, Atk.IHypertext, Atk.IValue, Atk.IDocument {

		public NoOpObject (IntPtr raw) : base(raw) {}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_no_op_object_new(IntPtr obj);

		public NoOpObject (GLib.Object obj) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (NoOpObject)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = atk_no_op_object_new(obj == null ? IntPtr.Zero : obj.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct AtkNoOpObjectClass {
		}

		static uint class_offset = ((GLib.GType) typeof (Atk.Object)).GetClassSize ();
		static Dictionary<GLib.GType, AtkNoOpObjectClass> class_structs;

		static AtkNoOpObjectClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, AtkNoOpObjectClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				AtkNoOpObjectClass class_struct = (AtkNoOpObjectClass) Marshal.PtrToStructure (class_ptr, typeof (AtkNoOpObjectClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, AtkNoOpObjectClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_no_op_object_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = atk_no_op_object_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint atk_component_add_focus_handler(IntPtr raw, AtkSharp.FocusHandlerNative handler);

		public uint AddFocusHandler(Atk.FocusHandler handler) {
			AtkSharp.FocusHandlerWrapper handler_wrapper = new AtkSharp.FocusHandlerWrapper (handler);
			uint raw_ret = atk_component_add_focus_handler(Handle, handler_wrapper.NativeDelegate);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_contains(IntPtr raw, int x, int y, int coord_type);

		public bool Contains(int x, int y, Atk.CoordType coord_type) {
			bool raw_ret = atk_component_contains(Handle, x, y, (int) coord_type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double atk_component_get_alpha(IntPtr raw);

		public double Alpha { 
			get {
				double raw_ret = atk_component_get_alpha(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_component_get_extents(IntPtr raw, out int x, out int y, out int width, out int height, int coord_type);

		public void GetExtents(out int x, out int y, out int width, out int height, Atk.CoordType coord_type) {
			atk_component_get_extents(Handle, out x, out y, out width, out height, (int) coord_type);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_component_get_layer(IntPtr raw);

		public new Atk.Layer Layer { 
			get {
				int raw_ret = atk_component_get_layer(Handle);
				Atk.Layer ret = (Atk.Layer) raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_component_get_mdi_zorder(IntPtr raw);

		public new int MdiZorder { 
			get {
				int raw_ret = atk_component_get_mdi_zorder(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_component_get_position(IntPtr raw, out int x, out int y, int coord_type);

		public void GetPosition(out int x, out int y, Atk.CoordType coord_type) {
			atk_component_get_position(Handle, out x, out y, (int) coord_type);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_component_get_size(IntPtr raw, out int width, out int height);

		public void GetSize(out int width, out int height) {
			atk_component_get_size(Handle, out width, out height);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_grab_focus(IntPtr raw);

		public bool GrabFocus() {
			bool raw_ret = atk_component_grab_focus(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_component_ref_accessible_at_point(IntPtr raw, int x, int y, int coord_type);

		public Atk.Object RefAccessibleAtPoint(int x, int y, Atk.CoordType coord_type) {
			IntPtr raw_ret = atk_component_ref_accessible_at_point(Handle, x, y, (int) coord_type);
			Atk.Object ret = GLib.Object.GetObject(raw_ret, true) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_component_remove_focus_handler(IntPtr raw, uint handler_id);

		public void RemoveFocusHandler(uint handler_id) {
			atk_component_remove_focus_handler(Handle, handler_id);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_set_extents(IntPtr raw, int x, int y, int width, int height, int coord_type);

		public bool SetExtents(int x, int y, int width, int height, Atk.CoordType coord_type) {
			bool raw_ret = atk_component_set_extents(Handle, x, y, width, height, (int) coord_type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_set_position(IntPtr raw, int x, int y, int coord_type);

		public bool SetPosition(int x, int y, Atk.CoordType coord_type) {
			bool raw_ret = atk_component_set_position(Handle, x, y, (int) coord_type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_set_size(IntPtr raw, int width, int height);

		public bool SetSize(int width, int height) {
			bool raw_ret = atk_component_set_size(Handle, width, height);
			bool ret = raw_ret;
			return ret;
		}

		[GLib.Signal("bounds_changed")]
		public event Atk.BoundsChangedHandler BoundsChanged {
			add {
				this.AddSignalHandler ("bounds_changed", value, typeof (Atk.BoundsChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("bounds_changed", value);
			}
		}

		static BoundsChangedNativeDelegate BoundsChanged_cb_delegate;
		static BoundsChangedNativeDelegate BoundsChangedVMCallback {
			get {
				if (BoundsChanged_cb_delegate == null)
					BoundsChanged_cb_delegate = new BoundsChangedNativeDelegate (BoundsChanged_cb);
				return BoundsChanged_cb_delegate;
			}
		}

		static void OverrideBoundsChanged (GLib.GType gtype)
		{
			OverrideBoundsChanged (gtype, BoundsChangedVMCallback);
		}

		static void OverrideBoundsChanged (GLib.GType gtype, BoundsChangedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "bounds_changed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void BoundsChangedNativeDelegate (IntPtr inst, IntPtr bounds);

		static void BoundsChanged_cb (IntPtr inst, IntPtr bounds)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnBoundsChanged (Atk.Rectangle.New (bounds));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideBoundsChanged")]
		protected virtual void OnBoundsChanged (Atk.Rectangle bounds)
		{
			InternalBoundsChanged (bounds);
		}

		private void InternalBoundsChanged (Atk.Rectangle bounds)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (bounds);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_action_do_action(IntPtr raw, int i);

		public bool DoAction(int i) {
			bool raw_ret = atk_action_do_action(Handle, i);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_action_get_description(IntPtr raw, int i);

		public string GetDescription(int i) {
			IntPtr raw_ret = atk_action_get_description(Handle, i);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_action_get_keybinding(IntPtr raw, int i);

		public string GetKeybinding(int i) {
			IntPtr raw_ret = atk_action_get_keybinding(Handle, i);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_action_get_localized_name(IntPtr raw, int i);

		public string GetLocalizedName(int i) {
			IntPtr raw_ret = atk_action_get_localized_name(Handle, i);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_action_get_n_actions(IntPtr raw);

		public int NActions { 
			get {
				int raw_ret = atk_action_get_n_actions(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_action_get_name(IntPtr raw, int i);

		public string GetName(int i) {
			IntPtr raw_ret = atk_action_get_name(Handle, i);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_action_set_description(IntPtr raw, int i, IntPtr desc);

		public bool SetDescription(int i, string desc) {
			IntPtr native_desc = GLib.Marshaller.StringToPtrGStrdup (desc);
			bool raw_ret = atk_action_set_description(Handle, i, native_desc);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_desc);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_copy_text(IntPtr raw, int start_pos, int end_pos);

		public void CopyText(int start_pos, int end_pos) {
			atk_editable_text_copy_text(Handle, start_pos, end_pos);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_cut_text(IntPtr raw, int start_pos, int end_pos);

		public void CutText(int start_pos, int end_pos) {
			atk_editable_text_cut_text(Handle, start_pos, end_pos);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_delete_text(IntPtr raw, int start_pos, int end_pos);

		public void DeleteText(int start_pos, int end_pos) {
			atk_editable_text_delete_text(Handle, start_pos, end_pos);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_insert_text(IntPtr raw, IntPtr str1ng, int length, ref int position);

		public void InsertText(string str1ng, ref int position) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			atk_editable_text_insert_text(Handle, native_str1ng, System.Text.Encoding.UTF8.GetByteCount (str1ng), ref position);
			GLib.Marshaller.Free (native_str1ng);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_paste_text(IntPtr raw, int position);

		public void PasteText(int position) {
			atk_editable_text_paste_text(Handle, position);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_editable_text_set_run_attributes(IntPtr raw, IntPtr attrib_set, int start_offset, int end_offset);

		public bool SetRunAttributes(GLib.SList attrib_set, int start_offset, int end_offset) {
			bool raw_ret = atk_editable_text_set_run_attributes(Handle, attrib_set == null ? IntPtr.Zero : attrib_set.Handle, start_offset, end_offset);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_set_text_contents(IntPtr raw, IntPtr str1ng);

		public string TextContents { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				atk_editable_text_set_text_contents(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_image_get_image_description(IntPtr raw);

		public string ImageDescription { 
			get {
				IntPtr raw_ret = atk_image_get_image_description(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_image_get_image_locale(IntPtr raw);

		public string ImageLocale { 
			get {
				IntPtr raw_ret = atk_image_get_image_locale(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_image_get_image_position(IntPtr raw, out int x, out int y, int coord_type);

		public void GetImagePosition(out int x, out int y, Atk.CoordType coord_type) {
			atk_image_get_image_position(Handle, out x, out y, (int) coord_type);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_image_get_image_size(IntPtr raw, out int width, out int height);

		public void GetImageSize(out int width, out int height) {
			atk_image_get_image_size(Handle, out width, out height);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_image_set_image_description(IntPtr raw, IntPtr description);

		public bool SetImageDescription(string description) {
			IntPtr native_description = GLib.Marshaller.StringToPtrGStrdup (description);
			bool raw_ret = atk_image_set_image_description(Handle, native_description);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_description);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_selection_add_selection(IntPtr raw, int i);

		public bool AddSelection(int i) {
			bool raw_ret = atk_selection_add_selection(Handle, i);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_selection_clear_selection(IntPtr raw);

		public bool ClearSelection() {
			bool raw_ret = atk_selection_clear_selection(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_selection_get_selection_count(IntPtr raw);

		public int SelectionCount { 
			get {
				int raw_ret = atk_selection_get_selection_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_selection_is_child_selected(IntPtr raw, int i);

		public bool IsChildSelected(int i) {
			bool raw_ret = atk_selection_is_child_selected(Handle, i);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_selection_ref_selection(IntPtr raw, int i);

		public Atk.Object RefSelection(int i) {
			IntPtr raw_ret = atk_selection_ref_selection(Handle, i);
			Atk.Object ret = GLib.Object.GetObject(raw_ret, true) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_selection_remove_selection(IntPtr raw, int i);

		bool Atk.ISelection.RemoveSelection(int i) {
			bool raw_ret = atk_selection_remove_selection(Handle, i);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_selection_select_all_selection(IntPtr raw);

		public bool SelectAllSelection() {
			bool raw_ret = atk_selection_select_all_selection(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[GLib.Signal("selection_changed")]
		public event System.EventHandler SelectionChanged {
			add {
				this.AddSignalHandler ("selection_changed", value);
			}
			remove {
				this.RemoveSignalHandler ("selection_changed", value);
			}
		}

		static SelectionChangedNativeDelegate SelectionChanged_cb_delegate;
		static SelectionChangedNativeDelegate SelectionChangedVMCallback {
			get {
				if (SelectionChanged_cb_delegate == null)
					SelectionChanged_cb_delegate = new SelectionChangedNativeDelegate (SelectionChanged_cb);
				return SelectionChanged_cb_delegate;
			}
		}

		static void OverrideSelectionChanged (GLib.GType gtype)
		{
			OverrideSelectionChanged (gtype, SelectionChangedVMCallback);
		}

		static void OverrideSelectionChanged (GLib.GType gtype, SelectionChangedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "selection_changed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectionChangedNativeDelegate (IntPtr inst);

		static void SelectionChanged_cb (IntPtr inst)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnSelectionChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideSelectionChanged")]
		protected virtual void OnSelectionChanged ()
		{
			InternalSelectionChanged ();
		}

		private void InternalSelectionChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_table_add_column_selection(IntPtr raw, int column);

		public bool AddColumnSelection(int column) {
			bool raw_ret = atk_table_add_column_selection(Handle, column);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_table_add_row_selection(IntPtr raw, int row);

		public bool AddRowSelection(int row) {
			bool raw_ret = atk_table_add_row_selection(Handle, row);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_table_get_caption(IntPtr raw);

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_table_set_caption(IntPtr raw, IntPtr caption);

		public Atk.Object Caption { 
			get {
				IntPtr raw_ret = atk_table_get_caption(Handle);
				Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
				return ret;
			}
			set {
				atk_table_set_caption(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_table_get_column_at_index(IntPtr raw, int index_);

		public int GetColumnAtIndex(int index_) {
			int raw_ret = atk_table_get_column_at_index(Handle, index_);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_table_get_column_description(IntPtr raw, int column);

		public string GetColumnDescription(int column) {
			IntPtr raw_ret = atk_table_get_column_description(Handle, column);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_table_get_column_extent_at(IntPtr raw, int row, int column);

		public int GetColumnExtentAt(int row, int column) {
			int raw_ret = atk_table_get_column_extent_at(Handle, row, column);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_table_get_column_header(IntPtr raw, int column);

		public Atk.Object GetColumnHeader(int column) {
			IntPtr raw_ret = atk_table_get_column_header(Handle, column);
			Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_table_get_index_at(IntPtr raw, int row, int column);

		public int GetIndexAt(int row, int column) {
			int raw_ret = atk_table_get_index_at(Handle, row, column);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_table_get_n_columns(IntPtr raw);

		public int NColumns { 
			get {
				int raw_ret = atk_table_get_n_columns(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_table_get_n_rows(IntPtr raw);

		public int NRows { 
			get {
				int raw_ret = atk_table_get_n_rows(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_table_get_row_at_index(IntPtr raw, int index_);

		public int GetRowAtIndex(int index_) {
			int raw_ret = atk_table_get_row_at_index(Handle, index_);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_table_get_row_description(IntPtr raw, int row);

		public string GetRowDescription(int row) {
			IntPtr raw_ret = atk_table_get_row_description(Handle, row);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_table_get_row_extent_at(IntPtr raw, int row, int column);

		public int GetRowExtentAt(int row, int column) {
			int raw_ret = atk_table_get_row_extent_at(Handle, row, column);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_table_get_row_header(IntPtr raw, int row);

		public Atk.Object GetRowHeader(int row) {
			IntPtr raw_ret = atk_table_get_row_header(Handle, row);
			Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_table_get_selected_columns(IntPtr raw, out int selected);

		public int GetSelectedColumns(out int selected) {
			int raw_ret = atk_table_get_selected_columns(Handle, out selected);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_table_get_selected_rows(IntPtr raw, out int selected);

		public int GetSelectedRows(out int selected) {
			int raw_ret = atk_table_get_selected_rows(Handle, out selected);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_table_get_summary(IntPtr raw);

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_table_set_summary(IntPtr raw, IntPtr accessible);

		public Atk.Object Summary { 
			get {
				IntPtr raw_ret = atk_table_get_summary(Handle);
				Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
				return ret;
			}
			set {
				atk_table_set_summary(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_table_is_column_selected(IntPtr raw, int column);

		public bool IsColumnSelected(int column) {
			bool raw_ret = atk_table_is_column_selected(Handle, column);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_table_is_row_selected(IntPtr raw, int row);

		public bool IsRowSelected(int row) {
			bool raw_ret = atk_table_is_row_selected(Handle, row);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_table_is_selected(IntPtr raw, int row, int column);

		public bool IsSelected(int row, int column) {
			bool raw_ret = atk_table_is_selected(Handle, row, column);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_table_ref_at(IntPtr raw, int row, int column);

		public Atk.Object RefAt(int row, int column) {
			IntPtr raw_ret = atk_table_ref_at(Handle, row, column);
			Atk.Object ret = GLib.Object.GetObject(raw_ret, true) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_table_remove_column_selection(IntPtr raw, int column);

		public bool RemoveColumnSelection(int column) {
			bool raw_ret = atk_table_remove_column_selection(Handle, column);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_table_remove_row_selection(IntPtr raw, int row);

		public bool RemoveRowSelection(int row) {
			bool raw_ret = atk_table_remove_row_selection(Handle, row);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_table_set_column_description(IntPtr raw, int column, IntPtr description);

		public void SetColumnDescription(int column, string description) {
			IntPtr native_description = GLib.Marshaller.StringToPtrGStrdup (description);
			atk_table_set_column_description(Handle, column, native_description);
			GLib.Marshaller.Free (native_description);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_table_set_column_header(IntPtr raw, int column, IntPtr header);

		public void SetColumnHeader(int column, Atk.Object header) {
			atk_table_set_column_header(Handle, column, header == null ? IntPtr.Zero : header.Handle);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_table_set_row_description(IntPtr raw, int row, IntPtr description);

		public void SetRowDescription(int row, string description) {
			IntPtr native_description = GLib.Marshaller.StringToPtrGStrdup (description);
			atk_table_set_row_description(Handle, row, native_description);
			GLib.Marshaller.Free (native_description);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_table_set_row_header(IntPtr raw, int row, IntPtr header);

		public void SetRowHeader(int row, Atk.Object header) {
			atk_table_set_row_header(Handle, row, header == null ? IntPtr.Zero : header.Handle);
		}

		[GLib.Signal("column_reordered")]
		public event System.EventHandler ColumnReordered {
			add {
				this.AddSignalHandler ("column_reordered", value);
			}
			remove {
				this.RemoveSignalHandler ("column_reordered", value);
			}
		}

		[GLib.Signal("row_inserted")]
		public event Atk.RowInsertedHandler RowInserted {
			add {
				this.AddSignalHandler ("row_inserted", value, typeof (Atk.RowInsertedArgs));
			}
			remove {
				this.RemoveSignalHandler ("row_inserted", value);
			}
		}

		[GLib.Signal("row_deleted")]
		public event Atk.RowDeletedHandler RowDeleted {
			add {
				this.AddSignalHandler ("row_deleted", value, typeof (Atk.RowDeletedArgs));
			}
			remove {
				this.RemoveSignalHandler ("row_deleted", value);
			}
		}

		[GLib.Signal("row_reordered")]
		public event System.EventHandler RowReordered {
			add {
				this.AddSignalHandler ("row_reordered", value);
			}
			remove {
				this.RemoveSignalHandler ("row_reordered", value);
			}
		}

		[GLib.Signal("model_changed")]
		public event System.EventHandler ModelChanged {
			add {
				this.AddSignalHandler ("model_changed", value);
			}
			remove {
				this.RemoveSignalHandler ("model_changed", value);
			}
		}

		[GLib.Signal("column_inserted")]
		public event Atk.ColumnInsertedHandler ColumnInserted {
			add {
				this.AddSignalHandler ("column_inserted", value, typeof (Atk.ColumnInsertedArgs));
			}
			remove {
				this.RemoveSignalHandler ("column_inserted", value);
			}
		}

		[GLib.Signal("column_deleted")]
		public event Atk.ColumnDeletedHandler ColumnDeleted {
			add {
				this.AddSignalHandler ("column_deleted", value, typeof (Atk.ColumnDeletedArgs));
			}
			remove {
				this.RemoveSignalHandler ("column_deleted", value);
			}
		}

		static RowInsertedNativeDelegate RowInserted_cb_delegate;
		static RowInsertedNativeDelegate RowInsertedVMCallback {
			get {
				if (RowInserted_cb_delegate == null)
					RowInserted_cb_delegate = new RowInsertedNativeDelegate (RowInserted_cb);
				return RowInserted_cb_delegate;
			}
		}

		static void OverrideRowInserted (GLib.GType gtype)
		{
			OverrideRowInserted (gtype, RowInsertedVMCallback);
		}

		static void OverrideRowInserted (GLib.GType gtype, RowInsertedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "row_inserted", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RowInsertedNativeDelegate (IntPtr inst, int row, int num_inserted);

		static void RowInserted_cb (IntPtr inst, int row, int num_inserted)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnRowInserted (row, num_inserted);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideRowInserted")]
		protected virtual void OnRowInserted (int row, int num_inserted)
		{
			InternalRowInserted (row, num_inserted);
		}

		private void InternalRowInserted (int row, int num_inserted)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (row);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (num_inserted);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static ColumnInsertedNativeDelegate ColumnInserted_cb_delegate;
		static ColumnInsertedNativeDelegate ColumnInsertedVMCallback {
			get {
				if (ColumnInserted_cb_delegate == null)
					ColumnInserted_cb_delegate = new ColumnInsertedNativeDelegate (ColumnInserted_cb);
				return ColumnInserted_cb_delegate;
			}
		}

		static void OverrideColumnInserted (GLib.GType gtype)
		{
			OverrideColumnInserted (gtype, ColumnInsertedVMCallback);
		}

		static void OverrideColumnInserted (GLib.GType gtype, ColumnInsertedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "column_inserted", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ColumnInsertedNativeDelegate (IntPtr inst, int column, int num_inserted);

		static void ColumnInserted_cb (IntPtr inst, int column, int num_inserted)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnColumnInserted (column, num_inserted);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideColumnInserted")]
		protected virtual void OnColumnInserted (int column, int num_inserted)
		{
			InternalColumnInserted (column, num_inserted);
		}

		private void InternalColumnInserted (int column, int num_inserted)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (column);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (num_inserted);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static RowDeletedNativeDelegate RowDeleted_cb_delegate;
		static RowDeletedNativeDelegate RowDeletedVMCallback {
			get {
				if (RowDeleted_cb_delegate == null)
					RowDeleted_cb_delegate = new RowDeletedNativeDelegate (RowDeleted_cb);
				return RowDeleted_cb_delegate;
			}
		}

		static void OverrideRowDeleted (GLib.GType gtype)
		{
			OverrideRowDeleted (gtype, RowDeletedVMCallback);
		}

		static void OverrideRowDeleted (GLib.GType gtype, RowDeletedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "row_deleted", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RowDeletedNativeDelegate (IntPtr inst, int row, int num_deleted);

		static void RowDeleted_cb (IntPtr inst, int row, int num_deleted)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnRowDeleted (row, num_deleted);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideRowDeleted")]
		protected virtual void OnRowDeleted (int row, int num_deleted)
		{
			InternalRowDeleted (row, num_deleted);
		}

		private void InternalRowDeleted (int row, int num_deleted)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (row);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (num_deleted);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static ColumnDeletedNativeDelegate ColumnDeleted_cb_delegate;
		static ColumnDeletedNativeDelegate ColumnDeletedVMCallback {
			get {
				if (ColumnDeleted_cb_delegate == null)
					ColumnDeleted_cb_delegate = new ColumnDeletedNativeDelegate (ColumnDeleted_cb);
				return ColumnDeleted_cb_delegate;
			}
		}

		static void OverrideColumnDeleted (GLib.GType gtype)
		{
			OverrideColumnDeleted (gtype, ColumnDeletedVMCallback);
		}

		static void OverrideColumnDeleted (GLib.GType gtype, ColumnDeletedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "column_deleted", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ColumnDeletedNativeDelegate (IntPtr inst, int column, int num_deleted);

		static void ColumnDeleted_cb (IntPtr inst, int column, int num_deleted)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnColumnDeleted (column, num_deleted);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideColumnDeleted")]
		protected virtual void OnColumnDeleted (int column, int num_deleted)
		{
			InternalColumnDeleted (column, num_deleted);
		}

		private void InternalColumnDeleted (int column, int num_deleted)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (column);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (num_deleted);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static RowReorderedNativeDelegate RowReordered_cb_delegate;
		static RowReorderedNativeDelegate RowReorderedVMCallback {
			get {
				if (RowReordered_cb_delegate == null)
					RowReordered_cb_delegate = new RowReorderedNativeDelegate (RowReordered_cb);
				return RowReordered_cb_delegate;
			}
		}

		static void OverrideRowReordered (GLib.GType gtype)
		{
			OverrideRowReordered (gtype, RowReorderedVMCallback);
		}

		static void OverrideRowReordered (GLib.GType gtype, RowReorderedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "row_reordered", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RowReorderedNativeDelegate (IntPtr inst);

		static void RowReordered_cb (IntPtr inst)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnRowReordered ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideRowReordered")]
		protected virtual void OnRowReordered ()
		{
			InternalRowReordered ();
		}

		private void InternalRowReordered ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static ColumnReorderedNativeDelegate ColumnReordered_cb_delegate;
		static ColumnReorderedNativeDelegate ColumnReorderedVMCallback {
			get {
				if (ColumnReordered_cb_delegate == null)
					ColumnReordered_cb_delegate = new ColumnReorderedNativeDelegate (ColumnReordered_cb);
				return ColumnReordered_cb_delegate;
			}
		}

		static void OverrideColumnReordered (GLib.GType gtype)
		{
			OverrideColumnReordered (gtype, ColumnReorderedVMCallback);
		}

		static void OverrideColumnReordered (GLib.GType gtype, ColumnReorderedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "column_reordered", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ColumnReorderedNativeDelegate (IntPtr inst);

		static void ColumnReordered_cb (IntPtr inst)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnColumnReordered ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideColumnReordered")]
		protected virtual void OnColumnReordered ()
		{
			InternalColumnReordered ();
		}

		private void InternalColumnReordered ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static ModelChangedNativeDelegate ModelChanged_cb_delegate;
		static ModelChangedNativeDelegate ModelChangedVMCallback {
			get {
				if (ModelChanged_cb_delegate == null)
					ModelChanged_cb_delegate = new ModelChangedNativeDelegate (ModelChanged_cb);
				return ModelChanged_cb_delegate;
			}
		}

		static void OverrideModelChanged (GLib.GType gtype)
		{
			OverrideModelChanged (gtype, ModelChangedVMCallback);
		}

		static void OverrideModelChanged (GLib.GType gtype, ModelChangedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "model_changed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ModelChangedNativeDelegate (IntPtr inst);

		static void ModelChanged_cb (IntPtr inst)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnModelChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideModelChanged")]
		protected virtual void OnModelChanged ()
		{
			InternalModelChanged ();
		}

		private void InternalModelChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_text_add_selection(IntPtr raw, int start_offset, int end_offset);

		public bool AddSelection(int start_offset, int end_offset) {
			bool raw_ret = atk_text_add_selection(Handle, start_offset, end_offset);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_bounded_ranges(IntPtr raw, IntPtr rect, int coord_type, int x_clip_type, int y_clip_type);

		public Atk.TextRange GetBoundedRanges(Atk.TextRectangle rect, Atk.CoordType coord_type, Atk.TextClipType x_clip_type, Atk.TextClipType y_clip_type) {
			IntPtr native_rect = GLib.Marshaller.StructureToPtrAlloc (rect);
			IntPtr raw_ret = atk_text_get_bounded_ranges(Handle, native_rect, (int) coord_type, (int) x_clip_type, (int) y_clip_type);
			Atk.TextRange ret = Atk.TextRange.New (raw_ret);
			rect = Atk.TextRectangle.New (native_rect);
			Marshal.FreeHGlobal (native_rect);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_get_caret_offset(IntPtr raw);

		public int CaretOffset { 
			get {
				int raw_ret = atk_text_get_caret_offset(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint atk_text_get_character_at_offset(IntPtr raw, int offset);

		public char GetCharacterAtOffset(int offset) {
			uint raw_ret = atk_text_get_character_at_offset(Handle, offset);
			char ret = GLib.Marshaller.GUnicharToChar (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_get_character_count(IntPtr raw);

		public int CharacterCount { 
			get {
				int raw_ret = atk_text_get_character_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_text_get_character_extents(IntPtr raw, int offset, out int x, out int y, out int width, out int height, int coords);

		public void GetCharacterExtents(int offset, out int x, out int y, out int width, out int height, Atk.CoordType coords) {
			atk_text_get_character_extents(Handle, offset, out x, out y, out width, out height, (int) coords);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_default_attributes(IntPtr raw);

		public Atk.Attribute[] DefaultAttributes { 
			get {
				IntPtr raw_ret = atk_text_get_default_attributes(Handle);
				Atk.Attribute[] ret = (Atk.Attribute[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Atk.Attribute));
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_get_n_selections(IntPtr raw);

		public int NSelections { 
			get {
				int raw_ret = atk_text_get_n_selections(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_get_offset_at_point(IntPtr raw, int x, int y, int coords);

		public int GetOffsetAtPoint(int x, int y, Atk.CoordType coords) {
			int raw_ret = atk_text_get_offset_at_point(Handle, x, y, (int) coords);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_text_get_range_extents(IntPtr raw, int start_offset, int end_offset, int coord_type, IntPtr rect);

		public Atk.TextRectangle GetRangeExtents(int start_offset, int end_offset, Atk.CoordType coord_type) {
			Atk.TextRectangle rect;
			IntPtr native_rect = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Atk.TextRectangle)));
			atk_text_get_range_extents(Handle, start_offset, end_offset, (int) coord_type, native_rect);
			rect = Atk.TextRectangle.New (native_rect);
			Marshal.FreeHGlobal (native_rect);
			return rect;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_run_attributes(IntPtr raw, int offset, out int start_offset, out int end_offset);

		public Atk.Attribute[] GetRunAttributes(int offset, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_run_attributes(Handle, offset, out start_offset, out end_offset);
			Atk.Attribute[] ret = (Atk.Attribute[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Atk.Attribute));
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_selection(IntPtr raw, int selection_num, out int start_offset, out int end_offset);

		public string GetSelection(int selection_num, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_selection(Handle, selection_num, out start_offset, out end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_text(IntPtr raw, int start_offset, int end_offset);

		public string GetText(int start_offset, int end_offset) {
			IntPtr raw_ret = atk_text_get_text(Handle, start_offset, end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_text_after_offset(IntPtr raw, int offset, int boundary_type, out int start_offset, out int end_offset);

		public string GetTextAfterOffset(int offset, Atk.TextBoundary boundary_type, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_text_after_offset(Handle, offset, (int) boundary_type, out start_offset, out end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_text_at_offset(IntPtr raw, int offset, int boundary_type, out int start_offset, out int end_offset);

		public string GetTextAtOffset(int offset, Atk.TextBoundary boundary_type, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_text_at_offset(Handle, offset, (int) boundary_type, out start_offset, out end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_text_before_offset(IntPtr raw, int offset, int boundary_type, out int start_offset, out int end_offset);

		public string GetTextBeforeOffset(int offset, Atk.TextBoundary boundary_type, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_text_before_offset(Handle, offset, (int) boundary_type, out start_offset, out end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_text_remove_selection(IntPtr raw, int selection_num);

		bool Atk.IText.RemoveSelection(int selection_num) {
			bool raw_ret = atk_text_remove_selection(Handle, selection_num);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_text_set_caret_offset(IntPtr raw, int offset);

		public bool SetCaretOffset(int offset) {
			bool raw_ret = atk_text_set_caret_offset(Handle, offset);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_text_set_selection(IntPtr raw, int selection_num, int start_offset, int end_offset);

		public bool SetSelection(int selection_num, int start_offset, int end_offset) {
			bool raw_ret = atk_text_set_selection(Handle, selection_num, start_offset, end_offset);
			bool ret = raw_ret;
			return ret;
		}

		[GLib.Signal("text_attributes_changed")]
		public event System.EventHandler TextAttributesChanged {
			add {
				this.AddSignalHandler ("text_attributes_changed", value);
			}
			remove {
				this.RemoveSignalHandler ("text_attributes_changed", value);
			}
		}

		[GLib.Signal("text_selection_changed")]
		public event System.EventHandler TextSelectionChanged {
			add {
				this.AddSignalHandler ("text_selection_changed", value);
			}
			remove {
				this.RemoveSignalHandler ("text_selection_changed", value);
			}
		}

		[GLib.Signal("text_changed")]
		public event Atk.TextChangedHandler TextChanged {
			add {
				this.AddSignalHandler ("text_changed", value, typeof (Atk.TextChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("text_changed", value);
			}
		}

		[GLib.Signal("text_caret_moved")]
		public event Atk.TextCaretMovedHandler TextCaretMoved {
			add {
				this.AddSignalHandler ("text_caret_moved", value, typeof (Atk.TextCaretMovedArgs));
			}
			remove {
				this.RemoveSignalHandler ("text_caret_moved", value);
			}
		}

		static TextChangedNativeDelegate TextChanged_cb_delegate;
		static TextChangedNativeDelegate TextChangedVMCallback {
			get {
				if (TextChanged_cb_delegate == null)
					TextChanged_cb_delegate = new TextChangedNativeDelegate (TextChanged_cb);
				return TextChanged_cb_delegate;
			}
		}

		static void OverrideTextChanged (GLib.GType gtype)
		{
			OverrideTextChanged (gtype, TextChangedVMCallback);
		}

		static void OverrideTextChanged (GLib.GType gtype, TextChangedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "text_changed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextChangedNativeDelegate (IntPtr inst, int position, int length);

		static void TextChanged_cb (IntPtr inst, int position, int length)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnTextChanged (position, length);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideTextChanged")]
		protected virtual void OnTextChanged (int position, int length)
		{
			InternalTextChanged (position, length);
		}

		private void InternalTextChanged (int position, int length)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (position);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (length);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static TextCaretMovedNativeDelegate TextCaretMoved_cb_delegate;
		static TextCaretMovedNativeDelegate TextCaretMovedVMCallback {
			get {
				if (TextCaretMoved_cb_delegate == null)
					TextCaretMoved_cb_delegate = new TextCaretMovedNativeDelegate (TextCaretMoved_cb);
				return TextCaretMoved_cb_delegate;
			}
		}

		static void OverrideTextCaretMoved (GLib.GType gtype)
		{
			OverrideTextCaretMoved (gtype, TextCaretMovedVMCallback);
		}

		static void OverrideTextCaretMoved (GLib.GType gtype, TextCaretMovedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "text_caret_moved", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextCaretMovedNativeDelegate (IntPtr inst, int location);

		static void TextCaretMoved_cb (IntPtr inst, int location)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnTextCaretMoved (location);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideTextCaretMoved")]
		protected virtual void OnTextCaretMoved (int location)
		{
			InternalTextCaretMoved (location);
		}

		private void InternalTextCaretMoved (int location)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (location);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static TextSelectionChangedNativeDelegate TextSelectionChanged_cb_delegate;
		static TextSelectionChangedNativeDelegate TextSelectionChangedVMCallback {
			get {
				if (TextSelectionChanged_cb_delegate == null)
					TextSelectionChanged_cb_delegate = new TextSelectionChangedNativeDelegate (TextSelectionChanged_cb);
				return TextSelectionChanged_cb_delegate;
			}
		}

		static void OverrideTextSelectionChanged (GLib.GType gtype)
		{
			OverrideTextSelectionChanged (gtype, TextSelectionChangedVMCallback);
		}

		static void OverrideTextSelectionChanged (GLib.GType gtype, TextSelectionChangedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "text_selection_changed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextSelectionChangedNativeDelegate (IntPtr inst);

		static void TextSelectionChanged_cb (IntPtr inst)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnTextSelectionChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideTextSelectionChanged")]
		protected virtual void OnTextSelectionChanged ()
		{
			InternalTextSelectionChanged ();
		}

		private void InternalTextSelectionChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static TextAttributesChangedNativeDelegate TextAttributesChanged_cb_delegate;
		static TextAttributesChangedNativeDelegate TextAttributesChangedVMCallback {
			get {
				if (TextAttributesChanged_cb_delegate == null)
					TextAttributesChanged_cb_delegate = new TextAttributesChangedNativeDelegate (TextAttributesChanged_cb);
				return TextAttributesChanged_cb_delegate;
			}
		}

		static void OverrideTextAttributesChanged (GLib.GType gtype)
		{
			OverrideTextAttributesChanged (gtype, TextAttributesChangedVMCallback);
		}

		static void OverrideTextAttributesChanged (GLib.GType gtype, TextAttributesChangedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "text_attributes_changed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextAttributesChangedNativeDelegate (IntPtr inst);

		static void TextAttributesChanged_cb (IntPtr inst)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnTextAttributesChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideTextAttributesChanged")]
		protected virtual void OnTextAttributesChanged ()
		{
			InternalTextAttributesChanged ();
		}

		private void InternalTextAttributesChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_hypertext_get_link(IntPtr raw, int link_index);

		public Atk.Hyperlink GetLink(int link_index) {
			IntPtr raw_ret = atk_hypertext_get_link(Handle, link_index);
			Atk.Hyperlink ret = GLib.Object.GetObject(raw_ret) as Atk.Hyperlink;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_hypertext_get_link_index(IntPtr raw, int char_index);

		public int GetLinkIndex(int char_index) {
			int raw_ret = atk_hypertext_get_link_index(Handle, char_index);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_hypertext_get_n_links(IntPtr raw);

		public int NLinks { 
			get {
				int raw_ret = atk_hypertext_get_n_links(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[GLib.Signal("link_selected")]
		public event Atk.LinkSelectedHandler LinkSelected {
			add {
				this.AddSignalHandler ("link_selected", value, typeof (Atk.LinkSelectedArgs));
			}
			remove {
				this.RemoveSignalHandler ("link_selected", value);
			}
		}

		static LinkSelectedNativeDelegate LinkSelected_cb_delegate;
		static LinkSelectedNativeDelegate LinkSelectedVMCallback {
			get {
				if (LinkSelected_cb_delegate == null)
					LinkSelected_cb_delegate = new LinkSelectedNativeDelegate (LinkSelected_cb);
				return LinkSelected_cb_delegate;
			}
		}

		static void OverrideLinkSelected (GLib.GType gtype)
		{
			OverrideLinkSelected (gtype, LinkSelectedVMCallback);
		}

		static void OverrideLinkSelected (GLib.GType gtype, LinkSelectedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "link_selected", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LinkSelectedNativeDelegate (IntPtr inst, int link_index);

		static void LinkSelected_cb (IntPtr inst, int link_index)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnLinkSelected (link_index);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideLinkSelected")]
		protected virtual void OnLinkSelected (int link_index)
		{
			InternalLinkSelected (link_index);
		}

		private void InternalLinkSelected (int link_index)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (link_index);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_value_get_current_value(IntPtr raw, IntPtr value);

		public void GetCurrentValue(ref GLib.Value value) {
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			atk_value_get_current_value(Handle, native_value);
			value = (GLib.Value) Marshal.PtrToStructure (native_value, typeof (GLib.Value));
			Marshal.FreeHGlobal (native_value);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_value_get_maximum_value(IntPtr raw, IntPtr value);

		public void GetMaximumValue(ref GLib.Value value) {
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			atk_value_get_maximum_value(Handle, native_value);
			value = (GLib.Value) Marshal.PtrToStructure (native_value, typeof (GLib.Value));
			Marshal.FreeHGlobal (native_value);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_value_get_minimum_increment(IntPtr raw, IntPtr value);

		public void GetMinimumIncrement(ref GLib.Value value) {
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			atk_value_get_minimum_increment(Handle, native_value);
			value = (GLib.Value) Marshal.PtrToStructure (native_value, typeof (GLib.Value));
			Marshal.FreeHGlobal (native_value);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_value_get_minimum_value(IntPtr raw, IntPtr value);

		public void GetMinimumValue(ref GLib.Value value) {
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			atk_value_get_minimum_value(Handle, native_value);
			value = (GLib.Value) Marshal.PtrToStructure (native_value, typeof (GLib.Value));
			Marshal.FreeHGlobal (native_value);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_value_set_current_value(IntPtr raw, IntPtr value);

		public bool SetCurrentValue(GLib.Value value) {
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			bool raw_ret = atk_value_set_current_value(Handle, native_value);
			bool ret = raw_ret;
			value = (GLib.Value) Marshal.PtrToStructure (native_value, typeof (GLib.Value));
			Marshal.FreeHGlobal (native_value);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_attribute_value(IntPtr raw, IntPtr attribute_name);

		public string GetAttributeValue(string attribute_name) {
			IntPtr native_attribute_name = GLib.Marshaller.StringToPtrGStrdup (attribute_name);
			IntPtr raw_ret = atk_document_get_attribute_value(Handle, native_attribute_name);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_attribute_name);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_attributes(IntPtr raw);

		public new Atk.Attribute[] Attributes { 
			get {
				IntPtr raw_ret = atk_document_get_attributes(Handle);
				Atk.Attribute[] ret = (Atk.Attribute[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Atk.Attribute));
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_document(IntPtr raw);

		public IntPtr TheDocument { 
			get {
				IntPtr raw_ret = atk_document_get_document(Handle);
				IntPtr ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_document_type(IntPtr raw);

		public string DocumentType { 
			get {
				IntPtr raw_ret = atk_document_get_document_type(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_locale(IntPtr raw);

		public string Locale { 
			get {
				IntPtr raw_ret = atk_document_get_locale(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_document_set_attribute_value(IntPtr raw, IntPtr attribute_name, IntPtr attribute_value);

		public bool SetAttributeValue(string attribute_name, string attribute_value) {
			IntPtr native_attribute_name = GLib.Marshaller.StringToPtrGStrdup (attribute_name);
			IntPtr native_attribute_value = GLib.Marshaller.StringToPtrGStrdup (attribute_value);
			bool raw_ret = atk_document_set_attribute_value(Handle, native_attribute_name, native_attribute_value);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_attribute_name);
			GLib.Marshaller.Free (native_attribute_value);
			return ret;
		}

		[GLib.Signal("load_complete")]
		public event System.EventHandler LoadComplete {
			add {
				this.AddSignalHandler ("load_complete", value);
			}
			remove {
				this.RemoveSignalHandler ("load_complete", value);
			}
		}

		[GLib.Signal("load_stopped")]
		public event System.EventHandler LoadStopped {
			add {
				this.AddSignalHandler ("load_stopped", value);
			}
			remove {
				this.RemoveSignalHandler ("load_stopped", value);
			}
		}

		[GLib.Signal("reload")]
		public event System.EventHandler Reload {
			add {
				this.AddSignalHandler ("reload", value);
			}
			remove {
				this.RemoveSignalHandler ("reload", value);
			}
		}

		static LoadCompleteNativeDelegate LoadComplete_cb_delegate;
		static LoadCompleteNativeDelegate LoadCompleteVMCallback {
			get {
				if (LoadComplete_cb_delegate == null)
					LoadComplete_cb_delegate = new LoadCompleteNativeDelegate (LoadComplete_cb);
				return LoadComplete_cb_delegate;
			}
		}

		static void OverrideLoadComplete (GLib.GType gtype)
		{
			OverrideLoadComplete (gtype, LoadCompleteVMCallback);
		}

		static void OverrideLoadComplete (GLib.GType gtype, LoadCompleteNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "load_complete", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LoadCompleteNativeDelegate (IntPtr inst);

		static void LoadComplete_cb (IntPtr inst)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnLoadComplete ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideLoadComplete")]
		protected virtual void OnLoadComplete ()
		{
			InternalLoadComplete ();
		}

		private void InternalLoadComplete ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static ReloadNativeDelegate Reload_cb_delegate;
		static ReloadNativeDelegate ReloadVMCallback {
			get {
				if (Reload_cb_delegate == null)
					Reload_cb_delegate = new ReloadNativeDelegate (Reload_cb);
				return Reload_cb_delegate;
			}
		}

		static void OverrideReload (GLib.GType gtype)
		{
			OverrideReload (gtype, ReloadVMCallback);
		}

		static void OverrideReload (GLib.GType gtype, ReloadNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "reload", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ReloadNativeDelegate (IntPtr inst);

		static void Reload_cb (IntPtr inst)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnReload ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideReload")]
		protected virtual void OnReload ()
		{
			InternalReload ();
		}

		private void InternalReload ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static LoadStoppedNativeDelegate LoadStopped_cb_delegate;
		static LoadStoppedNativeDelegate LoadStoppedVMCallback {
			get {
				if (LoadStopped_cb_delegate == null)
					LoadStopped_cb_delegate = new LoadStoppedNativeDelegate (LoadStopped_cb);
				return LoadStopped_cb_delegate;
			}
		}

		static void OverrideLoadStopped (GLib.GType gtype)
		{
			OverrideLoadStopped (gtype, LoadStoppedVMCallback);
		}

		static void OverrideLoadStopped (GLib.GType gtype, LoadStoppedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "load_stopped", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LoadStoppedNativeDelegate (IntPtr inst);

		static void LoadStopped_cb (IntPtr inst)
		{
			try {
				Atk.NoOpObject __obj = GLib.Object.GetObject (inst, false) as Atk.NoOpObject;
				__obj.OnLoadStopped ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideLoadStopped")]
		protected virtual void OnLoadStopped ()
		{
			InternalLoadStopped ();
		}

		private void InternalLoadStopped ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

#endregion
	}
}
