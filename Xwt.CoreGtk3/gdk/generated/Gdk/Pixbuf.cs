// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Pixbuf : GLib.Object, GLib.IIcon {

		public Pixbuf (IntPtr raw) : base(raw) {}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_new(int colorspace, bool has_alpha, int bits_per_sample, int width, int height);

		public Pixbuf (Gdk.Colorspace colorspace, bool has_alpha, int bits_per_sample, int width, int height) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pixbuf)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("colorspace");
				vals.Add (new GLib.Value (colorspace));
				names.Add ("has_alpha");
				vals.Add (new GLib.Value (has_alpha));
				names.Add ("bits_per_sample");
				vals.Add (new GLib.Value (bits_per_sample));
				names.Add ("width");
				vals.Add (new GLib.Value (width));
				names.Add ("height");
				vals.Add (new GLib.Value (height));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gdk_pixbuf_new((int) colorspace, has_alpha, bits_per_sample, width, height);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gdk_pixbuf_new_from_file(IntPtr filename, out IntPtr error);

		public unsafe Pixbuf (string filename) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pixbuf)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr error = IntPtr.Zero;
			Raw = gdk_pixbuf_new_from_file(native_filename, out error);
			GLib.Marshaller.Free (native_filename);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gdk_pixbuf_new_from_file_at_scale(IntPtr filename, int width, int height, bool preserve_aspect_ratio, out IntPtr error);

		public unsafe Pixbuf (string filename, int width, int height, bool preserve_aspect_ratio) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pixbuf)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr error = IntPtr.Zero;
			Raw = gdk_pixbuf_new_from_file_at_scale(native_filename, width, height, preserve_aspect_ratio, out error);
			GLib.Marshaller.Free (native_filename);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gdk_pixbuf_new_from_file_at_size(IntPtr filename, int width, int height, out IntPtr error);

		public unsafe Pixbuf (string filename, int width, int height) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pixbuf)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr error = IntPtr.Zero;
			Raw = gdk_pixbuf_new_from_file_at_size(native_filename, width, height, out error);
			GLib.Marshaller.Free (native_filename);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gdk_pixbuf_new_from_inline(int data_length, byte[] data, bool copy_pixels, out IntPtr error);

		public unsafe Pixbuf (int data_length, byte[] data, bool copy_pixels) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pixbuf)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr error = IntPtr.Zero;
			Raw = gdk_pixbuf_new_from_inline(data_length, data, copy_pixels, out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gdk_pixbuf_new_from_stream(IntPtr stream, IntPtr cancellable, out IntPtr error);

		public unsafe Pixbuf (GLib.InputStream stream, GLib.Cancellable cancellable) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pixbuf)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr error = IntPtr.Zero;
			Raw = gdk_pixbuf_new_from_stream(stream == null ? IntPtr.Zero : stream.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gdk_pixbuf_new_from_stream_at_scale(IntPtr stream, int width, int height, bool preserve_aspect_ratio, IntPtr cancellable, out IntPtr error);

		public unsafe Pixbuf (GLib.InputStream stream, int width, int height, bool preserve_aspect_ratio, GLib.Cancellable cancellable) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pixbuf)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr error = IntPtr.Zero;
			Raw = gdk_pixbuf_new_from_stream_at_scale(stream == null ? IntPtr.Zero : stream.Handle, width, height, preserve_aspect_ratio, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_new_from_xpm_data(IntPtr[] data);

		public Pixbuf (string[] data) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pixbuf)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			int cnt_data = data == null ? 0 : data.Length;
			IntPtr[] native_data = new IntPtr [cnt_data];
			for (int i = 0; i < cnt_data; i++)
				native_data [i] = GLib.Marshaller.StringToPtrGStrdup (data[i]);
			Raw = gdk_pixbuf_new_from_xpm_data(native_data);
			for (int i = 0; i < native_data.Length; i++) {
				data [i] = GLib.Marshaller.Utf8PtrToString (native_data[i]);
				GLib.Marshaller.Free (native_data[i]);
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_new_subpixbuf(IntPtr src_pixbuf, int src_x, int src_y, int width, int height);

		public Pixbuf (Gdk.Pixbuf src_pixbuf, int src_x, int src_y, int width, int height) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pixbuf)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = gdk_pixbuf_new_subpixbuf(src_pixbuf == null ? IntPtr.Zero : src_pixbuf.Handle, src_x, src_y, width, height);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_pixbuf_get_n_channels(IntPtr raw);

		[GLib.Property ("n-channels")]
		public int NChannels {
			get  {
				int raw_ret = gdk_pixbuf_get_n_channels(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_pixbuf_get_colorspace(IntPtr raw);

		[GLib.Property ("colorspace")]
		public Gdk.Colorspace Colorspace {
			get  {
				int raw_ret = gdk_pixbuf_get_colorspace(Handle);
				Gdk.Colorspace ret = (Gdk.Colorspace) raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_pixbuf_get_has_alpha(IntPtr raw);

		[GLib.Property ("has-alpha")]
		public bool HasAlpha {
			get  {
				bool raw_ret = gdk_pixbuf_get_has_alpha(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_pixbuf_get_bits_per_sample(IntPtr raw);

		[GLib.Property ("bits-per-sample")]
		public int BitsPerSample {
			get  {
				int raw_ret = gdk_pixbuf_get_bits_per_sample(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_pixbuf_get_width(IntPtr raw);

		[GLib.Property ("width")]
		public int Width {
			get  {
				int raw_ret = gdk_pixbuf_get_width(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_pixbuf_get_height(IntPtr raw);

		[GLib.Property ("height")]
		public int Height {
			get  {
				int raw_ret = gdk_pixbuf_get_height(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_pixbuf_get_rowstride(IntPtr raw);

		[GLib.Property ("rowstride")]
		public int Rowstride {
			get  {
				int raw_ret = gdk_pixbuf_get_rowstride(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GdkPixbufClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GdkPixbufClass> class_structs;

		static GdkPixbufClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GdkPixbufClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GdkPixbufClass class_struct = (GdkPixbufClass) Marshal.PtrToStructure (class_ptr, typeof (GdkPixbufClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GdkPixbufClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_apply_embedded_orientation(IntPtr raw);

		public Gdk.Pixbuf ApplyEmbeddedOrientation() {
			IntPtr raw_ret = gdk_pixbuf_apply_embedded_orientation(Handle);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret, true) as Gdk.Pixbuf;
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pixbuf_composite(IntPtr raw, IntPtr dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type, int overall_alpha);

		public void Composite(Gdk.Pixbuf dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, Gdk.InterpType interp_type, int overall_alpha) {
			gdk_pixbuf_composite(Handle, dest == null ? IntPtr.Zero : dest.Handle, dest_x, dest_y, dest_width, dest_height, offset_x, offset_y, scale_x, scale_y, (int) interp_type, overall_alpha);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pixbuf_composite_color(IntPtr raw, IntPtr dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type, int overall_alpha, int check_x, int check_y, int check_size, uint color1, uint color2);

		public void CompositeColor(Gdk.Pixbuf dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, Gdk.InterpType interp_type, int overall_alpha, int check_x, int check_y, int check_size, uint color1, uint color2) {
			gdk_pixbuf_composite_color(Handle, dest == null ? IntPtr.Zero : dest.Handle, dest_x, dest_y, dest_width, dest_height, offset_x, offset_y, scale_x, scale_y, (int) interp_type, overall_alpha, check_x, check_y, check_size, color1, color2);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_copy(IntPtr raw);

		public Gdk.Pixbuf Copy() {
			IntPtr raw_ret = gdk_pixbuf_copy(Handle);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret, true) as Gdk.Pixbuf;
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pixbuf_copy_area(IntPtr raw, int src_x, int src_y, int width, int height, IntPtr dest_pixbuf, int dest_x, int dest_y);

		public void CopyArea(int src_x, int src_y, int width, int height, Gdk.Pixbuf dest_pixbuf, int dest_x, int dest_y) {
			gdk_pixbuf_copy_area(Handle, src_x, src_y, width, height, dest_pixbuf == null ? IntPtr.Zero : dest_pixbuf.Handle, dest_x, dest_y);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_pixbuf_error_quark();

		public static int ErrorQuark() {
			int raw_ret = gdk_pixbuf_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pixbuf_fill(IntPtr raw, uint pixel);

		public void Fill(uint pixel) {
			gdk_pixbuf_fill(Handle, pixel);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_flip(IntPtr raw, bool horizontal);

		public Gdk.Pixbuf Flip(bool horizontal) {
			IntPtr raw_ret = gdk_pixbuf_flip(Handle, horizontal);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gdk_pixbuf_from_pixdata(IntPtr pixdata, bool copy_pixels, out IntPtr error);

		public static unsafe Gdk.Pixbuf FromPixdata(Gdk.Pixdata pixdata, bool copy_pixels) {
			IntPtr native_pixdata = GLib.Marshaller.StructureToPtrAlloc (pixdata);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = gdk_pixbuf_from_pixdata(native_pixdata, copy_pixels, out error);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
			pixdata = Gdk.Pixdata.New (native_pixdata);
			Marshal.FreeHGlobal (native_pixdata);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_get_file_info(IntPtr filename, out int width, out int height);

		public static Gdk.PixbufFormat GetFileInfo(string filename, out int width, out int height) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr raw_ret = gdk_pixbuf_get_file_info(native_filename, out width, out height);
			Gdk.PixbufFormat ret = raw_ret == IntPtr.Zero ? null : (Gdk.PixbufFormat) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.PixbufFormat), false);
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_get_option(IntPtr raw, IntPtr key);

		public string GetOption(string key) {
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			IntPtr raw_ret = gdk_pixbuf_get_option(Handle, native_key);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_key);
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdk_pixbuf_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_ref(IntPtr raw);

		[Obsolete]
		public Gdk.Pixbuf Ref() {
			IntPtr raw_ret = gdk_pixbuf_ref(Handle);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_rotate_simple(IntPtr raw, int angle);

		public Gdk.Pixbuf RotateSimple(Gdk.PixbufRotation angle) {
			IntPtr raw_ret = gdk_pixbuf_rotate_simple(Handle, (int) angle);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret, true) as Gdk.Pixbuf;
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pixbuf_saturate_and_pixelate(IntPtr raw, IntPtr dest, float saturation, bool pixelate);

		public void SaturateAndPixelate(Gdk.Pixbuf dest, float saturation, bool pixelate) {
			gdk_pixbuf_saturate_and_pixelate(Handle, dest == null ? IntPtr.Zero : dest.Handle, saturation, pixelate);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pixbuf_scale(IntPtr raw, IntPtr dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type);

		public void Scale(Gdk.Pixbuf dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, Gdk.InterpType interp_type) {
			gdk_pixbuf_scale(Handle, dest == null ? IntPtr.Zero : dest.Handle, dest_x, dest_y, dest_width, dest_height, offset_x, offset_y, scale_x, scale_y, (int) interp_type);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pixbuf_unref(IntPtr raw);

		[Obsolete]
		public void Unref() {
			gdk_pixbuf_unref(Handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_icon_equal(IntPtr raw, IntPtr icon2);

		public bool Equal(GLib.IIcon icon2) {
			bool raw_ret = g_icon_equal(Handle, icon2 == null ? IntPtr.Zero : ((icon2 is GLib.Object) ? (icon2 as GLib.Object).Handle : (icon2 as GLib.IconAdapter).Handle));
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_icon_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = g_icon_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

#endregion
	}
}
