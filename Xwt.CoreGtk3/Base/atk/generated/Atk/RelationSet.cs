// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class RelationSet : GLib.Object {

		public RelationSet (IntPtr raw) : base(raw) {}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_set_new();

		public RelationSet () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RelationSet)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = atk_relation_set_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct AtkRelationSetClass {
			private AtkSharp.FunctionNative pad1;
			public Atk.Function Pad1 {
				get {
					return AtkSharp.FunctionWrapper.GetManagedDelegate (pad1);
				}
			}
			private AtkSharp.FunctionNative pad2;
			public Atk.Function Pad2 {
				get {
					return AtkSharp.FunctionWrapper.GetManagedDelegate (pad2);
				}
			}
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, AtkRelationSetClass> class_structs;

		static AtkRelationSetClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, AtkRelationSetClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				AtkRelationSetClass class_struct = (AtkRelationSetClass) Marshal.PtrToStructure (class_ptr, typeof (AtkRelationSetClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, AtkRelationSetClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_relation_set_add(IntPtr raw, IntPtr relation);

		public void Add(Atk.Relation relation) {
			atk_relation_set_add(Handle, relation == null ? IntPtr.Zero : relation.Handle);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_relation_set_add_relation_by_type(IntPtr raw, int relationship, IntPtr target);

		public void AddRelationByType(Atk.RelationType relationship, Atk.Object target) {
			atk_relation_set_add_relation_by_type(Handle, (int) relationship, target == null ? IntPtr.Zero : target.Handle);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_relation_set_contains(IntPtr raw, int relationship);

		public bool Contains(Atk.RelationType relationship) {
			bool raw_ret = atk_relation_set_contains(Handle, (int) relationship);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_relation_set_get_n_relations(IntPtr raw);

		public int NRelations { 
			get {
				int raw_ret = atk_relation_set_get_n_relations(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_set_get_relation(IntPtr raw, int i);

		public Atk.Relation GetRelation(int i) {
			IntPtr raw_ret = atk_relation_set_get_relation(Handle, i);
			Atk.Relation ret = GLib.Object.GetObject(raw_ret) as Atk.Relation;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_set_get_relation_by_type(IntPtr raw, int relationship);

		public Atk.Relation GetRelationByType(Atk.RelationType relationship) {
			IntPtr raw_ret = atk_relation_set_get_relation_by_type(Handle, (int) relationship);
			Atk.Relation ret = GLib.Object.GetObject(raw_ret) as Atk.Relation;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_set_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = atk_relation_set_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_relation_set_remove(IntPtr raw, IntPtr relation);

		public void Remove(Atk.Relation relation) {
			atk_relation_set_remove(Handle, relation == null ? IntPtr.Zero : relation.Handle);
		}

#endregion
	}
}
