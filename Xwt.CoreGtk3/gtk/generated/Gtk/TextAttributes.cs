// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TextAttributes : GLib.Opaque {

		[DllImport ("gtksharpglue-3")]
		extern static uint gtksharp_gtk_textattributes_get_justification_offset ();

		static uint justification_offset = gtksharp_gtk_textattributes_get_justification_offset ();
		public Gtk.Justification Justification {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + justification_offset);
					return (Gtk.Justification) (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + justification_offset);
					*raw_ptr = (int) value;
				}
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static uint gtksharp_gtk_textattributes_get_direction_offset ();

		static uint direction_offset = gtksharp_gtk_textattributes_get_direction_offset ();
		public Gtk.TextDirection Direction {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + direction_offset);
					return (Gtk.TextDirection) (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + direction_offset);
					*raw_ptr = (int) value;
				}
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static uint gtksharp_gtk_textattributes_get_font_offset ();

		static uint font_offset = gtksharp_gtk_textattributes_get_font_offset ();
		public Pango.FontDescription Font {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + font_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (Pango.FontDescription) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Pango.FontDescription), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + font_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static uint gtksharp_gtk_textattributes_get_font_scale_offset ();

		static uint font_scale_offset = gtksharp_gtk_textattributes_get_font_scale_offset ();
		public double FontScale {
			get {
				unsafe {
					double* raw_ptr = (double*)(((byte*)Handle) + font_scale_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					double* raw_ptr = (double*)(((byte*)Handle) + font_scale_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static uint gtksharp_gtk_textattributes_get_left_margin_offset ();

		static uint left_margin_offset = gtksharp_gtk_textattributes_get_left_margin_offset ();
		public int LeftMargin {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + left_margin_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + left_margin_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static uint gtksharp_gtk_textattributes_get_right_margin_offset ();

		static uint right_margin_offset = gtksharp_gtk_textattributes_get_right_margin_offset ();
		public int RightMargin {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + right_margin_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + right_margin_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static uint gtksharp_gtk_textattributes_get_indent_offset ();

		static uint indent_offset = gtksharp_gtk_textattributes_get_indent_offset ();
		public int Indent {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + indent_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + indent_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static uint gtksharp_gtk_textattributes_get_pixels_above_lines_offset ();

		static uint pixels_above_lines_offset = gtksharp_gtk_textattributes_get_pixels_above_lines_offset ();
		public int PixelsAboveLines {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + pixels_above_lines_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + pixels_above_lines_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static uint gtksharp_gtk_textattributes_get_pixels_below_lines_offset ();

		static uint pixels_below_lines_offset = gtksharp_gtk_textattributes_get_pixels_below_lines_offset ();
		public int PixelsBelowLines {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + pixels_below_lines_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + pixels_below_lines_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static uint gtksharp_gtk_textattributes_get_pixels_inside_wrap_offset ();

		static uint pixels_inside_wrap_offset = gtksharp_gtk_textattributes_get_pixels_inside_wrap_offset ();
		public int PixelsInsideWrap {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + pixels_inside_wrap_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + pixels_inside_wrap_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static uint gtksharp_gtk_textattributes_get_tabs_offset ();

		static uint tabs_offset = gtksharp_gtk_textattributes_get_tabs_offset ();
		public Pango.TabArray Tabs {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + tabs_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (Pango.TabArray) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Pango.TabArray), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + tabs_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static uint gtksharp_gtk_textattributes_get_wrap_mode_offset ();

		static uint wrap_mode_offset = gtksharp_gtk_textattributes_get_wrap_mode_offset ();
		public Gtk.WrapMode WrapMode {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + wrap_mode_offset);
					return (Gtk.WrapMode) (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + wrap_mode_offset);
					*raw_ptr = (int) value;
				}
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static uint gtksharp_gtk_textattributes_get_language_offset ();

		static uint language_offset = gtksharp_gtk_textattributes_get_language_offset ();
		public Pango.Language Language {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + language_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (Pango.Language) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Pango.Language), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + language_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static bool gtksharp_gtk_textattributes_get_invisible (IntPtr raw);
		[DllImport ("gtksharpglue-3")]
		extern static void gtksharp_gtk_textattributes_set_invisible (IntPtr raw, bool value);
		public bool Invisible {
			get {
				bool result = gtksharp_gtk_textattributes_get_invisible (Handle);
				return result;
			}
			set {
				gtksharp_gtk_textattributes_set_invisible (Handle, value);
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static bool gtksharp_gtk_textattributes_get_bg_full_height (IntPtr raw);
		[DllImport ("gtksharpglue-3")]
		extern static void gtksharp_gtk_textattributes_set_bg_full_height (IntPtr raw, bool value);
		public bool BgFullHeight {
			get {
				bool result = gtksharp_gtk_textattributes_get_bg_full_height (Handle);
				return result;
			}
			set {
				gtksharp_gtk_textattributes_set_bg_full_height (Handle, value);
			}
		}

		[DllImport ("gtksharpglue-3")]
		extern static bool gtksharp_gtk_textattributes_get_editable (IntPtr raw);
		[DllImport ("gtksharpglue-3")]
		extern static void gtksharp_gtk_textattributes_set_editable (IntPtr raw, bool value);
		public bool Editable {
			get {
				bool result = gtksharp_gtk_textattributes_get_editable (Handle);
				return result;
			}
			set {
				gtksharp_gtk_textattributes_set_editable (Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_attributes_copy(IntPtr raw);

		public Gtk.TextAttributes Copy() {
			IntPtr raw_ret = gtk_text_attributes_copy(Handle);
			Gtk.TextAttributes ret = raw_ret == IntPtr.Zero ? null : (Gtk.TextAttributes) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TextAttributes), true);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_attributes_copy_values(IntPtr raw, IntPtr dest);

		public void CopyValues(Gtk.TextAttributes dest) {
			gtk_text_attributes_copy_values(Handle, dest == null ? IntPtr.Zero : dest.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_attributes_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_text_attributes_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public TextAttributes(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_attributes_new();

		public TextAttributes () 
		{
			Raw = gtk_text_attributes_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_attributes_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				gtk_text_attributes_ref (raw);
				Owned = true;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_attributes_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				gtk_text_attributes_unref (raw);
				Owned = false;
			}
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gtk_text_attributes_unref (handle);
				return false;
			}
		}

		~TextAttributes ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
