// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class AppChooserDialog : Gtk.Dialog, Gtk.IAppChooser {

		public AppChooserDialog (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_app_chooser_dialog_new(IntPtr parent, int flags, IntPtr file);

		public AppChooserDialog (Gtk.Window parent, Gtk.DialogFlags flags, GLib.IFile file) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (AppChooserDialog)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = gtk_app_chooser_dialog_new(parent == null ? IntPtr.Zero : parent.Handle, (int) flags, file == null ? IntPtr.Zero : ((file is GLib.Object) ? (file as GLib.Object).Handle : (file as GLib.FileAdapter).Handle));
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_app_chooser_dialog_new_for_content_type(IntPtr parent, int flags, IntPtr content_type);

		public AppChooserDialog (Gtk.Window parent, Gtk.DialogFlags flags, string content_type) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (AppChooserDialog)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_content_type = GLib.Marshaller.StringToPtrGStrdup (content_type);
			Raw = gtk_app_chooser_dialog_new_for_content_type(parent == null ? IntPtr.Zero : parent.Handle, (int) flags, native_content_type);
			GLib.Marshaller.Free (native_content_type);
		}

		[GLib.Property ("gfile")]
		public GLib.IFile Gfile {
			get {
				GLib.Value val = GetProperty ("gfile");
				GLib.IFile ret = GLib.FileAdapter.GetObject ((GLib.Object) val);
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_app_chooser_dialog_get_heading(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_app_chooser_dialog_set_heading(IntPtr raw, IntPtr heading);

		[GLib.Property ("heading")]
		public string Heading {
			get  {
				IntPtr raw_ret = gtk_app_chooser_dialog_get_heading(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_app_chooser_dialog_set_heading(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkAppChooserDialogClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=16)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Dialog)).GetClassSize ();
		static Dictionary<GLib.GType, GtkAppChooserDialogClass> class_structs;

		static GtkAppChooserDialogClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkAppChooserDialogClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkAppChooserDialogClass class_struct = (GtkAppChooserDialogClass) Marshal.PtrToStructure (class_ptr, typeof (GtkAppChooserDialogClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkAppChooserDialogClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_app_chooser_dialog_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_app_chooser_dialog_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_app_chooser_dialog_get_widget(IntPtr raw);

		public Gtk.Widget Widget { 
			get {
				IntPtr raw_ret = gtk_app_chooser_dialog_get_widget(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_app_chooser_get_app_info(IntPtr raw);

		public GLib.IAppInfo AppInfo { 
			get {
				IntPtr raw_ret = gtk_app_chooser_get_app_info(Handle);
				GLib.IAppInfo ret = GLib.AppInfoAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_app_chooser_get_content_type(IntPtr raw);

		public string ContentType { 
			get {
				IntPtr raw_ret = gtk_app_chooser_get_content_type(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_app_chooser_refresh(IntPtr raw);

		public void Refresh() {
			gtk_app_chooser_refresh(Handle);
		}

#endregion
	}
}
