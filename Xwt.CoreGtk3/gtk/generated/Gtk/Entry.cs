// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Entry : Gtk.Widget, Gtk.IEditable, Gtk.ICellEditable {

		public Entry (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_new();

		public Entry () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Entry)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_entry_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_new_with_buffer(IntPtr buffer);

		public Entry (Gtk.EntryBuffer buffer) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Entry)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (buffer != null) {
					names.Add ("buffer");
					vals.Add (new GLib.Value (buffer));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_entry_new_with_buffer(buffer == null ? IntPtr.Zero : buffer.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_get_buffer(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_buffer(IntPtr raw, IntPtr buffer);

		[GLib.Property ("buffer")]
		public Gtk.EntryBuffer Buffer {
			get  {
				IntPtr raw_ret = gtk_entry_get_buffer(Handle);
				Gtk.EntryBuffer ret = GLib.Object.GetObject(raw_ret) as Gtk.EntryBuffer;
				return ret;
			}
			set  {
				gtk_entry_set_buffer(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.Property ("cursor-position")]
		public int CursorPosition {
			get {
				GLib.Value val = GetProperty ("cursor-position");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("selection-bound")]
		public int SelectionBound {
			get {
				GLib.Value val = GetProperty ("selection-bound");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_entry_get_max_length(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_max_length(IntPtr raw, int max);

		[GLib.Property ("max-length")]
		public int MaxLength {
			get  {
				int raw_ret = gtk_entry_get_max_length(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_entry_set_max_length(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_entry_get_visibility(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_visibility(IntPtr raw, bool visible);

		[GLib.Property ("visibility")]
		public bool Visibility {
			get  {
				bool raw_ret = gtk_entry_get_visibility(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_entry_set_visibility(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_entry_get_has_frame(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_has_frame(IntPtr raw, bool setting);

		[GLib.Property ("has-frame")]
		public bool HasFrame {
			get  {
				bool raw_ret = gtk_entry_get_has_frame(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_entry_set_has_frame(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_get_inner_border(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_inner_border(IntPtr raw, IntPtr value);

		[GLib.Property ("inner-border")]
		public Gtk.Border InnerBorder {
			get  {
				IntPtr raw_ret = gtk_entry_get_inner_border(Handle);
				Gtk.Border ret = Gtk.Border.New (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gtk_entry_set_inner_border(Handle, native_value);
				value = Gtk.Border.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_entry_get_invisible_char(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_invisible_char(IntPtr raw, uint ch);

		[GLib.Property ("invisible-char")]
		public char InvisibleChar {
			get  {
				uint raw_ret = gtk_entry_get_invisible_char(Handle);
				char ret = GLib.Marshaller.GUnicharToChar (raw_ret);
				return ret;
			}
			set  {
				gtk_entry_set_invisible_char(Handle, GLib.Marshaller.CharToGUnichar (value));
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_entry_get_activates_default(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_activates_default(IntPtr raw, bool setting);

		[GLib.Property ("activates-default")]
		public bool ActivatesDefault {
			get  {
				bool raw_ret = gtk_entry_get_activates_default(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_entry_set_activates_default(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_entry_get_width_chars(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_width_chars(IntPtr raw, int n_chars);

		[GLib.Property ("width-chars")]
		public int WidthChars {
			get  {
				int raw_ret = gtk_entry_get_width_chars(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_entry_set_width_chars(Handle, value);
			}
		}

		[GLib.Property ("scroll-offset")]
		public int ScrollOffset {
			get {
				GLib.Value val = GetProperty ("scroll-offset");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_get_text(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_text(IntPtr raw, IntPtr text);

		[GLib.Property ("text")]
		public string Text {
			get  {
				IntPtr raw_ret = gtk_entry_get_text(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_entry_set_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Property ("xalign")]
		public float Xalign {
			get {
				GLib.Value val = GetProperty ("xalign");
				float ret = (float) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("xalign", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("truncate-multiline")]
		public bool TruncateMultiline {
			get {
				GLib.Value val = GetProperty ("truncate-multiline");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("truncate-multiline", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("shadow-type")]
		public Gtk.ShadowType ShadowType {
			get {
				GLib.Value val = GetProperty ("shadow-type");
				Gtk.ShadowType ret = (Gtk.ShadowType) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("shadow-type", val);
				val.Dispose ();
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_entry_get_overwrite_mode(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_overwrite_mode(IntPtr raw, bool overwrite);

		[GLib.Property ("overwrite-mode")]
		public bool OverwriteMode {
			get  {
				bool raw_ret = gtk_entry_get_overwrite_mode(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_entry_set_overwrite_mode(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ushort gtk_entry_get_text_length(IntPtr raw);

		[GLib.Property ("text-length")]
		public ushort TextLength {
			get  {
				ushort raw_ret = gtk_entry_get_text_length(Handle);
				ushort ret = raw_ret;
				return ret;
			}
		}

		[GLib.Property ("invisible-char-set")]
		public bool InvisibleCharSet {
			get {
				GLib.Value val = GetProperty ("invisible-char-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("invisible-char-set", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("caps-lock-warning")]
		public bool CapsLockWarning {
			get {
				GLib.Value val = GetProperty ("caps-lock-warning");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("caps-lock-warning", val);
				val.Dispose ();
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_entry_get_progress_fraction(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_progress_fraction(IntPtr raw, double fraction);

		[GLib.Property ("progress-fraction")]
		public double ProgressFraction {
			get  {
				double raw_ret = gtk_entry_get_progress_fraction(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				gtk_entry_set_progress_fraction(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_entry_get_progress_pulse_step(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_progress_pulse_step(IntPtr raw, double fraction);

		[GLib.Property ("progress-pulse-step")]
		public double ProgressPulseStep {
			get  {
				double raw_ret = gtk_entry_get_progress_pulse_step(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				gtk_entry_set_progress_pulse_step(Handle, value);
			}
		}

		[GLib.Property ("primary-icon-pixbuf")]
		public Gdk.Pixbuf PrimaryIconPixbuf {
			get {
				GLib.Value val = GetProperty ("primary-icon-pixbuf");
				Gdk.Pixbuf ret = (Gdk.Pixbuf) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("primary-icon-pixbuf", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("secondary-icon-pixbuf")]
		public Gdk.Pixbuf SecondaryIconPixbuf {
			get {
				GLib.Value val = GetProperty ("secondary-icon-pixbuf");
				Gdk.Pixbuf ret = (Gdk.Pixbuf) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("secondary-icon-pixbuf", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("primary-icon-stock")]
		public string PrimaryIconStock {
			get {
				GLib.Value val = GetProperty ("primary-icon-stock");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("primary-icon-stock", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("secondary-icon-stock")]
		public string SecondaryIconStock {
			get {
				GLib.Value val = GetProperty ("secondary-icon-stock");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("secondary-icon-stock", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("primary-icon-name")]
		public string PrimaryIconName {
			get {
				GLib.Value val = GetProperty ("primary-icon-name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("primary-icon-name", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("secondary-icon-name")]
		public string SecondaryIconName {
			get {
				GLib.Value val = GetProperty ("secondary-icon-name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("secondary-icon-name", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("primary-icon-gicon")]
		public GLib.IIcon PrimaryIconGicon {
			get {
				GLib.Value val = GetProperty ("primary-icon-gicon");
				GLib.IIcon ret = GLib.IconAdapter.GetObject ((GLib.Object) val);
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("primary-icon-gicon", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("secondary-icon-gicon")]
		public GLib.IIcon SecondaryIconGicon {
			get {
				GLib.Value val = GetProperty ("secondary-icon-gicon");
				GLib.IIcon ret = GLib.IconAdapter.GetObject ((GLib.Object) val);
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("secondary-icon-gicon", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("primary-icon-storage-type")]
		public Gtk.ImageType PrimaryIconStorageType {
			get {
				GLib.Value val = GetProperty ("primary-icon-storage-type");
				Gtk.ImageType ret = (Gtk.ImageType) (Enum) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("secondary-icon-storage-type")]
		public Gtk.ImageType SecondaryIconStorageType {
			get {
				GLib.Value val = GetProperty ("secondary-icon-storage-type");
				Gtk.ImageType ret = (Gtk.ImageType) (Enum) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("primary-icon-activatable")]
		public bool PrimaryIconActivatable {
			get {
				GLib.Value val = GetProperty ("primary-icon-activatable");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("primary-icon-activatable", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("secondary-icon-activatable")]
		public bool SecondaryIconActivatable {
			get {
				GLib.Value val = GetProperty ("secondary-icon-activatable");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("secondary-icon-activatable", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("primary-icon-sensitive")]
		public bool PrimaryIconSensitive {
			get {
				GLib.Value val = GetProperty ("primary-icon-sensitive");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("primary-icon-sensitive", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("secondary-icon-sensitive")]
		public bool SecondaryIconSensitive {
			get {
				GLib.Value val = GetProperty ("secondary-icon-sensitive");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("secondary-icon-sensitive", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("primary-icon-tooltip-text")]
		public string PrimaryIconTooltipText {
			get {
				GLib.Value val = GetProperty ("primary-icon-tooltip-text");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("primary-icon-tooltip-text", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("secondary-icon-tooltip-text")]
		public string SecondaryIconTooltipText {
			get {
				GLib.Value val = GetProperty ("secondary-icon-tooltip-text");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("secondary-icon-tooltip-text", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("primary-icon-tooltip-markup")]
		public string PrimaryIconTooltipMarkup {
			get {
				GLib.Value val = GetProperty ("primary-icon-tooltip-markup");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("primary-icon-tooltip-markup", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("secondary-icon-tooltip-markup")]
		public string SecondaryIconTooltipMarkup {
			get {
				GLib.Value val = GetProperty ("secondary-icon-tooltip-markup");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("secondary-icon-tooltip-markup", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("im-module")]
		public string ImModule {
			get {
				GLib.Value val = GetProperty ("im-module");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("im-module", val);
				val.Dispose ();
			}
		}

		[GLib.Signal("preedit-changed")]
		public event Gtk.PreeditChangedHandler PreeditChanged {
			add {
				this.AddSignalHandler ("preedit-changed", value, typeof (Gtk.PreeditChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("preedit-changed", value);
			}
		}

		[GLib.Signal("move-cursor")]
		public event Gtk.MoveCursorHandler MoveCursor {
			add {
				this.AddSignalHandler ("move-cursor", value, typeof (Gtk.MoveCursorArgs));
			}
			remove {
				this.RemoveSignalHandler ("move-cursor", value);
			}
		}

		[GLib.Signal("cut-clipboard")]
		public event System.EventHandler ClipboardCut {
			add {
				this.AddSignalHandler ("cut-clipboard", value);
			}
			remove {
				this.RemoveSignalHandler ("cut-clipboard", value);
			}
		}

		[GLib.Signal("toggle-overwrite")]
		public event System.EventHandler ToggleOverwrite {
			add {
				this.AddSignalHandler ("toggle-overwrite", value);
			}
			remove {
				this.RemoveSignalHandler ("toggle-overwrite", value);
			}
		}

		[GLib.Signal("icon-release")]
		public event Gtk.IconReleaseHandler IconRelease {
			add {
				this.AddSignalHandler ("icon-release", value, typeof (Gtk.IconReleaseArgs));
			}
			remove {
				this.RemoveSignalHandler ("icon-release", value);
			}
		}

		[GLib.Signal("activate")]
		public event System.EventHandler Activated {
			add {
				this.AddSignalHandler ("activate", value);
			}
			remove {
				this.RemoveSignalHandler ("activate", value);
			}
		}

		[GLib.Signal("icon-press")]
		public event Gtk.IconPressHandler IconPress {
			add {
				this.AddSignalHandler ("icon-press", value, typeof (Gtk.IconPressArgs));
			}
			remove {
				this.RemoveSignalHandler ("icon-press", value);
			}
		}

		[GLib.Signal("delete-from-cursor")]
		public event Gtk.DeleteFromCursorHandler DeleteFromCursor {
			add {
				this.AddSignalHandler ("delete-from-cursor", value, typeof (Gtk.DeleteFromCursorArgs));
			}
			remove {
				this.RemoveSignalHandler ("delete-from-cursor", value);
			}
		}

		[GLib.Signal("paste-clipboard")]
		public event System.EventHandler ClipboardPasted {
			add {
				this.AddSignalHandler ("paste-clipboard", value);
			}
			remove {
				this.RemoveSignalHandler ("paste-clipboard", value);
			}
		}

		[GLib.Signal("backspace")]
		public event System.EventHandler Backspace {
			add {
				this.AddSignalHandler ("backspace", value);
			}
			remove {
				this.RemoveSignalHandler ("backspace", value);
			}
		}

		[GLib.Signal("copy-clipboard")]
		public event System.EventHandler ClipboardCopied {
			add {
				this.AddSignalHandler ("copy-clipboard", value);
			}
			remove {
				this.RemoveSignalHandler ("copy-clipboard", value);
			}
		}

		[GLib.Signal("populate-popup")]
		public event Gtk.PopulatePopupHandler PopulatePopup {
			add {
				this.AddSignalHandler ("populate-popup", value, typeof (Gtk.PopulatePopupArgs));
			}
			remove {
				this.RemoveSignalHandler ("populate-popup", value);
			}
		}

		[GLib.Signal("insert-at-cursor")]
		public event Gtk.InsertAtCursorHandler InsertAtCursor {
			add {
				this.AddSignalHandler ("insert-at-cursor", value, typeof (Gtk.InsertAtCursorArgs));
			}
			remove {
				this.RemoveSignalHandler ("insert-at-cursor", value);
			}
		}

		static IconPressNativeDelegate IconPress_cb_delegate;
		static IconPressNativeDelegate IconPressVMCallback {
			get {
				if (IconPress_cb_delegate == null)
					IconPress_cb_delegate = new IconPressNativeDelegate (IconPress_cb);
				return IconPress_cb_delegate;
			}
		}

		static void OverrideIconPress (GLib.GType gtype)
		{
			OverrideIconPress (gtype, IconPressVMCallback);
		}

		static void OverrideIconPress (GLib.GType gtype, IconPressNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "icon-press", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void IconPressNativeDelegate (IntPtr inst, int p0, IntPtr p1);

		static void IconPress_cb (IntPtr inst, int p0, IntPtr p1)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnIconPress ((Gtk.EntryIconPosition) p0, Gdk.Event.GetEvent (p1));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideIconPress")]
		protected virtual void OnIconPress (Gtk.EntryIconPosition p0, Gdk.Event p1)
		{
			InternalIconPress (p0, p1);
		}

		private void InternalIconPress (Gtk.EntryIconPosition p0, Gdk.Event p1)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (p0);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (p1);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static IconReleaseNativeDelegate IconRelease_cb_delegate;
		static IconReleaseNativeDelegate IconReleaseVMCallback {
			get {
				if (IconRelease_cb_delegate == null)
					IconRelease_cb_delegate = new IconReleaseNativeDelegate (IconRelease_cb);
				return IconRelease_cb_delegate;
			}
		}

		static void OverrideIconRelease (GLib.GType gtype)
		{
			OverrideIconRelease (gtype, IconReleaseVMCallback);
		}

		static void OverrideIconRelease (GLib.GType gtype, IconReleaseNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "icon-release", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void IconReleaseNativeDelegate (IntPtr inst, int p0, IntPtr p1);

		static void IconRelease_cb (IntPtr inst, int p0, IntPtr p1)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnIconRelease ((Gtk.EntryIconPosition) p0, Gdk.Event.GetEvent (p1));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideIconRelease")]
		protected virtual void OnIconRelease (Gtk.EntryIconPosition p0, Gdk.Event p1)
		{
			InternalIconRelease (p0, p1);
		}

		private void InternalIconRelease (Gtk.EntryIconPosition p0, Gdk.Event p1)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (p0);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (p1);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static PreeditChangedNativeDelegate PreeditChanged_cb_delegate;
		static PreeditChangedNativeDelegate PreeditChangedVMCallback {
			get {
				if (PreeditChanged_cb_delegate == null)
					PreeditChanged_cb_delegate = new PreeditChangedNativeDelegate (PreeditChanged_cb);
				return PreeditChanged_cb_delegate;
			}
		}

		static void OverridePreeditChanged (GLib.GType gtype)
		{
			OverridePreeditChanged (gtype, PreeditChangedVMCallback);
		}

		static void OverridePreeditChanged (GLib.GType gtype, PreeditChangedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "preedit-changed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PreeditChangedNativeDelegate (IntPtr inst, IntPtr p0);

		static void PreeditChanged_cb (IntPtr inst, IntPtr p0)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnPreeditChanged (GLib.Marshaller.PtrToStringGFree(p0));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverridePreeditChanged")]
		protected virtual void OnPreeditChanged (string p0)
		{
			InternalPreeditChanged (p0);
		}

		private void InternalPreeditChanged (string p0)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (p0);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static PopulatePopupNativeDelegate PopulatePopup_cb_delegate;
		static PopulatePopupNativeDelegate PopulatePopupVMCallback {
			get {
				if (PopulatePopup_cb_delegate == null)
					PopulatePopup_cb_delegate = new PopulatePopupNativeDelegate (PopulatePopup_cb);
				return PopulatePopup_cb_delegate;
			}
		}

		static void OverridePopulatePopup (GLib.GType gtype)
		{
			OverridePopulatePopup (gtype, PopulatePopupVMCallback);
		}

		static void OverridePopulatePopup (GLib.GType gtype, PopulatePopupNativeDelegate callback)
		{
			GtkEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.PopulatePopup = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PopulatePopupNativeDelegate (IntPtr inst, IntPtr menu);

		static void PopulatePopup_cb (IntPtr inst, IntPtr menu)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnPopulatePopup (GLib.Object.GetObject(menu) as Gtk.Menu);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverridePopulatePopup")]
		protected virtual void OnPopulatePopup (Gtk.Menu menu)
		{
			InternalPopulatePopup (menu);
		}

		private void InternalPopulatePopup (Gtk.Menu menu)
		{
			PopulatePopupNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).PopulatePopup;
			if (unmanaged == null) return;

			unmanaged (this.Handle, menu == null ? IntPtr.Zero : menu.Handle);
		}

		static ActivatedNativeDelegate Activated_cb_delegate;
		static ActivatedNativeDelegate ActivatedVMCallback {
			get {
				if (Activated_cb_delegate == null)
					Activated_cb_delegate = new ActivatedNativeDelegate (Activated_cb);
				return Activated_cb_delegate;
			}
		}

		static void OverrideActivated (GLib.GType gtype)
		{
			OverrideActivated (gtype, ActivatedVMCallback);
		}

		static void OverrideActivated (GLib.GType gtype, ActivatedNativeDelegate callback)
		{
			GtkEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.Activated = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActivatedNativeDelegate (IntPtr inst);

		static void Activated_cb (IntPtr inst)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnActivated ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideActivated")]
		protected virtual void OnActivated ()
		{
			InternalActivated ();
		}

		private void InternalActivated ()
		{
			ActivatedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Activated;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static MoveCursorNativeDelegate MoveCursor_cb_delegate;
		static MoveCursorNativeDelegate MoveCursorVMCallback {
			get {
				if (MoveCursor_cb_delegate == null)
					MoveCursor_cb_delegate = new MoveCursorNativeDelegate (MoveCursor_cb);
				return MoveCursor_cb_delegate;
			}
		}

		static void OverrideMoveCursor (GLib.GType gtype)
		{
			OverrideMoveCursor (gtype, MoveCursorVMCallback);
		}

		static void OverrideMoveCursor (GLib.GType gtype, MoveCursorNativeDelegate callback)
		{
			GtkEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.MoveCursor = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveCursorNativeDelegate (IntPtr inst, int step, int count, bool extend_selection);

		static void MoveCursor_cb (IntPtr inst, int step, int count, bool extend_selection)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnMoveCursor ((Gtk.MovementStep) step, count, extend_selection);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideMoveCursor")]
		protected virtual void OnMoveCursor (Gtk.MovementStep step, int count, bool extend_selection)
		{
			InternalMoveCursor (step, count, extend_selection);
		}

		private void InternalMoveCursor (Gtk.MovementStep step, int count, bool extend_selection)
		{
			MoveCursorNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).MoveCursor;
			if (unmanaged == null) return;

			unmanaged (this.Handle, (int) step, count, extend_selection);
		}

		static InsertAtCursorNativeDelegate InsertAtCursor_cb_delegate;
		static InsertAtCursorNativeDelegate InsertAtCursorVMCallback {
			get {
				if (InsertAtCursor_cb_delegate == null)
					InsertAtCursor_cb_delegate = new InsertAtCursorNativeDelegate (InsertAtCursor_cb);
				return InsertAtCursor_cb_delegate;
			}
		}

		static void OverrideInsertAtCursor (GLib.GType gtype)
		{
			OverrideInsertAtCursor (gtype, InsertAtCursorVMCallback);
		}

		static void OverrideInsertAtCursor (GLib.GType gtype, InsertAtCursorNativeDelegate callback)
		{
			GtkEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.InsertAtCursor = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void InsertAtCursorNativeDelegate (IntPtr inst, IntPtr str);

		static void InsertAtCursor_cb (IntPtr inst, IntPtr str)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnInsertAtCursor (GLib.Marshaller.Utf8PtrToString (str));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideInsertAtCursor")]
		protected virtual void OnInsertAtCursor (string str)
		{
			InternalInsertAtCursor (str);
		}

		private void InternalInsertAtCursor (string str)
		{
			InsertAtCursorNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).InsertAtCursor;
			if (unmanaged == null) return;

			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			unmanaged (this.Handle, native_str);
			GLib.Marshaller.Free (native_str);
		}

		static DeleteFromCursorNativeDelegate DeleteFromCursor_cb_delegate;
		static DeleteFromCursorNativeDelegate DeleteFromCursorVMCallback {
			get {
				if (DeleteFromCursor_cb_delegate == null)
					DeleteFromCursor_cb_delegate = new DeleteFromCursorNativeDelegate (DeleteFromCursor_cb);
				return DeleteFromCursor_cb_delegate;
			}
		}

		static void OverrideDeleteFromCursor (GLib.GType gtype)
		{
			OverrideDeleteFromCursor (gtype, DeleteFromCursorVMCallback);
		}

		static void OverrideDeleteFromCursor (GLib.GType gtype, DeleteFromCursorNativeDelegate callback)
		{
			GtkEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.DeleteFromCursor = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DeleteFromCursorNativeDelegate (IntPtr inst, int type, int count);

		static void DeleteFromCursor_cb (IntPtr inst, int type, int count)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnDeleteFromCursor ((Gtk.DeleteType) type, count);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideDeleteFromCursor")]
		protected virtual void OnDeleteFromCursor (Gtk.DeleteType type, int count)
		{
			InternalDeleteFromCursor (type, count);
		}

		private void InternalDeleteFromCursor (Gtk.DeleteType type, int count)
		{
			DeleteFromCursorNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).DeleteFromCursor;
			if (unmanaged == null) return;

			unmanaged (this.Handle, (int) type, count);
		}

		static BackspaceNativeDelegate Backspace_cb_delegate;
		static BackspaceNativeDelegate BackspaceVMCallback {
			get {
				if (Backspace_cb_delegate == null)
					Backspace_cb_delegate = new BackspaceNativeDelegate (Backspace_cb);
				return Backspace_cb_delegate;
			}
		}

		static void OverrideBackspace (GLib.GType gtype)
		{
			OverrideBackspace (gtype, BackspaceVMCallback);
		}

		static void OverrideBackspace (GLib.GType gtype, BackspaceNativeDelegate callback)
		{
			GtkEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.Backspace = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void BackspaceNativeDelegate (IntPtr inst);

		static void Backspace_cb (IntPtr inst)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnBackspace ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideBackspace")]
		protected virtual void OnBackspace ()
		{
			InternalBackspace ();
		}

		private void InternalBackspace ()
		{
			BackspaceNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Backspace;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static ClipboardCutNativeDelegate ClipboardCut_cb_delegate;
		static ClipboardCutNativeDelegate ClipboardCutVMCallback {
			get {
				if (ClipboardCut_cb_delegate == null)
					ClipboardCut_cb_delegate = new ClipboardCutNativeDelegate (ClipboardCut_cb);
				return ClipboardCut_cb_delegate;
			}
		}

		static void OverrideClipboardCut (GLib.GType gtype)
		{
			OverrideClipboardCut (gtype, ClipboardCutVMCallback);
		}

		static void OverrideClipboardCut (GLib.GType gtype, ClipboardCutNativeDelegate callback)
		{
			GtkEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.ClipboardCut = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClipboardCutNativeDelegate (IntPtr inst);

		static void ClipboardCut_cb (IntPtr inst)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnClipboardCut ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideClipboardCut")]
		protected virtual void OnClipboardCut ()
		{
			InternalClipboardCut ();
		}

		private void InternalClipboardCut ()
		{
			ClipboardCutNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ClipboardCut;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static ClipboardCopiedNativeDelegate ClipboardCopied_cb_delegate;
		static ClipboardCopiedNativeDelegate ClipboardCopiedVMCallback {
			get {
				if (ClipboardCopied_cb_delegate == null)
					ClipboardCopied_cb_delegate = new ClipboardCopiedNativeDelegate (ClipboardCopied_cb);
				return ClipboardCopied_cb_delegate;
			}
		}

		static void OverrideClipboardCopied (GLib.GType gtype)
		{
			OverrideClipboardCopied (gtype, ClipboardCopiedVMCallback);
		}

		static void OverrideClipboardCopied (GLib.GType gtype, ClipboardCopiedNativeDelegate callback)
		{
			GtkEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.ClipboardCopied = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClipboardCopiedNativeDelegate (IntPtr inst);

		static void ClipboardCopied_cb (IntPtr inst)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnClipboardCopied ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideClipboardCopied")]
		protected virtual void OnClipboardCopied ()
		{
			InternalClipboardCopied ();
		}

		private void InternalClipboardCopied ()
		{
			ClipboardCopiedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ClipboardCopied;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static ClipboardPastedNativeDelegate ClipboardPasted_cb_delegate;
		static ClipboardPastedNativeDelegate ClipboardPastedVMCallback {
			get {
				if (ClipboardPasted_cb_delegate == null)
					ClipboardPasted_cb_delegate = new ClipboardPastedNativeDelegate (ClipboardPasted_cb);
				return ClipboardPasted_cb_delegate;
			}
		}

		static void OverrideClipboardPasted (GLib.GType gtype)
		{
			OverrideClipboardPasted (gtype, ClipboardPastedVMCallback);
		}

		static void OverrideClipboardPasted (GLib.GType gtype, ClipboardPastedNativeDelegate callback)
		{
			GtkEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.ClipboardPasted = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClipboardPastedNativeDelegate (IntPtr inst);

		static void ClipboardPasted_cb (IntPtr inst)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnClipboardPasted ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideClipboardPasted")]
		protected virtual void OnClipboardPasted ()
		{
			InternalClipboardPasted ();
		}

		private void InternalClipboardPasted ()
		{
			ClipboardPastedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ClipboardPasted;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static ToggleOverwriteNativeDelegate ToggleOverwrite_cb_delegate;
		static ToggleOverwriteNativeDelegate ToggleOverwriteVMCallback {
			get {
				if (ToggleOverwrite_cb_delegate == null)
					ToggleOverwrite_cb_delegate = new ToggleOverwriteNativeDelegate (ToggleOverwrite_cb);
				return ToggleOverwrite_cb_delegate;
			}
		}

		static void OverrideToggleOverwrite (GLib.GType gtype)
		{
			OverrideToggleOverwrite (gtype, ToggleOverwriteVMCallback);
		}

		static void OverrideToggleOverwrite (GLib.GType gtype, ToggleOverwriteNativeDelegate callback)
		{
			GtkEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.ToggleOverwrite = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggleOverwriteNativeDelegate (IntPtr inst);

		static void ToggleOverwrite_cb (IntPtr inst)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnToggleOverwrite ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideToggleOverwrite")]
		protected virtual void OnToggleOverwrite ()
		{
			InternalToggleOverwrite ();
		}

		private void InternalToggleOverwrite ()
		{
			ToggleOverwriteNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ToggleOverwrite;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static GetTextAreaSizeNativeDelegate GetTextAreaSize_cb_delegate;
		static GetTextAreaSizeNativeDelegate GetTextAreaSizeVMCallback {
			get {
				if (GetTextAreaSize_cb_delegate == null)
					GetTextAreaSize_cb_delegate = new GetTextAreaSizeNativeDelegate (GetTextAreaSize_cb);
				return GetTextAreaSize_cb_delegate;
			}
		}

		static void OverrideGetTextAreaSize (GLib.GType gtype)
		{
			OverrideGetTextAreaSize (gtype, GetTextAreaSizeVMCallback);
		}

		static void OverrideGetTextAreaSize (GLib.GType gtype, GetTextAreaSizeNativeDelegate callback)
		{
			GtkEntryClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetTextAreaSize = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetTextAreaSizeNativeDelegate (IntPtr inst, out int x, out int y, out int width, out int height);

		static void GetTextAreaSize_cb (IntPtr inst, out int x, out int y, out int width, out int height)
		{
			try {
				Entry __obj = GLib.Object.GetObject (inst, false) as Entry;
				__obj.OnGetTextAreaSize (out x, out y, out width, out height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideGetTextAreaSize")]
		protected virtual void OnGetTextAreaSize (out int x, out int y, out int width, out int height)
		{
			InternalGetTextAreaSize (out x, out y, out width, out height);
		}

		private void InternalGetTextAreaSize (out int x, out int y, out int width, out int height)
		{
			GetTextAreaSizeNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetTextAreaSize;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			unmanaged (this.Handle, out x, out y, out width, out height);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkEntryClass {
			public PopulatePopupNativeDelegate PopulatePopup;
			public ActivatedNativeDelegate Activated;
			public MoveCursorNativeDelegate MoveCursor;
			public InsertAtCursorNativeDelegate InsertAtCursor;
			public DeleteFromCursorNativeDelegate DeleteFromCursor;
			public BackspaceNativeDelegate Backspace;
			public ClipboardCutNativeDelegate ClipboardCut;
			public ClipboardCopiedNativeDelegate ClipboardCopied;
			public ClipboardPastedNativeDelegate ClipboardPasted;
			public ToggleOverwriteNativeDelegate ToggleOverwrite;
			public GetTextAreaSizeNativeDelegate GetTextAreaSize;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
			IntPtr GtkReserved5;
			IntPtr GtkReserved6;
			IntPtr GtkReserved7;
			IntPtr GtkReserved8;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Widget)).GetClassSize ();
		static Dictionary<GLib.GType, GtkEntryClass> class_structs;

		static GtkEntryClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkEntryClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkEntryClass class_struct = (GtkEntryClass) Marshal.PtrToStructure (class_ptr, typeof (GtkEntryClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkEntryClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern float gtk_entry_get_alignment(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_alignment(IntPtr raw, float xalign);

		public float Alignment { 
			get {
				float raw_ret = gtk_entry_get_alignment(Handle);
				float ret = raw_ret;
				return ret;
			}
			set {
				gtk_entry_set_alignment(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_get_completion(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_completion(IntPtr raw, IntPtr completion);

		public Gtk.EntryCompletion Completion { 
			get {
				IntPtr raw_ret = gtk_entry_get_completion(Handle);
				Gtk.EntryCompletion ret = GLib.Object.GetObject(raw_ret) as Gtk.EntryCompletion;
				return ret;
			}
			set {
				gtk_entry_set_completion(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_entry_get_current_icon_drag_source(IntPtr raw);

		public int CurrentIconDragSource { 
			get {
				int raw_ret = gtk_entry_get_current_icon_drag_source(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_get_cursor_hadjustment(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_cursor_hadjustment(IntPtr raw, IntPtr adjustment);

		public Gtk.Adjustment CursorHadjustment { 
			get {
				IntPtr raw_ret = gtk_entry_get_cursor_hadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set {
				gtk_entry_set_cursor_hadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_entry_get_icon_activatable(IntPtr raw, int icon_pos);

		public bool GetIconActivatable(Gtk.EntryIconPosition icon_pos) {
			bool raw_ret = gtk_entry_get_icon_activatable(Handle, (int) icon_pos);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_get_icon_area(IntPtr raw, int icon_pos, IntPtr icon_area);

		public void GetIconArea(Gtk.EntryIconPosition icon_pos, Gdk.Rectangle icon_area) {
			IntPtr native_icon_area = GLib.Marshaller.StructureToPtrAlloc (icon_area);
			gtk_entry_get_icon_area(Handle, (int) icon_pos, native_icon_area);
			icon_area = (Gdk.Rectangle) Marshal.PtrToStructure (native_icon_area, typeof (Gdk.Rectangle));
			Marshal.FreeHGlobal (native_icon_area);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_entry_get_icon_at_pos(IntPtr raw, int x, int y);

		public int GetIconAtPos(int x, int y) {
			int raw_ret = gtk_entry_get_icon_at_pos(Handle, x, y);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_get_icon_gicon(IntPtr raw, int icon_pos);

		public GLib.IIcon GetIconGicon(Gtk.EntryIconPosition icon_pos) {
			IntPtr raw_ret = gtk_entry_get_icon_gicon(Handle, (int) icon_pos);
			GLib.IIcon ret = GLib.IconAdapter.GetObject (raw_ret, false);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_get_icon_name(IntPtr raw, int icon_pos);

		public string GetIconName(Gtk.EntryIconPosition icon_pos) {
			IntPtr raw_ret = gtk_entry_get_icon_name(Handle, (int) icon_pos);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_get_icon_pixbuf(IntPtr raw, int icon_pos);

		public Gdk.Pixbuf GetIconPixbuf(Gtk.EntryIconPosition icon_pos) {
			IntPtr raw_ret = gtk_entry_get_icon_pixbuf(Handle, (int) icon_pos);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_entry_get_icon_sensitive(IntPtr raw, int icon_pos);

		public bool GetIconSensitive(Gtk.EntryIconPosition icon_pos) {
			bool raw_ret = gtk_entry_get_icon_sensitive(Handle, (int) icon_pos);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_get_icon_stock(IntPtr raw, int icon_pos);

		public string GetIconStock(Gtk.EntryIconPosition icon_pos) {
			IntPtr raw_ret = gtk_entry_get_icon_stock(Handle, (int) icon_pos);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_entry_get_icon_storage_type(IntPtr raw, int icon_pos);

		public Gtk.ImageType GetIconStorageType(Gtk.EntryIconPosition icon_pos) {
			int raw_ret = gtk_entry_get_icon_storage_type(Handle, (int) icon_pos);
			Gtk.ImageType ret = (Gtk.ImageType) raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_get_icon_tooltip_markup(IntPtr raw, int icon_pos);

		public string GetIconTooltipMarkup(Gtk.EntryIconPosition icon_pos) {
			IntPtr raw_ret = gtk_entry_get_icon_tooltip_markup(Handle, (int) icon_pos);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_get_icon_tooltip_text(IntPtr raw, int icon_pos);

		public string GetIconTooltipText(Gtk.EntryIconPosition icon_pos) {
			IntPtr raw_ret = gtk_entry_get_icon_tooltip_text(Handle, (int) icon_pos);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_get_layout(IntPtr raw);

		public Pango.Layout Layout { 
			get {
				IntPtr raw_ret = gtk_entry_get_layout(Handle);
				Pango.Layout ret = GLib.Object.GetObject(raw_ret) as Pango.Layout;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_get_layout_offsets(IntPtr raw, out int x, out int y);

		public void GetLayoutOffsets(out int x, out int y) {
			gtk_entry_get_layout_offsets(Handle, out x, out y);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_get_text_area(IntPtr raw, IntPtr text_area);

		public void GetTextArea(Gdk.Rectangle text_area) {
			IntPtr native_text_area = GLib.Marshaller.StructureToPtrAlloc (text_area);
			gtk_entry_get_text_area(Handle, native_text_area);
			text_area = (Gdk.Rectangle) Marshal.PtrToStructure (native_text_area, typeof (Gdk.Rectangle));
			Marshal.FreeHGlobal (native_text_area);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_entry_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_entry_im_context_filter_keypress(IntPtr raw, IntPtr evnt);

		public bool ImContextFilterKeypress(Gdk.EventKey evnt) {
			bool raw_ret = gtk_entry_im_context_filter_keypress(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_entry_layout_index_to_text_index(IntPtr raw, int layout_index);

		public int LayoutIndexToTextIndex(int layout_index) {
			int raw_ret = gtk_entry_layout_index_to_text_index(Handle, layout_index);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_progress_pulse(IntPtr raw);

		public void ProgressPulse() {
			gtk_entry_progress_pulse(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_reset_im_context(IntPtr raw);

		public void ResetImContext() {
			gtk_entry_reset_im_context(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_icon_activatable(IntPtr raw, int icon_pos, bool activatable);

		public void SetIconActivatable(Gtk.EntryIconPosition icon_pos, bool activatable) {
			gtk_entry_set_icon_activatable(Handle, (int) icon_pos, activatable);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_icon_drag_source(IntPtr raw, int icon_pos, IntPtr target_list, int actions);

		public void SetIconDragSource(Gtk.EntryIconPosition icon_pos, Gtk.TargetList target_list, Gdk.DragAction actions) {
			gtk_entry_set_icon_drag_source(Handle, (int) icon_pos, target_list == null ? IntPtr.Zero : target_list.Handle, (int) actions);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_icon_from_gicon(IntPtr raw, int icon_pos, IntPtr icon);

		public void SetIconFromGicon(Gtk.EntryIconPosition icon_pos, GLib.IIcon icon) {
			gtk_entry_set_icon_from_gicon(Handle, (int) icon_pos, icon == null ? IntPtr.Zero : ((icon is GLib.Object) ? (icon as GLib.Object).Handle : (icon as GLib.IconAdapter).Handle));
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_icon_from_icon_name(IntPtr raw, int icon_pos, IntPtr icon_name);

		public void SetIconFromIconName(Gtk.EntryIconPosition icon_pos, string icon_name) {
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			gtk_entry_set_icon_from_icon_name(Handle, (int) icon_pos, native_icon_name);
			GLib.Marshaller.Free (native_icon_name);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_icon_from_pixbuf(IntPtr raw, int icon_pos, IntPtr pixbuf);

		public void SetIconFromPixbuf(Gtk.EntryIconPosition icon_pos, Gdk.Pixbuf pixbuf) {
			gtk_entry_set_icon_from_pixbuf(Handle, (int) icon_pos, pixbuf == null ? IntPtr.Zero : pixbuf.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_icon_from_stock(IntPtr raw, int icon_pos, IntPtr stock_id);

		public void SetIconFromStock(Gtk.EntryIconPosition icon_pos, string stock_id) {
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			gtk_entry_set_icon_from_stock(Handle, (int) icon_pos, native_stock_id);
			GLib.Marshaller.Free (native_stock_id);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_icon_sensitive(IntPtr raw, int icon_pos, bool sensitive);

		public void SetIconSensitive(Gtk.EntryIconPosition icon_pos, bool sensitive) {
			gtk_entry_set_icon_sensitive(Handle, (int) icon_pos, sensitive);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_icon_tooltip_markup(IntPtr raw, int icon_pos, IntPtr tooltip);

		public void SetIconTooltipMarkup(Gtk.EntryIconPosition icon_pos, string tooltip) {
			IntPtr native_tooltip = GLib.Marshaller.StringToPtrGStrdup (tooltip);
			gtk_entry_set_icon_tooltip_markup(Handle, (int) icon_pos, native_tooltip);
			GLib.Marshaller.Free (native_tooltip);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_set_icon_tooltip_text(IntPtr raw, int icon_pos, IntPtr tooltip);

		public void SetIconTooltipText(Gtk.EntryIconPosition icon_pos, string tooltip) {
			IntPtr native_tooltip = GLib.Marshaller.StringToPtrGStrdup (tooltip);
			gtk_entry_set_icon_tooltip_text(Handle, (int) icon_pos, native_tooltip);
			GLib.Marshaller.Free (native_tooltip);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_entry_text_index_to_layout_index(IntPtr raw, int text_index);

		public int TextIndexToLayoutIndex(int text_index) {
			int raw_ret = gtk_entry_text_index_to_layout_index(Handle, text_index);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_unset_invisible_char(IntPtr raw);

		public void UnsetInvisibleChar() {
			gtk_entry_unset_invisible_char(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_copy_clipboard(IntPtr raw);

		public void CopyClipboard() {
			gtk_editable_copy_clipboard(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_cut_clipboard(IntPtr raw);

		public void CutClipboard() {
			gtk_editable_cut_clipboard(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_delete_selection(IntPtr raw);

		public void DeleteSelection() {
			gtk_editable_delete_selection(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_delete_text(IntPtr raw, int start_pos, int end_pos);

		public void DeleteText(int start_pos, int end_pos) {
			gtk_editable_delete_text(Handle, start_pos, end_pos);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_editable_get_chars(IntPtr raw, int start_pos, int end_pos);

		public string GetChars(int start_pos, int end_pos) {
			IntPtr raw_ret = gtk_editable_get_chars(Handle, start_pos, end_pos);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_editable_get_editable(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_set_editable(IntPtr raw, bool is_editable);

		public bool IsEditable { 
			get {
				bool raw_ret = gtk_editable_get_editable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_editable_set_editable(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_editable_get_position(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_set_position(IntPtr raw, int position);

		public int Position { 
			get {
				int raw_ret = gtk_editable_get_position(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				gtk_editable_set_position(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_editable_get_selection_bounds(IntPtr raw, out int start_pos, out int end_pos);

		public bool GetSelectionBounds(out int start_pos, out int end_pos) {
			bool raw_ret = gtk_editable_get_selection_bounds(Handle, out start_pos, out end_pos);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_insert_text(IntPtr raw, IntPtr new_text, int new_text_length, ref int position);

		public void InsertText(string new_text, ref int position) {
			IntPtr native_new_text = GLib.Marshaller.StringToPtrGStrdup (new_text);
			gtk_editable_insert_text(Handle, native_new_text, System.Text.Encoding.UTF8.GetByteCount (new_text), ref position);
			GLib.Marshaller.Free (native_new_text);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_paste_clipboard(IntPtr raw);

		public void PasteClipboard() {
			gtk_editable_paste_clipboard(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_select_region(IntPtr raw, int start_pos, int end_pos);

		public void SelectRegion(int start_pos, int end_pos) {
			gtk_editable_select_region(Handle, start_pos, end_pos);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextInsertedSignalDelegate (IntPtr inst, IntPtr arg0, int arg1, ref int arg2, IntPtr gch);

		static void TextInsertedSignalCallback (IntPtr inst, IntPtr arg0, int arg1, ref int arg2, IntPtr gch)
		{
			Gtk.TextInsertedArgs args = new Gtk.TextInsertedArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[3];
				args.Args[0] = GLib.Marshaller.Utf8PtrToString (arg0);
				args.Args[1] = arg1;
				args.Args[2] = arg2;
				Gtk.TextInsertedHandler handler = (Gtk.TextInsertedHandler) sig.Handler;
				handler (GLib.Object.GetObject (inst), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}

			try {
				arg2 = ((int)args.Args[2]);
			} catch (Exception) {
				Exception ex = new Exception ("args.RetVal or 'out' property unset or set to incorrect type in Gtk.TextInsertedHandler callback");
				GLib.ExceptionManager.RaiseUnhandledException (ex, true);
				// NOTREACHED: above call doesn't return.
				throw ex;
			}
		}

		[GLib.Signal("insert-text")]
		public event Gtk.TextInsertedHandler TextInserted {
			add {
				this.AddSignalHandler ("insert-text", value, new TextInsertedSignalDelegate(TextInsertedSignalCallback));
			}
			remove {
				this.RemoveSignalHandler ("insert-text", value);
			}
		}

		[GLib.Signal("changed")]
		public event System.EventHandler Changed {
			add {
				this.AddSignalHandler ("changed", value);
			}
			remove {
				this.RemoveSignalHandler ("changed", value);
			}
		}

		[GLib.Signal("delete-text")]
		public event Gtk.TextDeletedHandler TextDeleted {
			add {
				this.AddSignalHandler ("delete-text", value, typeof (Gtk.TextDeletedArgs));
			}
			remove {
				this.RemoveSignalHandler ("delete-text", value);
			}
		}

		static TextInsertedNativeDelegate TextInserted_cb_delegate;
		static TextInsertedNativeDelegate TextInsertedVMCallback {
			get {
				if (TextInserted_cb_delegate == null)
					TextInserted_cb_delegate = new TextInsertedNativeDelegate (TextInserted_cb);
				return TextInserted_cb_delegate;
			}
		}

		static void OverrideTextInserted (GLib.GType gtype)
		{
			OverrideTextInserted (gtype, TextInsertedVMCallback);
		}

		static void OverrideTextInserted (GLib.GType gtype, TextInsertedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "insert-text", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextInsertedNativeDelegate (IntPtr inst, IntPtr new_text, int new_text_length, ref int position);

		static void TextInserted_cb (IntPtr inst, IntPtr new_text, int new_text_length, ref int position)
		{
			try {
				Gtk.Entry __obj = GLib.Object.GetObject (inst, false) as Gtk.Entry;
				__obj.OnTextInserted (GLib.Marshaller.Utf8PtrToString (new_text), ref position);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideTextInserted")]
		protected virtual void OnTextInserted (string new_text, ref int position)
		{
			InternalTextInserted (new_text, ref position);
		}

		private void InternalTextInserted (string new_text, ref int position)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (4);
			GLib.Value[] vals = new GLib.Value [4];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (new_text);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (System.Text.Encoding.UTF8.GetByteCount (new_text));
			inst_and_params.Append (vals [2]);
			IntPtr position_ptr = GLib.Marshaller.StructureToPtrAlloc (position);
			vals [3] = new GLib.Value (position_ptr);
			inst_and_params.Append (vals [3]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			position = (int) Marshal.PtrToStructure (position_ptr, typeof (int));
			Marshal.FreeHGlobal (position_ptr);

			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static TextDeletedNativeDelegate TextDeleted_cb_delegate;
		static TextDeletedNativeDelegate TextDeletedVMCallback {
			get {
				if (TextDeleted_cb_delegate == null)
					TextDeleted_cb_delegate = new TextDeletedNativeDelegate (TextDeleted_cb);
				return TextDeleted_cb_delegate;
			}
		}

		static void OverrideTextDeleted (GLib.GType gtype)
		{
			OverrideTextDeleted (gtype, TextDeletedVMCallback);
		}

		static void OverrideTextDeleted (GLib.GType gtype, TextDeletedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "delete-text", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextDeletedNativeDelegate (IntPtr inst, int start_pos, int end_pos);

		static void TextDeleted_cb (IntPtr inst, int start_pos, int end_pos)
		{
			try {
				Gtk.Entry __obj = GLib.Object.GetObject (inst, false) as Gtk.Entry;
				__obj.OnTextDeleted (start_pos, end_pos);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideTextDeleted")]
		protected virtual void OnTextDeleted (int start_pos, int end_pos)
		{
			InternalTextDeleted (start_pos, end_pos);
		}

		private void InternalTextDeleted (int start_pos, int end_pos)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (start_pos);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (end_pos);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static ChangedNativeDelegate Changed_cb_delegate;
		static ChangedNativeDelegate ChangedVMCallback {
			get {
				if (Changed_cb_delegate == null)
					Changed_cb_delegate = new ChangedNativeDelegate (Changed_cb);
				return Changed_cb_delegate;
			}
		}

		static void OverrideChanged (GLib.GType gtype)
		{
			OverrideChanged (gtype, ChangedVMCallback);
		}

		static void OverrideChanged (GLib.GType gtype, ChangedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "changed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedNativeDelegate (IntPtr inst);

		static void Changed_cb (IntPtr inst)
		{
			try {
				Gtk.Entry __obj = GLib.Object.GetObject (inst, false) as Gtk.Entry;
				__obj.OnChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged ()
		{
			InternalChanged ();
		}

		private void InternalChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_editable_editing_done(IntPtr raw);

		public void FinishEditing() {
			gtk_cell_editable_editing_done(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_editable_remove_widget(IntPtr raw);

		public void RemoveWidget() {
			gtk_cell_editable_remove_widget(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_editable_start_editing(IntPtr raw, IntPtr evnt);

		public void StartEditing(Gdk.Event evnt) {
			gtk_cell_editable_start_editing(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
		}

		[GLib.Signal("editing-done")]
		public event System.EventHandler EditingDone {
			add {
				this.AddSignalHandler ("editing-done", value);
			}
			remove {
				this.RemoveSignalHandler ("editing-done", value);
			}
		}

		[GLib.Signal("remove-widget")]
		public event System.EventHandler WidgetRemoved {
			add {
				this.AddSignalHandler ("remove-widget", value);
			}
			remove {
				this.RemoveSignalHandler ("remove-widget", value);
			}
		}

		static EditingDoneNativeDelegate EditingDone_cb_delegate;
		static EditingDoneNativeDelegate EditingDoneVMCallback {
			get {
				if (EditingDone_cb_delegate == null)
					EditingDone_cb_delegate = new EditingDoneNativeDelegate (EditingDone_cb);
				return EditingDone_cb_delegate;
			}
		}

		static void OverrideEditingDone (GLib.GType gtype)
		{
			OverrideEditingDone (gtype, EditingDoneVMCallback);
		}

		static void OverrideEditingDone (GLib.GType gtype, EditingDoneNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "editing-done", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void EditingDoneNativeDelegate (IntPtr inst);

		static void EditingDone_cb (IntPtr inst)
		{
			try {
				Gtk.Entry __obj = GLib.Object.GetObject (inst, false) as Gtk.Entry;
				__obj.OnEditingDone ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideEditingDone")]
		protected virtual void OnEditingDone ()
		{
			InternalEditingDone ();
		}

		private void InternalEditingDone ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static WidgetRemovedNativeDelegate WidgetRemoved_cb_delegate;
		static WidgetRemovedNativeDelegate WidgetRemovedVMCallback {
			get {
				if (WidgetRemoved_cb_delegate == null)
					WidgetRemoved_cb_delegate = new WidgetRemovedNativeDelegate (WidgetRemoved_cb);
				return WidgetRemoved_cb_delegate;
			}
		}

		static void OverrideWidgetRemoved (GLib.GType gtype)
		{
			OverrideWidgetRemoved (gtype, WidgetRemovedVMCallback);
		}

		static void OverrideWidgetRemoved (GLib.GType gtype, WidgetRemovedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "remove-widget", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void WidgetRemovedNativeDelegate (IntPtr inst);

		static void WidgetRemoved_cb (IntPtr inst)
		{
			try {
				Gtk.Entry __obj = GLib.Object.GetObject (inst, false) as Gtk.Entry;
				__obj.OnWidgetRemoved ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Entry), ConnectionMethod="OverrideWidgetRemoved")]
		protected virtual void OnWidgetRemoved ()
		{
			InternalWidgetRemoved ();
		}

		private void InternalWidgetRemoved ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

#endregion
	}
}
