// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class InitableAdapter : GLib.GInterfaceAdapter, GLib.IInitable {

		[StructLayout (LayoutKind.Sequential)]
		struct GInitableIface {
			public InitNativeDelegate Init;
		}

		static GInitableIface iface;

		static InitableAdapter ()
		{
			GLib.GType.Register (_gtype, typeof (InitableAdapter));
			iface.Init = new InitNativeDelegate (Init_cb);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool InitNativeDelegate (IntPtr inst, IntPtr cancellable, out IntPtr error);

		static bool Init_cb (IntPtr inst, IntPtr cancellable, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				IInitableImplementor __obj = GLib.Object.GetObject (inst, false) as IInitableImplementor;
				bool __result;
				__result = __obj.Init (GLib.Object.GetObject(cancellable) as GLib.Cancellable);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		static int class_offset = 2 * IntPtr.Size;

		static void Initialize (IntPtr ptr, IntPtr data)
		{
			IntPtr ifaceptr = new IntPtr (ptr.ToInt64 () + class_offset);
			GInitableIface native_iface = (GInitableIface) Marshal.PtrToStructure (ifaceptr, typeof (GInitableIface));
			native_iface.Init = iface.Init;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
		}

		GLib.Object implementor;

		public InitableAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public InitableAdapter (IInitableImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			else if (!(implementor is GLib.Object))
				throw new ArgumentException ("implementor must be a subclass of GLib.Object");
			this.implementor = implementor as GLib.Object;
		}

		public InitableAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = GLib.Object.GetObject (handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_initable_get_type();

		private static GLib.GType _gtype = new GLib.GType (g_initable_get_type ());

		public static GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override GLib.GType GInterfaceGType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static IInitable GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static IInitable GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is IInitableImplementor)
				return new InitableAdapter (obj as IInitableImplementor);
			else if (obj as IInitable == null)
				return new InitableAdapter (obj.Handle);
			else
				return obj as IInitable;
		}

		public IInitableImplementor Implementor {
			get {
				return implementor as IInitableImplementor;
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_initable_init(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public bool Init(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_initable_init(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
