// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Range : Gtk.Widget {

		public Range (IntPtr raw) : base(raw) {}

		protected Range() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_range_get_adjustment(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_adjustment(IntPtr raw, IntPtr adjustment);

		[GLib.Property ("adjustment")]
		public Gtk.Adjustment Adjustment {
			get  {
				IntPtr raw_ret = gtk_range_get_adjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				gtk_range_set_adjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_range_get_inverted(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_inverted(IntPtr raw, bool setting);

		[GLib.Property ("inverted")]
		public bool Inverted {
			get  {
				bool raw_ret = gtk_range_get_inverted(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_range_set_inverted(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_range_get_lower_stepper_sensitivity(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_lower_stepper_sensitivity(IntPtr raw, int sensitivity);

		[GLib.Property ("lower-stepper-sensitivity")]
		public Gtk.SensitivityType LowerStepperSensitivity {
			get  {
				int raw_ret = gtk_range_get_lower_stepper_sensitivity(Handle);
				Gtk.SensitivityType ret = (Gtk.SensitivityType) raw_ret;
				return ret;
			}
			set  {
				gtk_range_set_lower_stepper_sensitivity(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_range_get_upper_stepper_sensitivity(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_upper_stepper_sensitivity(IntPtr raw, int sensitivity);

		[GLib.Property ("upper-stepper-sensitivity")]
		public Gtk.SensitivityType UpperStepperSensitivity {
			get  {
				int raw_ret = gtk_range_get_upper_stepper_sensitivity(Handle);
				Gtk.SensitivityType ret = (Gtk.SensitivityType) raw_ret;
				return ret;
			}
			set  {
				gtk_range_set_upper_stepper_sensitivity(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_range_get_show_fill_level(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_show_fill_level(IntPtr raw, bool show_fill_level);

		[GLib.Property ("show-fill-level")]
		public bool ShowFillLevel {
			get  {
				bool raw_ret = gtk_range_get_show_fill_level(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_range_set_show_fill_level(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_range_get_restrict_to_fill_level(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_restrict_to_fill_level(IntPtr raw, bool restrict_to_fill_level);

		[GLib.Property ("restrict-to-fill-level")]
		public bool RestrictToFillLevel {
			get  {
				bool raw_ret = gtk_range_get_restrict_to_fill_level(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_range_set_restrict_to_fill_level(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_range_get_fill_level(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_fill_level(IntPtr raw, double fill_level);

		[GLib.Property ("fill-level")]
		public double FillLevel {
			get  {
				double raw_ret = gtk_range_get_fill_level(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				gtk_range_set_fill_level(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_range_get_round_digits(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_round_digits(IntPtr raw, int round_digits);

		[GLib.Property ("round-digits")]
		public int RoundDigits {
			get  {
				int raw_ret = gtk_range_get_round_digits(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_range_set_round_digits(Handle, value);
			}
		}

		[GLib.Signal("value-changed")]
		public event System.EventHandler ValueChanged {
			add {
				this.AddSignalHandler ("value-changed", value);
			}
			remove {
				this.RemoveSignalHandler ("value-changed", value);
			}
		}

		[GLib.Signal("change-value")]
		public event Gtk.ChangeValueHandler ChangeValue {
			add {
				this.AddSignalHandler ("change-value", value, typeof (Gtk.ChangeValueArgs));
			}
			remove {
				this.RemoveSignalHandler ("change-value", value);
			}
		}

		[GLib.Signal("move-slider")]
		public event Gtk.MoveSliderHandler MoveSlider {
			add {
				this.AddSignalHandler ("move-slider", value, typeof (Gtk.MoveSliderArgs));
			}
			remove {
				this.RemoveSignalHandler ("move-slider", value);
			}
		}

		[GLib.Signal("adjust-bounds")]
		public event Gtk.AdjustBoundsHandler AdjustBounds {
			add {
				this.AddSignalHandler ("adjust-bounds", value, typeof (Gtk.AdjustBoundsArgs));
			}
			remove {
				this.RemoveSignalHandler ("adjust-bounds", value);
			}
		}

		static ValueChangedNativeDelegate ValueChanged_cb_delegate;
		static ValueChangedNativeDelegate ValueChangedVMCallback {
			get {
				if (ValueChanged_cb_delegate == null)
					ValueChanged_cb_delegate = new ValueChangedNativeDelegate (ValueChanged_cb);
				return ValueChanged_cb_delegate;
			}
		}

		static void OverrideValueChanged (GLib.GType gtype)
		{
			OverrideValueChanged (gtype, ValueChangedVMCallback);
		}

		static void OverrideValueChanged (GLib.GType gtype, ValueChangedNativeDelegate callback)
		{
			GtkRangeClass class_iface = GetClassStruct (gtype, false);
			class_iface.ValueChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ValueChangedNativeDelegate (IntPtr inst);

		static void ValueChanged_cb (IntPtr inst)
		{
			try {
				Range __obj = GLib.Object.GetObject (inst, false) as Range;
				__obj.OnValueChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Range), ConnectionMethod="OverrideValueChanged")]
		protected virtual void OnValueChanged ()
		{
			InternalValueChanged ();
		}

		private void InternalValueChanged ()
		{
			ValueChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ValueChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static AdjustBoundsNativeDelegate AdjustBounds_cb_delegate;
		static AdjustBoundsNativeDelegate AdjustBoundsVMCallback {
			get {
				if (AdjustBounds_cb_delegate == null)
					AdjustBounds_cb_delegate = new AdjustBoundsNativeDelegate (AdjustBounds_cb);
				return AdjustBounds_cb_delegate;
			}
		}

		static void OverrideAdjustBounds (GLib.GType gtype)
		{
			OverrideAdjustBounds (gtype, AdjustBoundsVMCallback);
		}

		static void OverrideAdjustBounds (GLib.GType gtype, AdjustBoundsNativeDelegate callback)
		{
			GtkRangeClass class_iface = GetClassStruct (gtype, false);
			class_iface.AdjustBounds = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AdjustBoundsNativeDelegate (IntPtr inst, double new_value);

		static void AdjustBounds_cb (IntPtr inst, double new_value)
		{
			try {
				Range __obj = GLib.Object.GetObject (inst, false) as Range;
				__obj.OnAdjustBounds (new_value);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Range), ConnectionMethod="OverrideAdjustBounds")]
		protected virtual void OnAdjustBounds (double new_value)
		{
			InternalAdjustBounds (new_value);
		}

		private void InternalAdjustBounds (double new_value)
		{
			AdjustBoundsNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).AdjustBounds;
			if (unmanaged == null) return;

			unmanaged (this.Handle, new_value);
		}

		static MoveSliderNativeDelegate MoveSlider_cb_delegate;
		static MoveSliderNativeDelegate MoveSliderVMCallback {
			get {
				if (MoveSlider_cb_delegate == null)
					MoveSlider_cb_delegate = new MoveSliderNativeDelegate (MoveSlider_cb);
				return MoveSlider_cb_delegate;
			}
		}

		static void OverrideMoveSlider (GLib.GType gtype)
		{
			OverrideMoveSlider (gtype, MoveSliderVMCallback);
		}

		static void OverrideMoveSlider (GLib.GType gtype, MoveSliderNativeDelegate callback)
		{
			GtkRangeClass class_iface = GetClassStruct (gtype, false);
			class_iface.MoveSlider = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveSliderNativeDelegate (IntPtr inst, int scroll);

		static void MoveSlider_cb (IntPtr inst, int scroll)
		{
			try {
				Range __obj = GLib.Object.GetObject (inst, false) as Range;
				__obj.OnMoveSlider ((Gtk.ScrollType) scroll);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Range), ConnectionMethod="OverrideMoveSlider")]
		protected virtual void OnMoveSlider (Gtk.ScrollType scroll)
		{
			InternalMoveSlider (scroll);
		}

		private void InternalMoveSlider (Gtk.ScrollType scroll)
		{
			MoveSliderNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).MoveSlider;
			if (unmanaged == null) return;

			unmanaged (this.Handle, (int) scroll);
		}

		static GetRangeBorderNativeDelegate GetRangeBorder_cb_delegate;
		static GetRangeBorderNativeDelegate GetRangeBorderVMCallback {
			get {
				if (GetRangeBorder_cb_delegate == null)
					GetRangeBorder_cb_delegate = new GetRangeBorderNativeDelegate (GetRangeBorder_cb);
				return GetRangeBorder_cb_delegate;
			}
		}

		static void OverrideGetRangeBorder (GLib.GType gtype)
		{
			OverrideGetRangeBorder (gtype, GetRangeBorderVMCallback);
		}

		static void OverrideGetRangeBorder (GLib.GType gtype, GetRangeBorderNativeDelegate callback)
		{
			GtkRangeClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetRangeBorder = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetRangeBorderNativeDelegate (IntPtr inst, IntPtr border_);

		static void GetRangeBorder_cb (IntPtr inst, IntPtr border_)
		{
			try {
				Range __obj = GLib.Object.GetObject (inst, false) as Range;
				__obj.OnGetRangeBorder (Gtk.Border.New (border_));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Range), ConnectionMethod="OverrideGetRangeBorder")]
		protected virtual void OnGetRangeBorder (Gtk.Border border_)
		{
			InternalGetRangeBorder (border_);
		}

		private void InternalGetRangeBorder (Gtk.Border border_)
		{
			GetRangeBorderNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetRangeBorder;
			if (unmanaged == null) return;

			IntPtr native_border_ = GLib.Marshaller.StructureToPtrAlloc (border_);
			unmanaged (this.Handle, native_border_);
			border_ = Gtk.Border.New (native_border_);
			Marshal.FreeHGlobal (native_border_);
		}

		static ChangeValueNativeDelegate ChangeValue_cb_delegate;
		static ChangeValueNativeDelegate ChangeValueVMCallback {
			get {
				if (ChangeValue_cb_delegate == null)
					ChangeValue_cb_delegate = new ChangeValueNativeDelegate (ChangeValue_cb);
				return ChangeValue_cb_delegate;
			}
		}

		static void OverrideChangeValue (GLib.GType gtype)
		{
			OverrideChangeValue (gtype, ChangeValueVMCallback);
		}

		static void OverrideChangeValue (GLib.GType gtype, ChangeValueNativeDelegate callback)
		{
			GtkRangeClass class_iface = GetClassStruct (gtype, false);
			class_iface.ChangeValue = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ChangeValueNativeDelegate (IntPtr inst, int scroll, double new_value);

		static bool ChangeValue_cb (IntPtr inst, int scroll, double new_value)
		{
			try {
				Range __obj = GLib.Object.GetObject (inst, false) as Range;
				bool __result;
				__result = __obj.OnChangeValue ((Gtk.ScrollType) scroll, new_value);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Range), ConnectionMethod="OverrideChangeValue")]
		protected virtual bool OnChangeValue (Gtk.ScrollType scroll, double new_value)
		{
			return InternalChangeValue (scroll, new_value);
		}

		private bool InternalChangeValue (Gtk.ScrollType scroll, double new_value)
		{
			ChangeValueNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ChangeValue;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, (int) scroll, new_value);
			return __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkRangeClass {
			public string SliderDetail;
			public string StepperDetail;
			public ValueChangedNativeDelegate ValueChanged;
			public AdjustBoundsNativeDelegate AdjustBounds;
			public MoveSliderNativeDelegate MoveSlider;
			public GetRangeBorderNativeDelegate GetRangeBorder;
			public ChangeValueNativeDelegate ChangeValue;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Widget)).GetClassSize ();
		static Dictionary<GLib.GType, GtkRangeClass> class_structs;

		static GtkRangeClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkRangeClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkRangeClass class_struct = (GtkRangeClass) Marshal.PtrToStructure (class_ptr, typeof (GtkRangeClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkRangeClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_range_get_flippable(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_flippable(IntPtr raw, bool flippable);

		public bool Flippable { 
			get {
				bool raw_ret = gtk_range_get_flippable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_range_set_flippable(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_range_get_min_slider_size(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_min_slider_size(IntPtr raw, int min_size);

		public int MinSliderSize { 
			get {
				int raw_ret = gtk_range_get_min_slider_size(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				gtk_range_set_min_slider_size(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_get_range_rect(IntPtr raw, IntPtr range_rect);

		public void GetRangeRect(Gdk.Rectangle range_rect) {
			IntPtr native_range_rect = GLib.Marshaller.StructureToPtrAlloc (range_rect);
			gtk_range_get_range_rect(Handle, native_range_rect);
			range_rect = (Gdk.Rectangle) Marshal.PtrToStructure (native_range_rect, typeof (Gdk.Rectangle));
			Marshal.FreeHGlobal (native_range_rect);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_get_slider_range(IntPtr raw, out int slider_start, out int slider_end);

		public void GetSliderRange(out int slider_start, out int slider_end) {
			gtk_range_get_slider_range(Handle, out slider_start, out slider_end);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_range_get_slider_size_fixed(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_slider_size_fixed(IntPtr raw, bool size_fixed);

		public bool SliderSizeFixed { 
			get {
				bool raw_ret = gtk_range_get_slider_size_fixed(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_range_set_slider_size_fixed(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_range_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_range_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_range_get_value(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_value(IntPtr raw, double value);

		public double Value { 
			get {
				double raw_ret = gtk_range_get_value(Handle);
				double ret = raw_ret;
				return ret;
			}
			set {
				gtk_range_set_value(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_increments(IntPtr raw, double step, double page);

		public void SetIncrements(double step, double page) {
			gtk_range_set_increments(Handle, step, page);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_range(IntPtr raw, double min, double max);

		public void SetRange(double min, double max) {
			gtk_range_set_range(Handle, min, max);
		}

#endregion
	}
}
