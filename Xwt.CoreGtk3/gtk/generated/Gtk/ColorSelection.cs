// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ColorSelection : Gtk.VBox {

		public ColorSelection (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_color_selection_new();

		public ColorSelection () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ColorSelection)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_color_selection_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_color_selection_get_has_opacity_control(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_selection_set_has_opacity_control(IntPtr raw, bool has_opacity);

		[GLib.Property ("has-opacity-control")]
		public bool HasOpacityControl {
			get  {
				bool raw_ret = gtk_color_selection_get_has_opacity_control(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_color_selection_set_has_opacity_control(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_color_selection_get_has_palette(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_selection_set_has_palette(IntPtr raw, bool has_palette);

		[GLib.Property ("has-palette")]
		public bool HasPalette {
			get  {
				bool raw_ret = gtk_color_selection_get_has_palette(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_color_selection_set_has_palette(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_selection_get_current_color(IntPtr raw, IntPtr color);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_selection_set_current_color(IntPtr raw, IntPtr value);

		[GLib.Property ("current-color")]
		public Gdk.Color CurrentColor {
			get  {
				Gdk.Color color;
				IntPtr native_color = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gdk.Color)));
				gtk_color_selection_get_current_color(Handle, native_color);
				color = Gdk.Color.New (native_color);
				Marshal.FreeHGlobal (native_color);
				return color;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gtk_color_selection_set_current_color(Handle, native_value);
				value = Gdk.Color.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ushort gtk_color_selection_get_current_alpha(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_selection_set_current_alpha(IntPtr raw, ushort alpha);

		[GLib.Property ("current-alpha")]
		public ushort CurrentAlpha {
			get  {
				ushort raw_ret = gtk_color_selection_get_current_alpha(Handle);
				ushort ret = raw_ret;
				return ret;
			}
			set  {
				gtk_color_selection_set_current_alpha(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_selection_set_current_rgba(IntPtr raw, IntPtr value);

		[GLib.Property ("current-rgba")]
		public Gdk.RGBA CurrentRgba {
			get {
				GLib.Value val = GetProperty ("current-rgba");
				Gdk.RGBA ret = (Gdk.RGBA) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gtk_color_selection_set_current_rgba(Handle, native_value);
				value = Gdk.RGBA.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[GLib.Signal("color-changed")]
		public event System.EventHandler ColorChanged {
			add {
				this.AddSignalHandler ("color-changed", value);
			}
			remove {
				this.RemoveSignalHandler ("color-changed", value);
			}
		}

		static ColorChangedNativeDelegate ColorChanged_cb_delegate;
		static ColorChangedNativeDelegate ColorChangedVMCallback {
			get {
				if (ColorChanged_cb_delegate == null)
					ColorChanged_cb_delegate = new ColorChangedNativeDelegate (ColorChanged_cb);
				return ColorChanged_cb_delegate;
			}
		}

		static void OverrideColorChanged (GLib.GType gtype)
		{
			OverrideColorChanged (gtype, ColorChangedVMCallback);
		}

		static void OverrideColorChanged (GLib.GType gtype, ColorChangedNativeDelegate callback)
		{
			GtkColorSelectionClass class_iface = GetClassStruct (gtype, false);
			class_iface.ColorChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ColorChangedNativeDelegate (IntPtr inst);

		static void ColorChanged_cb (IntPtr inst)
		{
			try {
				ColorSelection __obj = GLib.Object.GetObject (inst, false) as ColorSelection;
				__obj.OnColorChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ColorSelection), ConnectionMethod="OverrideColorChanged")]
		protected virtual void OnColorChanged ()
		{
			InternalColorChanged ();
		}

		private void InternalColorChanged ()
		{
			ColorChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ColorChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkColorSelectionClass {
			public ColorChangedNativeDelegate ColorChanged;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
			IntPtr GtkReserved3;
			IntPtr GtkReserved4;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.VBox)).GetClassSize ();
		static Dictionary<GLib.GType, GtkColorSelectionClass> class_structs;

		static GtkColorSelectionClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkColorSelectionClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkColorSelectionClass class_struct = (GtkColorSelectionClass) Marshal.PtrToStructure (class_ptr, typeof (GtkColorSelectionClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkColorSelectionClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_selection_get_current_rgba(IntPtr raw, IntPtr rgba);

		public void GetCurrentRgba(Gdk.RGBA rgba) {
			IntPtr native_rgba = GLib.Marshaller.StructureToPtrAlloc (rgba);
			gtk_color_selection_get_current_rgba(Handle, native_rgba);
			rgba = Gdk.RGBA.New (native_rgba);
			Marshal.FreeHGlobal (native_rgba);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ushort gtk_color_selection_get_previous_alpha(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_selection_set_previous_alpha(IntPtr raw, ushort alpha);

		public ushort PreviousAlpha { 
			get {
				ushort raw_ret = gtk_color_selection_get_previous_alpha(Handle);
				ushort ret = raw_ret;
				return ret;
			}
			set {
				gtk_color_selection_set_previous_alpha(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_selection_get_previous_rgba(IntPtr raw, IntPtr rgba);

		public void GetPreviousRgba(Gdk.RGBA rgba) {
			IntPtr native_rgba = GLib.Marshaller.StructureToPtrAlloc (rgba);
			gtk_color_selection_get_previous_rgba(Handle, native_rgba);
			rgba = Gdk.RGBA.New (native_rgba);
			Marshal.FreeHGlobal (native_rgba);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_color_selection_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_color_selection_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_color_selection_is_adjusting(IntPtr raw);

		public bool IsAdjusting { 
			get {
				bool raw_ret = gtk_color_selection_is_adjusting(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_selection_set_previous_rgba(IntPtr raw, IntPtr rgba);

		public void SetPreviousRgba(Gdk.RGBA rgba) {
			IntPtr native_rgba = GLib.Marshaller.StructureToPtrAlloc (rgba);
			gtk_color_selection_set_previous_rgba(Handle, native_rgba);
			rgba = Gdk.RGBA.New (native_rgba);
			Marshal.FreeHGlobal (native_rgba);
		}

#endregion
	}
}
