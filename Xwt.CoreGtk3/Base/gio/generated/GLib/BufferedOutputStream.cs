// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class BufferedOutputStream : GLib.FilterOutputStream {

		public BufferedOutputStream (IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_buffered_output_stream_new(IntPtr base_stream);

		public BufferedOutputStream (GLib.OutputStream base_stream) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BufferedOutputStream)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (base_stream != null) {
					names.Add ("base_stream");
					vals.Add (new GLib.Value (base_stream));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = g_buffered_output_stream_new(base_stream == null ? IntPtr.Zero : base_stream.Handle);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_buffered_output_stream_new_sized(IntPtr base_stream, UIntPtr size);

		public BufferedOutputStream (GLib.OutputStream base_stream, ulong size) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BufferedOutputStream)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = g_buffered_output_stream_new_sized(base_stream == null ? IntPtr.Zero : base_stream.Handle, new UIntPtr (size));
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr g_buffered_output_stream_get_buffer_size(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_buffered_output_stream_set_buffer_size(IntPtr raw, UIntPtr size);

		[GLib.Property ("buffer-size")]
		public ulong BufferSize {
			get  {
				UIntPtr raw_ret = g_buffered_output_stream_get_buffer_size(Handle);
				ulong ret = (ulong) raw_ret;
				return ret;
			}
			set  {
				g_buffered_output_stream_set_buffer_size(Handle, new UIntPtr (value));
			}
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_buffered_output_stream_get_auto_grow(IntPtr raw);

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_buffered_output_stream_set_auto_grow(IntPtr raw, bool auto_grow);

		[GLib.Property ("auto-grow")]
		public bool AutoGrow {
			get  {
				bool raw_ret = g_buffered_output_stream_get_auto_grow(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				g_buffered_output_stream_set_auto_grow(Handle, value);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GBufferedOutputStreamClass {
			IntPtr GReserved1;
			IntPtr GReserved2;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.FilterOutputStream)).GetClassSize ();
		static Dictionary<GLib.GType, GBufferedOutputStreamClass> class_structs;

		static GBufferedOutputStreamClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GBufferedOutputStreamClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GBufferedOutputStreamClass class_struct = (GBufferedOutputStreamClass) Marshal.PtrToStructure (class_ptr, typeof (GBufferedOutputStreamClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GBufferedOutputStreamClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_buffered_output_stream_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_buffered_output_stream_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
