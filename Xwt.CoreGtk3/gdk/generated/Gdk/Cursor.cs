// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Cursor : GLib.Object {

		public Cursor (IntPtr raw) : base(raw) {}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_cursor_new(int cursor_type);

		public Cursor (Gdk.CursorType cursor_type) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Cursor)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("cursor_type");
				vals.Add (new GLib.Value (cursor_type));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gdk_cursor_new((int) cursor_type);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_cursor_new_for_display(IntPtr display, int cursor_type);

		public Cursor (Gdk.Display display, Gdk.CursorType cursor_type) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Cursor)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (display != null) {
					names.Add ("display");
					vals.Add (new GLib.Value (display));
				}
				names.Add ("cursor_type");
				vals.Add (new GLib.Value (cursor_type));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gdk_cursor_new_for_display(display == null ? IntPtr.Zero : display.Handle, (int) cursor_type);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_cursor_new_from_name(IntPtr display, IntPtr name);

		public Cursor (Gdk.Display display, string name) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Cursor)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = gdk_cursor_new_from_name(display == null ? IntPtr.Zero : display.Handle, native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_cursor_new_from_pixbuf(IntPtr display, IntPtr pixbuf, int x, int y);

		public Cursor (Gdk.Display display, Gdk.Pixbuf pixbuf, int x, int y) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Cursor)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = gdk_cursor_new_from_pixbuf(display == null ? IntPtr.Zero : display.Handle, pixbuf == null ? IntPtr.Zero : pixbuf.Handle, x, y);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_cursor_get_cursor_type(IntPtr raw);

		[GLib.Property ("cursor-type")]
		public Gdk.CursorType CursorType {
			get  {
				int raw_ret = gdk_cursor_get_cursor_type(Handle);
				Gdk.CursorType ret = (Gdk.CursorType) raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_cursor_get_display(IntPtr raw);

		[GLib.Property ("display")]
		public Gdk.Display Display {
			get  {
				IntPtr raw_ret = gdk_cursor_get_display(Handle);
				Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
				return ret;
			}
		}

		static GetImageNativeDelegate GetImage_cb_delegate;
		static GetImageNativeDelegate GetImageVMCallback {
			get {
				if (GetImage_cb_delegate == null)
					GetImage_cb_delegate = new GetImageNativeDelegate (GetImage_cb);
				return GetImage_cb_delegate;
			}
		}

		static void OverrideGetImage (GLib.GType gtype)
		{
			OverrideGetImage (gtype, GetImageVMCallback);
		}

		static void OverrideGetImage (GLib.GType gtype, GetImageNativeDelegate callback)
		{
			GdkCursorClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetImage = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetImageNativeDelegate (IntPtr inst);

		static IntPtr GetImage_cb (IntPtr inst)
		{
			try {
				Cursor __obj = GLib.Object.GetObject (inst, false) as Cursor;
				Gdk.Pixbuf __result;
				__result = __obj.OnGetImage ();
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Cursor), ConnectionMethod="OverrideGetImage")]
		protected virtual Gdk.Pixbuf OnGetImage ()
		{
			return InternalGetImage ();
		}

		private Gdk.Pixbuf InternalGetImage ()
		{
			GetImageNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetImage;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return GLib.Object.GetObject(__result) as Gdk.Pixbuf;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GdkCursorClass {
			public GetImageNativeDelegate GetImage;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GdkCursorClass> class_structs;

		static GdkCursorClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GdkCursorClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GdkCursorClass class_struct = (GdkCursorClass) Marshal.PtrToStructure (class_ptr, typeof (GdkCursorClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GdkCursorClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_cursor_get_image(IntPtr raw);

		public Gdk.Pixbuf Image { 
			get {
				IntPtr raw_ret = gdk_cursor_get_image(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_cursor_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdk_cursor_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
