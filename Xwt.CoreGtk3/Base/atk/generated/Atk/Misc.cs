// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Misc : GLib.Object {

		public Misc (IntPtr raw) : base(raw) {}

		protected Misc() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		static ThreadsEnterNativeDelegate ThreadsEnter_cb_delegate;
		static ThreadsEnterNativeDelegate ThreadsEnterVMCallback {
			get {
				if (ThreadsEnter_cb_delegate == null)
					ThreadsEnter_cb_delegate = new ThreadsEnterNativeDelegate (ThreadsEnter_cb);
				return ThreadsEnter_cb_delegate;
			}
		}

		static void OverrideThreadsEnter (GLib.GType gtype)
		{
			OverrideThreadsEnter (gtype, ThreadsEnterVMCallback);
		}

		static void OverrideThreadsEnter (GLib.GType gtype, ThreadsEnterNativeDelegate callback)
		{
			AtkMiscClass class_iface = GetClassStruct (gtype, false);
			class_iface.ThreadsEnter = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ThreadsEnterNativeDelegate (IntPtr inst);

		static void ThreadsEnter_cb (IntPtr inst)
		{
			try {
				Misc __obj = GLib.Object.GetObject (inst, false) as Misc;
				__obj.OnThreadsEnter ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.Misc), ConnectionMethod="OverrideThreadsEnter")]
		protected virtual void OnThreadsEnter ()
		{
			InternalThreadsEnter ();
		}

		private void InternalThreadsEnter ()
		{
			ThreadsEnterNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ThreadsEnter;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static ThreadsLeaveNativeDelegate ThreadsLeave_cb_delegate;
		static ThreadsLeaveNativeDelegate ThreadsLeaveVMCallback {
			get {
				if (ThreadsLeave_cb_delegate == null)
					ThreadsLeave_cb_delegate = new ThreadsLeaveNativeDelegate (ThreadsLeave_cb);
				return ThreadsLeave_cb_delegate;
			}
		}

		static void OverrideThreadsLeave (GLib.GType gtype)
		{
			OverrideThreadsLeave (gtype, ThreadsLeaveVMCallback);
		}

		static void OverrideThreadsLeave (GLib.GType gtype, ThreadsLeaveNativeDelegate callback)
		{
			AtkMiscClass class_iface = GetClassStruct (gtype, false);
			class_iface.ThreadsLeave = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ThreadsLeaveNativeDelegate (IntPtr inst);

		static void ThreadsLeave_cb (IntPtr inst)
		{
			try {
				Misc __obj = GLib.Object.GetObject (inst, false) as Misc;
				__obj.OnThreadsLeave ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.Misc), ConnectionMethod="OverrideThreadsLeave")]
		protected virtual void OnThreadsLeave ()
		{
			InternalThreadsLeave ();
		}

		private void InternalThreadsLeave ()
		{
			ThreadsLeaveNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ThreadsLeave;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct AtkMiscClass {
			public ThreadsEnterNativeDelegate ThreadsEnter;
			public ThreadsLeaveNativeDelegate ThreadsLeave;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=32)]
			public IntPtr[] Vfuncs;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, AtkMiscClass> class_structs;

		static AtkMiscClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, AtkMiscClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				AtkMiscClass class_struct = (AtkMiscClass) Marshal.PtrToStructure (class_ptr, typeof (AtkMiscClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, AtkMiscClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_misc_get_instance();

		public static Atk.Misc Instance { 
			get {
				IntPtr raw_ret = atk_misc_get_instance();
				Atk.Misc ret = GLib.Object.GetObject(raw_ret) as Atk.Misc;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_misc_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = atk_misc_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_misc_threads_enter(IntPtr raw);

		public void ThreadsEnter() {
			atk_misc_threads_enter(Handle);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_misc_threads_leave(IntPtr raw);

		public void ThreadsLeave() {
			atk_misc_threads_leave(Handle);
		}

#endregion
	}
}
