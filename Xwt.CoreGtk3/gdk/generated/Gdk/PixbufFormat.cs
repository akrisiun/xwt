// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class PixbufFormat : GLib.Opaque {

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_format_copy(IntPtr raw);

		public Gdk.PixbufFormat Copy() {
			IntPtr raw_ret = gdk_pixbuf_format_copy(Handle);
			Gdk.PixbufFormat ret = raw_ret == IntPtr.Zero ? null : (Gdk.PixbufFormat) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.PixbufFormat), true);
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_format_get_description(IntPtr raw);

		public string Description { 
			get {
				IntPtr raw_ret = gdk_pixbuf_format_get_description(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_format_get_extensions(IntPtr raw);

		public string[] Extensions { 
			get {
				IntPtr raw_ret = gdk_pixbuf_format_get_extensions(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_format_get_license(IntPtr raw);

		public string License { 
			get {
				IntPtr raw_ret = gdk_pixbuf_format_get_license(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_format_get_mime_types(IntPtr raw);

		public string[] MimeTypes { 
			get {
				IntPtr raw_ret = gdk_pixbuf_format_get_mime_types(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_format_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = gdk_pixbuf_format_get_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_format_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gdk_pixbuf_format_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_pixbuf_format_is_disabled(IntPtr raw);

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pixbuf_format_set_disabled(IntPtr raw, bool disabled);

		public bool Disabled { 
			get {
				bool raw_ret = gdk_pixbuf_format_is_disabled(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gdk_pixbuf_format_set_disabled(Handle, value);
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_pixbuf_format_is_scalable(IntPtr raw);

		public bool IsScalable { 
			get {
				bool raw_ret = gdk_pixbuf_format_is_scalable(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_pixbuf_format_is_writable(IntPtr raw);

		public bool IsWritable { 
			get {
				bool raw_ret = gdk_pixbuf_format_is_writable(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		public PixbufFormat(IntPtr raw) : base(raw) {}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pixbuf_format_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gdk_pixbuf_format_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gdk_pixbuf_format_free (handle);
				return false;
			}
		}

		~PixbufFormat ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
